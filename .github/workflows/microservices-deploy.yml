name: DEX Mobile v6 - Microservices Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'microservices/**'
      - 'infrastructure/**'
      - '.github/workflows/microservices-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'microservices/**'
      - 'infrastructure/**'

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com
  PROJECT_NAME: dex-mobile-v6

jobs:
  # =============================================================================
  # SECURITY AND QUALITY CHECKS
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd microservices/blockchain-service
          npm ci

      - name: Run ESLint
        run: |
          cd microservices/blockchain-service
          npm run lint

      - name: Run tests
        run: |
          cd microservices/blockchain-service
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./microservices/blockchain-service/coverage/lcov.info
          flags: blockchain-service

  # =============================================================================
  # BUILD AND PUSH DOCKER IMAGES
  # =============================================================================
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service:
          - blockchain-service
          - trading-service
          - pool-service
          - quote-service
          - wallet-service
          - auth-service
          - security-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./microservices/${{ matrix.service }}
          file: ./microservices/${{ matrix.service }}/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Scan Docker image for vulnerabilities
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
            ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}-${{ matrix.service }}:latest

  # =============================================================================
  # INFRASTRUCTURE DEPLOYMENT
  # =============================================================================
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var="db_password=${{ secrets.DB_PASSWORD }}" \
                        -var="redis_auth_token=${{ secrets.REDIS_AUTH_TOKEN }}" \
                        -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
                        -var="encryption_key=${{ secrets.ENCRYPTION_KEY }}" \
                        -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan

      - name: Save Terraform Outputs
        run: |
          cd infrastructure/terraform
          terraform output -json > terraform-outputs.json

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: infrastructure/terraform/terraform-outputs.json

  # =============================================================================
  # SERVICE DEPLOYMENT
  # =============================================================================
  deploy-services:
    name: Deploy ECS Services
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service:
          - blockchain-service
          - trading-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs

      - name: Update ECS Service
        run: |
          CLUSTER_NAME="${{ env.PROJECT_NAME }}-cluster"
          SERVICE_NAME="${{ env.PROJECT_NAME }}-${{ matrix.service }}"
          
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment to complete
        run: |
          CLUSTER_NAME="${{ env.PROJECT_NAME }}-cluster"
          SERVICE_NAME="${{ env.PROJECT_NAME }}-${{ matrix.service }}"
          
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --region ${{ env.AWS_REGION }}

  # =============================================================================
  # HEALTH CHECKS AND NOTIFICATIONS
  # =============================================================================
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-services]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs

      - name: Extract API Gateway URL
        id: extract-url
        run: |
          API_URL=$(jq -r '.service_endpoints.value.api_gateway' terraform-outputs.json)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Health Check - Blockchain Service
        run: |
          curl -f "${{ steps.extract-url.outputs.api_url }}/api/blockchain/health" || exit 1

      - name: Health Check - Trading Service
        run: |
          curl -f "${{ steps.extract-url.outputs.api_url }}/api/trading/health" || exit 1

      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ DEX Mobile v6 Microservices deployed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå DEX Mobile v6 Microservices deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
