{"version":3,"file":"v4-sdk.cjs.development.js","sources":["../src/utils/sortsBefore.ts","../src/utils/hook.ts","../src/internalConstants.ts","../src/entities/pool.ts","../src/utils/pathCurrency.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/utils/priceTickConversions.ts","../src/entities/position.ts","../src/utils/encodeRouteToPath.ts","../src/utils/v4Planner.ts","../src/utils/currencyMap.ts","../src/utils/v4PositionPlanner.ts","../src/utils/calldata.ts","../src/utils/v4BaseActionsParser.ts","../src/actionConstants.ts","../src/multicall.ts","../src/utils/positionManagerAbi.ts","../src/PositionManager.ts"],"sourcesContent":["import { Currency } from '@uniswap/sdk-core'\n\nexport function sortsBefore(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA.isNative) return true\n  if (currencyB.isNative) return false\n  return currencyA.wrapped.sortsBefore(currencyB.wrapped)\n}\n","import invariant from 'tiny-invariant'\nimport { isAddress } from 'ethers/lib/utils'\n\nexport type HookPermissions = { [key in HookOptions]: boolean }\n\nexport enum HookOptions {\n  AfterRemoveLiquidityReturnsDelta = 'afterRemoveLiquidityReturnsDelta',\n  AfterAddLiquidityReturnsDelta = 'afterAddLiquidityReturnsDelta',\n  AfterSwapReturnsDelta = 'afterSwapReturnsDelta',\n  BeforeSwapReturnsDelta = 'beforeSwapReturnsDelta',\n  AfterDonate = 'afterDonate',\n  BeforeDonate = 'beforeDonate',\n  AfterSwap = 'afterSwap',\n  BeforeSwap = 'beforeSwap',\n  AfterRemoveLiquidity = 'afterRemoveLiquidity',\n  BeforeRemoveLiquidity = 'beforeRemoveLiquidity',\n  AfterAddLiquidity = 'afterAddLiquidity',\n  BeforeAddLiquidity = 'beforeAddLiquidity',\n  AfterInitialize = 'afterInitialize',\n  BeforeInitialize = 'beforeInitialize',\n}\n\nexport const hookFlagIndex = {\n  [HookOptions.AfterRemoveLiquidityReturnsDelta]: 0,\n  [HookOptions.AfterAddLiquidityReturnsDelta]: 1,\n  [HookOptions.AfterSwapReturnsDelta]: 2,\n  [HookOptions.BeforeSwapReturnsDelta]: 3,\n  [HookOptions.AfterDonate]: 4,\n  [HookOptions.BeforeDonate]: 5,\n  [HookOptions.AfterSwap]: 6,\n  [HookOptions.BeforeSwap]: 7,\n  [HookOptions.AfterRemoveLiquidity]: 8,\n  [HookOptions.BeforeRemoveLiquidity]: 9,\n  [HookOptions.AfterAddLiquidity]: 10,\n  [HookOptions.BeforeAddLiquidity]: 11,\n  [HookOptions.AfterInitialize]: 12,\n  [HookOptions.BeforeInitialize]: 13,\n}\n\nexport class Hook {\n  public static permissions(address: string): HookPermissions {\n    this._checkAddress(address)\n    return {\n      beforeInitialize: this._hasPermission(address, HookOptions.BeforeInitialize),\n      afterInitialize: this._hasPermission(address, HookOptions.AfterInitialize),\n      beforeAddLiquidity: this._hasPermission(address, HookOptions.BeforeAddLiquidity),\n      afterAddLiquidity: this._hasPermission(address, HookOptions.AfterAddLiquidity),\n      beforeRemoveLiquidity: this._hasPermission(address, HookOptions.BeforeRemoveLiquidity),\n      afterRemoveLiquidity: this._hasPermission(address, HookOptions.AfterRemoveLiquidity),\n      beforeSwap: this._hasPermission(address, HookOptions.BeforeSwap),\n      afterSwap: this._hasPermission(address, HookOptions.AfterSwap),\n      beforeDonate: this._hasPermission(address, HookOptions.BeforeDonate),\n      afterDonate: this._hasPermission(address, HookOptions.AfterDonate),\n      beforeSwapReturnsDelta: this._hasPermission(address, HookOptions.BeforeSwapReturnsDelta),\n      afterSwapReturnsDelta: this._hasPermission(address, HookOptions.AfterSwapReturnsDelta),\n      afterAddLiquidityReturnsDelta: this._hasPermission(address, HookOptions.AfterAddLiquidityReturnsDelta),\n      afterRemoveLiquidityReturnsDelta: this._hasPermission(address, HookOptions.AfterRemoveLiquidityReturnsDelta),\n    }\n  }\n\n  public static hasPermission(address: string, hookOption: HookOptions) {\n    this._checkAddress(address)\n    return this._hasPermission(address, hookOption)\n  }\n\n  public static hasInitializePermissions(address: string) {\n    this._checkAddress(address)\n    return (\n      this._hasPermission(address, HookOptions.BeforeInitialize) ||\n      Hook._hasPermission(address, HookOptions.AfterInitialize)\n    )\n  }\n\n  public static hasLiquidityPermissions(address: string) {\n    this._checkAddress(address)\n    // this implicitly encapsulates liquidity delta permissions\n    return (\n      this._hasPermission(address, HookOptions.BeforeAddLiquidity) ||\n      Hook._hasPermission(address, HookOptions.AfterAddLiquidity) ||\n      Hook._hasPermission(address, HookOptions.BeforeRemoveLiquidity) ||\n      Hook._hasPermission(address, HookOptions.AfterRemoveLiquidity)\n    )\n  }\n\n  public static hasSwapPermissions(address: string) {\n    this._checkAddress(address)\n    // this implicitly encapsulates swap delta permissions\n    return this._hasPermission(address, HookOptions.BeforeSwap) || Hook._hasPermission(address, HookOptions.AfterSwap)\n  }\n\n  public static hasDonatePermissions(address: string) {\n    this._checkAddress(address)\n    return (\n      this._hasPermission(address, HookOptions.BeforeDonate) || Hook._hasPermission(address, HookOptions.AfterDonate)\n    )\n  }\n\n  private static _hasPermission(address: string, hookOption: HookOptions) {\n    return !!(parseInt(address, 16) & (1 << hookFlagIndex[hookOption]))\n  }\n\n  private static _checkAddress(address: string) {\n    invariant(isAddress(address), 'invalid address')\n  }\n}\n","import JSBI from 'jsbi'\nimport { constants } from 'ethers'\nimport { encodeSqrtRatioX96 } from '@uniswap/v3-sdk'\n\n// constants used internally but not expected to be used externally\nexport const ADDRESS_ZERO = constants.AddressZero\nexport const NEGATIVE_ONE = JSBI.BigInt(-1)\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const ONE_ETHER = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))\nexport const EMPTY_BYTES = '0x'\n\n// used in liquidity amount math\nexport const Q96 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(96))\nexport const Q192 = JSBI.exponentiate(Q96, JSBI.BigInt(2))\n\n// pool setup\nexport const FEE_AMOUNT_LOW = 100\nexport const FEE_AMOUNT_MEDIUM = 3000\nexport const FEE_AMOUNT_HIGHEST = 10_000\nexport const TICK_SPACING_TEN = 10\nexport const TICK_SPACING_SIXTY = 60\n\n// used in position manager math\nexport const MIN_SLIPPAGE_DECREASE = 0\n\n// used when unwrapping weth in positon manager\nexport const OPEN_DELTA = constants.Zero\n\n// default prices\nexport const SQRT_PRICE_1_1 = encodeSqrtRatioX96(1, 1)\n\n// default hook addresses\nexport const EMPTY_HOOK = '0x0000000000000000000000000000000000000000'\n\n// error constants\nexport const NATIVE_NOT_SET = 'NATIVE_NOT_SET'\nexport const ZERO_LIQUIDITY = 'ZERO_LIQUIDITY'\nexport const NO_SQRT_PRICE = 'NO_SQRT_PRICE'\nexport const CANNOT_BURN = 'CANNOT_BURN'\n\n/**\n * Function fragments that exist on the PositionManager contract.\n */\nexport enum PositionFunctions {\n  INITIALIZE_POOL = 'initializePool',\n  MODIFY_LIQUIDITIES = 'modifyLiquidities',\n  // Inherited from PermitForwarder\n  PERMIT_BATCH = '0x002a3e3a', // \"permitBatch(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\"\n  // Inherited from ERC721Permit\n  ERC721PERMIT_PERMIT = '0x0f5730f1', // \"permit(address,uint256,uint256,uint256,bytes)\"\n}\n\n/**\n * The default factory enabled fee amounts, denominated in hundredths of bips.\n */\nexport enum FeeAmount {\n  LOWEST = 100,\n  LOW = 500,\n  MEDIUM = 3000,\n  HIGH = 10000,\n}\n\n/**\n * The default factory tick spacings by fee amount.\n */\nexport const TICK_SPACINGS: { [amount in FeeAmount]: number } = {\n  [FeeAmount.LOWEST]: 1,\n  [FeeAmount.LOW]: 10,\n  [FeeAmount.MEDIUM]: 60,\n  [FeeAmount.HIGH]: 200,\n}\n","import invariant from 'tiny-invariant'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { BigintIsh, Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\nimport {\n  v3Swap,\n  NoTickDataProvider,\n  Tick,\n  TickConstructorArgs,\n  TickDataProvider,\n  TickListDataProvider,\n  TickMath,\n} from '@uniswap/v3-sdk'\nimport { defaultAbiCoder, isAddress } from 'ethers/lib/utils'\nimport { sortsBefore } from '../utils/sortsBefore'\nimport { Hook } from '../utils/hook'\nimport { ADDRESS_ZERO, NEGATIVE_ONE, Q192 } from '../internalConstants'\nimport JSBI from 'jsbi'\n\nexport const DYNAMIC_FEE_FLAG = 0x800000\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider()\n\nexport type PoolKey = {\n  currency0: string\n  currency1: string\n  fee: number\n  tickSpacing: number\n  hooks: string\n}\n\n/**\n * Represents a V4 pool\n */\nexport class Pool {\n  public readonly currency0: Currency\n  public readonly currency1: Currency\n  public readonly fee: number\n  public readonly tickSpacing: number\n  public readonly sqrtRatioX96: JSBI\n  public readonly hooks: string // address\n  public readonly liquidity: JSBI\n  public readonly tickCurrent: number\n  public readonly tickDataProvider: TickDataProvider\n  public readonly poolKey: PoolKey\n  public readonly poolId: string\n\n  private _currency0Price?: Price<Currency, Currency>\n  private _currency1Price?: Price<Currency, Currency>\n\n  public static getPoolKey(\n    currencyA: Currency,\n    currencyB: Currency,\n    fee: number,\n    tickSpacing: number,\n    hooks: string\n  ): PoolKey {\n    invariant(isAddress(hooks), 'Invalid hook address')\n\n    const [currency0, currency1] = sortsBefore(currencyA, currencyB) ? [currencyA, currencyB] : [currencyB, currencyA]\n    const currency0Addr = currency0.isNative ? ADDRESS_ZERO : currency0.wrapped.address\n    const currency1Addr = currency1.isNative ? ADDRESS_ZERO : currency1.wrapped.address\n\n    return {\n      currency0: currency0Addr,\n      currency1: currency1Addr,\n      fee,\n      tickSpacing,\n      hooks,\n    }\n  }\n\n  public static getPoolId(\n    currencyA: Currency,\n    currencyB: Currency,\n    fee: number,\n    tickSpacing: number,\n    hooks: string\n  ): string {\n    const [currency0, currency1] = sortsBefore(currencyA, currencyB) ? [currencyA, currencyB] : [currencyB, currencyA]\n    const currency0Addr = currency0.isNative ? ADDRESS_ZERO : currency0.wrapped.address\n    const currency1Addr = currency1.isNative ? ADDRESS_ZERO : currency1.wrapped.address\n    return keccak256(\n      ['bytes'],\n      [\n        defaultAbiCoder.encode(\n          ['address', 'address', 'uint24', 'int24', 'address'],\n          [currency0Addr, currency1Addr, fee, tickSpacing, hooks]\n        ),\n      ]\n    )\n  }\n\n  /**\n   * Construct a pool\n   * @param currencyA One of the currencys in the pool\n   * @param currencyB The other currency in the pool\n   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool\n   * @param tickSpacing The tickSpacing of the pool\n   * @param hooks The address of the hook contract\n   * @param sqrtRatioX96 The sqrt of the current ratio of amounts of currency1 to currency0\n   * @param liquidity The current value of in range liquidity\n   * @param tickCurrent The current tick of the pool\n   */\n  public constructor(\n    currencyA: Currency,\n    currencyB: Currency,\n    fee: number,\n    tickSpacing: number,\n    hooks: string,\n    sqrtRatioX96: BigintIsh,\n    liquidity: BigintIsh,\n    tickCurrent: number,\n    ticks: TickDataProvider | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT\n  ) {\n    invariant(isAddress(hooks), 'Invalid hook address')\n    invariant(Number.isInteger(fee) && (fee === DYNAMIC_FEE_FLAG || fee < 1_000_000), 'FEE')\n    if (fee === DYNAMIC_FEE_FLAG) {\n      invariant(Number(hooks) > 0, 'Dynamic fee pool requires a hook')\n    }\n    const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent)\n    const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1)\n    invariant(\n      JSBI.greaterThanOrEqual(JSBI.BigInt(sqrtRatioX96), tickCurrentSqrtRatioX96) &&\n        JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),\n      'PRICE_BOUNDS'\n    )\n\n    // always create a copy of the list since we want the pool's tick list to be immutable\n    ;[this.currency0, this.currency1] = sortsBefore(currencyA, currencyB)\n      ? [currencyA, currencyB]\n      : [currencyB, currencyA]\n    this.fee = fee\n    this.sqrtRatioX96 = JSBI.BigInt(sqrtRatioX96)\n    this.tickSpacing = tickSpacing\n    this.hooks = hooks\n    this.liquidity = JSBI.BigInt(liquidity)\n    this.tickCurrent = tickCurrent\n    this.tickDataProvider = Array.isArray(ticks) ? new TickListDataProvider(ticks, tickSpacing) : ticks\n    this.poolKey = Pool.getPoolKey(this.currency0, this.currency1, this.fee, this.tickSpacing, this.hooks)\n    this.poolId = Pool.getPoolId(this.currency0, this.currency1, this.fee, this.tickSpacing, this.hooks)\n  }\n\n  /** backwards compatibility with v2/3 sdks */\n  public get token0(): Currency {\n    return this.currency0\n  }\n  public get token1(): Currency {\n    return this.currency1\n  }\n\n  /**\n   * Returns true if the currency is either currency0 or currency1\n   * @param currency The currency to check\n   * @returns True if currency is either currency0 or currency1\n   */\n  public involvesCurrency(currency: Currency): boolean {\n    return currency.equals(this.currency0) || currency.equals(this.currency1)\n  }\n  /** backwards compatibility with v2/3 sdks */\n  public involvesToken(currency: Currency): boolean {\n    return this.involvesCurrency(currency)\n  }\n\n  /**\n   * v4-only involvesToken convenience method, used for mixed route ETH <-> WETH connection only\n   * @param currency\n   */\n  public v4InvolvesToken(currency: Currency): boolean {\n    return (\n      this.involvesCurrency(currency) ||\n      currency.wrapped.equals(this.currency0) ||\n      currency.wrapped.equals(this.currency1) ||\n      currency.wrapped.equals(this.currency0.wrapped) ||\n      currency.wrapped.equals(this.currency1.wrapped)\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of currency0, i.e. the ratio of currency1 over currency0\n   */\n  public get currency0Price(): Price<Currency, Currency> {\n    return (\n      this._currency0Price ??\n      (this._currency0Price = new Price(\n        this.currency0,\n        this.currency1,\n        Q192,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96)\n      ))\n    )\n  }\n  /** backwards compatibility with v2/3 sdks */\n  public get token0Price(): Price<Currency, Currency> {\n    return this.currency0Price\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of currency1, i.e. the ratio of currency0 over currency1\n   */\n  public get currency1Price(): Price<Currency, Currency> {\n    return (\n      this._currency1Price ??\n      (this._currency1Price = new Price(\n        this.currency1,\n        this.currency0,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\n        Q192\n      ))\n    )\n  }\n  /** backwards compatibility with v2/3 sdks */\n  public get token1Price(): Price<Currency, Currency> {\n    return this.currency1Price\n  }\n\n  /**\n   * Return the price of the given currency in terms of the other currency in the pool.\n   * @param currency The currency to return price of\n   * @returns The price of the given currency, in terms of the other.\n   */\n  public priceOf(currency: Currency): Price<Currency, Currency> {\n    invariant(this.involvesCurrency(currency), 'CURRENCY')\n    return currency.equals(this.currency0) ? this.currency0Price : this.currency1Price\n  }\n\n  /**\n   * Returns the chain ID of the currencies in the pool.\n   */\n  public get chainId(): number {\n    return this.currency0.chainId\n  }\n\n  /** Works only for vanilla hookless v3 pools, otherwise throws an error */\n  public async getOutputAmount(\n    inputAmount: CurrencyAmount<Currency>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Currency>, Pool]> {\n    invariant(this.involvesCurrency(inputAmount.currency), 'CURRENCY')\n\n    const zeroForOne = inputAmount.currency.equals(this.currency0)\n\n    const {\n      amountCalculated: outputAmount,\n      sqrtRatioX96,\n      liquidity,\n      tickCurrent,\n    } = await this.swap(zeroForOne, inputAmount.quotient, sqrtPriceLimitX96)\n    const outputCurrency = zeroForOne ? this.currency1 : this.currency0\n    return [\n      CurrencyAmount.fromRawAmount(outputCurrency, JSBI.multiply(outputAmount, NEGATIVE_ONE)),\n      new Pool(\n        this.currency0,\n        this.currency1,\n        this.fee,\n        this.tickSpacing,\n        this.hooks,\n        sqrtRatioX96,\n        liquidity,\n        tickCurrent,\n        this.tickDataProvider\n      ),\n    ]\n  }\n\n  /**\n   * Given a desired output amount of a currency, return the computed input amount and a pool with state updated after the trade\n   * Works only for vanilla hookless v3 pools, otherwise throws an error\n   * @param outputAmount the output amount for which to quote the input amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns The input amount and the pool with updated state\n   */\n  public async getInputAmount(\n    outputAmount: CurrencyAmount<Currency>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Currency>, Pool]> {\n    invariant(this.involvesCurrency(outputAmount.currency), 'CURRENCY')\n\n    const zeroForOne = outputAmount.currency.equals(this.currency1)\n\n    const {\n      amountCalculated: inputAmount,\n      sqrtRatioX96,\n      liquidity,\n      tickCurrent,\n    } = await this.swap(zeroForOne, JSBI.multiply(outputAmount.quotient, NEGATIVE_ONE), sqrtPriceLimitX96)\n    const inputCurrency = zeroForOne ? this.currency0 : this.currency1\n    return [\n      CurrencyAmount.fromRawAmount(inputCurrency, inputAmount),\n      new Pool(\n        this.currency0,\n        this.currency1,\n        this.fee,\n        this.tickSpacing,\n        this.hooks,\n        sqrtRatioX96,\n        liquidity,\n        tickCurrent,\n        this.tickDataProvider\n      ),\n    ]\n  }\n\n  /**\n   * Executes a swap\n   * @param zeroForOne Whether the amount in is token0 or token1\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns amountCalculated\n   * @returns sqrtRatioX96\n   * @returns liquidity\n   * @returns tickCurrent\n   */\n  private async swap(\n    zeroForOne: boolean,\n    amountSpecified: JSBI,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<{ amountCalculated: JSBI; sqrtRatioX96: JSBI; liquidity: JSBI; tickCurrent: number }> {\n    if (!this.hookImpactsSwap()) {\n      return v3Swap(\n        JSBI.BigInt(this.fee),\n        this.sqrtRatioX96,\n        this.tickCurrent,\n        this.liquidity,\n        this.tickSpacing,\n        this.tickDataProvider,\n        zeroForOne,\n        amountSpecified,\n        sqrtPriceLimitX96\n      )\n    } else {\n      throw new Error('Unsupported hook')\n    }\n  }\n\n  private hookImpactsSwap(): boolean {\n    // could use this function to clear certain hooks that may have swap Permissions, but we know they don't interfere\n    // in the swap outcome\n    return Hook.hasSwapPermissions(this.hooks)\n  }\n}\n","import { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pool } from '../entities/pool'\n\nexport function amountWithPathCurrency(amount: CurrencyAmount<Currency>, pool: Pool): CurrencyAmount<Currency> {\n  return CurrencyAmount.fromFractionalAmount(\n    getPathCurrency(amount.currency, pool),\n    amount.numerator,\n    amount.denominator\n  )\n}\n\nexport function getPathCurrency(currency: Currency, pool: Pool): Currency {\n  if (pool.involvesCurrency(currency)) {\n    return currency\n  } else if (pool.involvesCurrency(currency.wrapped)) {\n    return currency.wrapped\n  } else if (pool.currency0.wrapped.equals(currency)) {\n    return pool.currency0\n  } else if (pool.currency1.wrapped.equals(currency)) {\n    return pool.currency1\n  } else {\n    throw new Error(\n      `Expected currency ${currency.symbol} to be either ${pool.currency0.symbol} or ${pool.currency1.symbol}`\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Currency, Price } from '@uniswap/sdk-core'\nimport { Pool } from './pool'\nimport { getPathCurrency } from '../utils/pathCurrency'\n\n/**\n * Represents a list of pools through which a swap can occur\n * @template TInput The input currency\n * @template TOutput The output currency\n */\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pools: Pool[]\n  public readonly currencyPath: Currency[]\n  public readonly input: TInput\n  public readonly output: TOutput\n  public readonly pathInput: Currency // equivalent or wrapped/unwrapped input to match pool\n  public readonly pathOutput: Currency // equivalent or wrapped/unwrapped output to match pool\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  /**\n   * Creates an instance of route.\n   * @param pools An array of `Pool` objects, ordered by the route the swap will take\n   * @param input The input currency\n   * @param output The output currency\n   */\n  public constructor(pools: Pool[], input: TInput, output: TOutput) {\n    invariant(pools.length > 0, 'POOLS')\n\n    const chainId = pools[0].chainId\n    const allOnSameChain = pools.every((pool) => pool.chainId === chainId)\n    invariant(allOnSameChain, 'CHAIN_IDS')\n\n    /**\n     * function throws if pools do not involve the input and output currency or the native/wrapped equivalent\n     **/\n    this.pathInput = getPathCurrency(input, pools[0])\n    this.pathOutput = getPathCurrency(output, pools[pools.length - 1])\n\n    /**\n     * Normalizes currency0-currency1 order and selects the next currency/fee step to add to the path\n     * */\n    const currencyPath: Currency[] = [this.pathInput]\n    for (const [i, pool] of pools.entries()) {\n      const currentInputCurrency = currencyPath[i]\n      invariant(currentInputCurrency.equals(pool.currency0) || currentInputCurrency.equals(pool.currency1), 'PATH')\n      const nextCurrency = currentInputCurrency.equals(pool.currency0) ? pool.currency1 : pool.currency0\n      currencyPath.push(nextCurrency)\n    }\n\n    this.pools = pools\n    this.currencyPath = currencyPath\n    this.input = input\n    this.output = output ?? currencyPath[currencyPath.length - 1]\n  }\n\n  public get chainId(): number {\n    return this.pools[0].chainId\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.currency0)\n          ? {\n              nextInput: pool.currency1,\n              price: price.multiply(pool.currency0Price),\n            }\n          : {\n              nextInput: pool.currency0,\n              price: price.multiply(pool.currency1Price),\n            }\n      },\n      this.pools[0].currency0.equals(this.input)\n        ? {\n            nextInput: this.pools[0].currency1,\n            price: this.pools[0].currency0Price,\n          }\n        : {\n            nextInput: this.pools[0].currency0,\n            price: this.pools[0].currency1Price,\n          }\n    ).price\n\n    return (this._midPrice = new Price(this.input, this.output, price.denominator, price.numerator))\n  }\n}\n","import { Currency, Fraction, Percent, Price, sortedInsert, CurrencyAmount, TradeType, Token } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { Pool } from './pool'\nimport { Route } from './route'\nimport { amountWithPathCurrency } from '../utils/pathCurrency'\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input currency, either Ether or an ERC-20\n * @template TOutput The output currency, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  // must have same input and output currency for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce((total, cur) => total + cur.route.currencyPath.length, 0)\n      const bHops = b.swaps.reduce((total, cur) => total + cur.route.currencyPath.length, 0)\n      return aHops - bHops\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @template TInput The input currency, either Ether or an ERC-20\n * @template TOutput The output currency, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): Route<TInput, TOutput> {\n    invariant(this.swaps.length === 1, 'MULTIPLE_ROUTES')\n    return this.swaps[0].route\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @template TInput The input currency, either Ether or an ERC-20\n   * @template TOutput The output currency, either Ether or an ERC-20\n   * @param route The route of the exact in trade\n   * @param amountIn The amount being passed in\n   * @returns The exact in trade\n   */\n  public static async exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>> {\n    return Trade.fromRoute(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @template TInput The input currency, either Ether or an ERC-20\n   * @template TOutput The output currency, either Ether or an ERC-20\n   * @param route The route of the exact out trade\n   * @param amountOut The amount returned by the trade\n   * @returns The exact out trade\n   */\n  public static async exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>> {\n    return Trade.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input currency, either Ether or an ERC-20.\n   * @template TOutput The output currency, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    let inputAmount: CurrencyAmount<TInput>\n    let outputAmount: CurrencyAmount<TOutput>\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      // Account for trades that wrap/unwrap as a first step\n      let tokenAmount: CurrencyAmount<Currency> = amountWithPathCurrency(amount, route.pools[0])\n      for (let i = 0; i < route.pools.length; i++) {\n        const pool = route.pools[i]\n        ;[tokenAmount] = await pool.getOutputAmount(tokenAmount)\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(route.output, tokenAmount.numerator, tokenAmount.denominator)\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      // Account for trades that wrap/unwrap as a last step\n      let tokenAmount: CurrencyAmount<Currency> = amountWithPathCurrency(amount, route.pools[route.pools.length - 1])\n      for (let i = route.pools.length - 1; i >= 0; i--) {\n        const pool = route.pools[i]\n        ;[tokenAmount] = await pool.getInputAmount(tokenAmount)\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, tokenAmount.numerator, tokenAmount.denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n\n    return new Trade({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType,\n    })\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input currency, either Ether or an ERC-20.\n   * @template TOutput The output currency, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n      route: Route<TInput, TOutput>\n    }[],\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const swaps: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = await Promise.all(\n      routes.map(async ({ amount, route }) => {\n        const trade = await Trade.fromRoute(route, amount, tradeType)\n        return trade.swaps[0]\n      })\n    )\n\n    return new Trade({\n      routes: swaps,\n      tradeType,\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input currency, either Ether or an ERC-20\n   * @template TOutput The output currency, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route,\n        },\n      ],\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input currency, either Ether or an ERC-20\n   * @template TOutput The output currency, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType,\n  }: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency\n    const outputCurrency = routes[0].outputAmount.currency\n    invariant(\n      routes.every(({ route }) => inputCurrency.equals(route.input)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      routes.every(({ route }) => outputCurrency.equals(route.output)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    const numPools = routes.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolIDSet = new Set<string>()\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        poolIDSet.add(Pool.getPoolId(pool.currency0, pool.currency1, pool.fee, pool.tickSpacing, pool.hooks))\n      }\n    }\n\n    invariant(numPools === poolIDSet.size, 'POOLS_DUPLICATED')\n\n    this.swaps = routes\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input currency\n   * amount to an output currency, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.currency0.equals(amountIn.currency) && !pool.currency1.equals(amountIn.currency)) continue\n\n      let amountOut: CurrencyAmount<Token | Currency>\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output currency, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(currencyOut)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([...currentPools, pool], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this currency as long as we have not exceeded maxHops\n        await Trade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input currency\n   * to an output currency amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the desired currency amount out\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact out trade\n   */\n  public static async bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.currency0.equals(amountOut.currency) && !pool.currency1.equals(amountOut.currency)) continue\n\n      let amountIn: CurrencyAmount<Token | Currency>\n      try {\n        ;[amountIn] = await pool.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pool\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input currency, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(currencyIn)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([pool, ...currentPools], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this currency as long as we have not exceeded maxHops\n        await Trade.bestTradeExactOut(\n          poolsExcludingThisPool,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pool, ...currentPools],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Price, Currency } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q192 } from '../internalConstants'\nimport { TickMath, encodeSqrtRatioX96 } from '@uniswap/v3-sdk'\nimport { sortsBefore } from '../utils/sortsBefore'\n\n/**\n * This library is the almost the same as v3-sdk priceTickConversion except\n * that it accepts a Currency type instead of a Token type,\n * and thus uses some helper functions defined for the Currency type over the Token type.\n */\n\n/**\n * Returns a price object corresponding to the input tick and the base/quote token\n * Inputs must be tokens because the address order is used to interpret the price represented by the tick\n * @param baseToken the base token of the price\n * @param quoteToken the quote token of the price\n * @param tick the tick for which to return the price\n */\nexport function tickToPrice(baseCurrency: Currency, quoteCurrency: Currency, tick: number): Price<Currency, Currency> {\n  const sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick)\n\n  const ratioX192 = JSBI.multiply(sqrtRatioX96, sqrtRatioX96)\n\n  return sortsBefore(baseCurrency, quoteCurrency)\n    ? new Price(baseCurrency, quoteCurrency, Q192, ratioX192)\n    : new Price(baseCurrency, quoteCurrency, ratioX192, Q192)\n}\n\n/**\n * Returns the first tick for which the given price is greater than or equal to the tick price\n * @param price for which to return the closest tick that represents a price less than or equal to the input price,\n * i.e. the price of the returned tick is less than or equal to the input price\n */\nexport function priceToClosestTick(price: Price<Currency, Currency>): number {\n  const sorted = sortsBefore(price.baseCurrency, price.quoteCurrency)\n\n  const sqrtRatioX96 = sorted\n    ? encodeSqrtRatioX96(price.numerator, price.denominator)\n    : encodeSqrtRatioX96(price.denominator, price.numerator)\n\n  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96)\n  const nextTickPrice = tickToPrice(price.baseCurrency, price.quoteCurrency, tick + 1)\n  if (sorted) {\n    if (!price.lessThan(nextTickPrice)) {\n      tick++\n    }\n  } else {\n    if (!price.greaterThan(nextTickPrice)) {\n      tick++\n    }\n  }\n  return tick\n}\n","import { BigintIsh, Percent, Price, CurrencyAmount, Currency, MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './pool'\nimport { encodeSqrtRatioX96, maxLiquidityForAmounts, SqrtPriceMath, TickMath } from '@uniswap/v3-sdk'\nimport { ZERO } from '../internalConstants'\nimport { tickToPrice } from '../utils/priceTickConversions'\nimport { AllowanceTransferPermitBatch } from '../PositionManager'\n\ninterface PositionConstructorArgs {\n  pool: Pool\n  liquidity: BigintIsh\n  tickLower: number\n  tickUpper: number\n}\n\n/**\n * Represents a position on a Uniswap V4 Pool\n * @dev Similar to the V3 implementation\n * - using Currency instead of Token\n * - keep in mind that Pool and liquidity must be fetched from the pool manager\n */\nexport class Position {\n  public readonly pool: Pool\n  public readonly tickLower: number\n  public readonly tickUpper: number\n  public readonly liquidity: JSBI // TODO: needs to be fetched from pool manager\n\n  // cached resuts for the getters\n  private _token0Amount: CurrencyAmount<Currency> | null = null\n  private _token1Amount: CurrencyAmount<Currency> | null = null\n  private _mintAmounts: Readonly<{ amount0: JSBI; amount1: JSBI }> | null = null\n\n  /**\n   * Constructs a position for a given pool with the given liquidity\n   * @param pool For which pool the liquidity is assigned\n   * @param liquidity The amount of liquidity that is in the position\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   */\n  public constructor({ pool, liquidity, tickLower, tickUpper }: PositionConstructorArgs) {\n    invariant(tickLower < tickUpper, 'TICK_ORDER')\n    invariant(tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0, 'TICK_LOWER')\n    invariant(tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0, 'TICK_UPPER')\n\n    this.pool = pool\n    this.tickLower = tickLower\n    this.tickUpper = tickUpper\n    this.liquidity = JSBI.BigInt(liquidity)\n  }\n\n  /**\n   * Returns the price of token0 at the lower tick\n   */\n  public get token0PriceLower(): Price<Currency, Currency> {\n    return tickToPrice(this.pool.currency0, this.pool.currency1, this.tickLower)\n  }\n\n  /**\n   * Returns the price of token0 at the upper tick\n   */\n  public get token0PriceUpper(): Price<Currency, Currency> {\n    return tickToPrice(this.pool.currency0, this.pool.currency1, this.tickUpper)\n  }\n\n  /**\n   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount0(): CurrencyAmount<Currency> {\n    if (!this._token0Amount) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.currency0,\n          SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.currency0,\n          SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token0Amount = CurrencyAmount.fromRawAmount(this.pool.currency0, ZERO)\n      }\n    }\n    return this._token0Amount\n  }\n\n  /**\n   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount1(): CurrencyAmount<Currency> {\n    if (!this._token1Amount) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(this.pool.currency1, ZERO)\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.currency1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.currency1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      }\n    }\n    return this._token1Amount\n  }\n\n  /**\n   * Returns the lower and upper sqrt ratios if the price 'slips' up to slippage tolerance percentage\n   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert\n   * @returns The sqrt ratios after slippage\n   */\n  private ratiosAfterSlippage(slippageTolerance: Percent): { sqrtRatioX96Lower: JSBI; sqrtRatioX96Upper: JSBI } {\n    const priceLower = this.pool.token0Price.asFraction.multiply(new Percent(1).subtract(slippageTolerance))\n    const priceUpper = this.pool.token0Price.asFraction.multiply(slippageTolerance.add(1))\n    let sqrtRatioX96Lower = encodeSqrtRatioX96(priceLower.numerator, priceLower.denominator)\n    if (JSBI.lessThanOrEqual(sqrtRatioX96Lower, TickMath.MIN_SQRT_RATIO)) {\n      sqrtRatioX96Lower = JSBI.add(TickMath.MIN_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    let sqrtRatioX96Upper = encodeSqrtRatioX96(priceUpper.numerator, priceUpper.denominator)\n    if (JSBI.greaterThanOrEqual(sqrtRatioX96Upper, TickMath.MAX_SQRT_RATIO)) {\n      sqrtRatioX96Upper = JSBI.subtract(TickMath.MAX_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    return {\n      sqrtRatioX96Lower,\n      sqrtRatioX96Upper,\n    }\n  }\n\n  /**\n   * Returns the maximum amount of token0 and token1 that must be sent in order to safely mint the amount of liquidity held by the position\n   * with the given slippage tolerance\n   * @param slippageTolerance Tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   * @dev In v4, minting and increasing is protected by maximum amounts of token0 and token1.\n   */\n  public mintAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    // these represent the lowest and highest prices that the pool is allowed to \"slip\" to\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools from the lower bounded price and the upper bounded price\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      this.pool.tickSpacing,\n      this.pool.hooks,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      this.pool.tickSpacing,\n      this.pool.hooks,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // Note: Slippage derivation in v4 is different from v3.\n    // When creating a position (minting) or adding to a position (increasing) slippage is bounded by the MAXIMUM amount in in token0 and token1.\n    // The largest amount of token1 will happen when the price slips up, so we use the poolUpper to get amount1.\n    // The largest amount of token0 will happen when the price slips down, so we use the poolLower to get amount0.\n    // Ie...We want the larger amounts, which occurs at the upper price for amount1...\n    const { amount1 } = new Position({\n      pool: poolUpper,\n      liquidity: this.liquidity, // The precise liquidity calculated offchain\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).mintAmounts\n    // ...and the lower for amount0\n    const { amount0 } = new Position({\n      pool: poolLower,\n      liquidity: this.liquidity, // The precise liquidity calculated offchain\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).mintAmounts\n\n    return { amount0, amount1 }\n  }\n\n  /**\n   * Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the\n   * position with the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public burnAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.currency0,\n      this.pool.currency1,\n      this.pool.fee,\n      this.pool.tickSpacing,\n      this.pool.hooks,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.currency0,\n      this.pool.currency1,\n      this.pool.fee,\n      this.pool.tickSpacing,\n      this.pool.hooks,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const amount0 = new Position({\n      pool: poolUpper,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).amount0\n    // ...and the lower for amount1\n    const amount1 = new Position({\n      pool: poolLower,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).amount1\n\n    return { amount0: amount0.quotient, amount1: amount1.quotient }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at\n   * the current price for the pool\n   */\n  public get mintAmounts(): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    if (this._mintAmounts === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: ZERO,\n        }\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            true\n          ),\n        }\n      } else {\n        return {\n          amount0: ZERO,\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n        }\n      }\n    }\n    return this._mintAmounts\n  }\n\n  /**\n   * Returns the AllowanceTransferPermitBatch for adding liquidity to a position\n   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert\n   * @param spender The spender of the permit (should usually be the PositionManager)\n   * @param nonce A valid permit2 nonce\n   * @param deadline The deadline for the permit\n   */\n  public permitBatchData(\n    slippageTolerance: Percent,\n    spender: string,\n    nonce: BigintIsh,\n    deadline: BigintIsh\n  ): AllowanceTransferPermitBatch {\n    const { amount0, amount1 } = this.mintAmountsWithSlippage(slippageTolerance)\n    return {\n      details: [\n        {\n          token: this.pool.currency0.wrapped.address,\n          amount: amount0,\n          expiration: deadline,\n          nonce: nonce,\n        },\n        {\n          token: this.pool.currency1.wrapped.address,\n          amount: amount1,\n          expiration: deadline,\n          nonce: nonce,\n        },\n      ],\n      spender,\n      sigDeadline: deadline,\n    }\n  }\n\n  /**\n   * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n   * and the prices at the tick boundaries.\n   * @param pool The pool for which the position should be created\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   * @param amount0 token0 amountzw\n   * @param amount1 token1 amount\n   * @param useFullPrecision If false, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The amount of liquidity for the position\n   */\n  public static fromAmounts({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    amount1,\n    useFullPrecision,\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    amount1: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower)\n    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper)\n    return new Position({\n      pool,\n      tickLower,\n      tickUpper,\n      liquidity: maxLiquidityForAmounts(\n        pool.sqrtRatioX96,\n        sqrtRatioAX96,\n        sqrtRatioBX96,\n        amount0,\n        amount1,\n        useFullPrecision\n      ),\n    })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount0 The desired amount of token0\n   * @param useFullPrecision If true, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The position\n   */\n  public static fromAmount0({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    useFullPrecision,\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0, amount1: MaxUint256, useFullPrecision })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount1 The desired amount of token1\n   * @returns The position\n   */\n  public static fromAmount1({\n    pool,\n    tickLower,\n    tickUpper,\n    amount1,\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount1: BigintIsh\n  }) {\n    // this function always uses full precision,\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0: MaxUint256, amount1, useFullPrecision: true })\n  }\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { Route } from '../entities/route'\nimport { ADDRESS_ZERO } from '../internalConstants'\n\nexport type PathKey = {\n  intermediateCurrency: string // address\n  fee: number\n  tickSpacing: number\n  hooks: string // address\n  hookData: string // bytes\n}\n\nexport const encodeRouteToPath = (route: Route<Currency, Currency>, exactOutput?: boolean): PathKey[] => {\n  // create a deep copy of pools so that we don't tamper with pool array on route\n  let pools = route.pools.map((p) => p)\n  if (exactOutput) pools = pools.reverse()\n  let startingCurrency = exactOutput ? route.pathOutput : route.pathInput\n  let pathKeys: PathKey[] = []\n\n  for (let pool of pools) {\n    const nextCurrency = startingCurrency.equals(pool.currency0) ? pool.currency1 : pool.currency0\n\n    pathKeys.push({\n      intermediateCurrency: nextCurrency.isNative ? ADDRESS_ZERO : nextCurrency.address,\n      fee: pool.fee,\n      tickSpacing: pool.tickSpacing,\n      hooks: pool.hooks,\n      hookData: '0x',\n    })\n\n    startingCurrency = nextCurrency\n  }\n\n  return exactOutput ? pathKeys.reverse() : pathKeys\n}\n","import invariant from 'tiny-invariant'\nimport { defaultAbiCoder } from 'ethers/lib/utils'\nimport { BigNumber } from 'ethers'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Trade } from '../entities/trade'\nimport { ADDRESS_ZERO, EMPTY_BYTES } from '../internalConstants'\nimport { encodeRouteToPath } from './encodeRouteToPath'\n/**\n * Actions\n * @description Constants that define what action to perform\n * Not all actions are supported yet.\n * @enum {number}\n */\nexport enum Actions {\n  // pool actions\n  // liquidity actions\n  INCREASE_LIQUIDITY = 0x00,\n  DECREASE_LIQUIDITY = 0x01,\n  MINT_POSITION = 0x02,\n  BURN_POSITION = 0x03,\n\n  // for fee on transfer tokens\n  // INCREASE_LIQUIDITY_FROM_DELTAS = 0x04,\n  // MINT_POSITION_FROM_DELTAS = 0x05,\n\n  // swapping\n  SWAP_EXACT_IN_SINGLE = 0x06,\n  SWAP_EXACT_IN = 0x07,\n  SWAP_EXACT_OUT_SINGLE = 0x08,\n  SWAP_EXACT_OUT = 0x09,\n\n  // closing deltas on the pool manager\n  // settling\n  SETTLE = 0x0b,\n  SETTLE_ALL = 0x0c,\n  SETTLE_PAIR = 0x0d,\n  // taking\n  TAKE = 0x0e,\n  TAKE_ALL = 0x0f,\n  TAKE_PORTION = 0x10,\n  TAKE_PAIR = 0x11,\n\n  CLOSE_CURRENCY = 0x12,\n  // CLEAR_OR_TAKE = 0x13,\n  SWEEP = 0x14,\n\n  // for wrapping/unwrapping native\n  // WRAP = 0x15,\n  UNWRAP = 0x16,\n}\n\nexport enum Subparser {\n  V4SwapExactInSingle,\n  V4SwapExactIn,\n  V4SwapExactOutSingle,\n  V4SwapExactOut,\n  PoolKey,\n}\n\nexport type ParamType = {\n  readonly name: string\n  readonly type: string\n  readonly subparser?: Subparser\n}\n\nconst POOL_KEY_STRUCT = '(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)'\n\nconst PATH_KEY_STRUCT = '(address intermediateCurrency,uint256 fee,int24 tickSpacing,address hooks,bytes hookData)'\n\nconst SWAP_EXACT_IN_SINGLE_STRUCT =\n  '(' + POOL_KEY_STRUCT + ' poolKey,bool zeroForOne,uint128 amountIn,uint128 amountOutMinimum,bytes hookData)'\n\nconst SWAP_EXACT_IN_STRUCT =\n  '(address currencyIn,' + PATH_KEY_STRUCT + '[] path,uint128 amountIn,uint128 amountOutMinimum)'\n\nconst SWAP_EXACT_OUT_SINGLE_STRUCT =\n  '(' + POOL_KEY_STRUCT + ' poolKey,bool zeroForOne,uint128 amountOut,uint128 amountInMaximum,bytes hookData)'\n\nconst SWAP_EXACT_OUT_STRUCT =\n  '(address currencyOut,' + PATH_KEY_STRUCT + '[] path,uint128 amountOut,uint128 amountInMaximum)'\n\nexport const V4_BASE_ACTIONS_ABI_DEFINITION: { [key in Actions]: readonly ParamType[] } = {\n  // Liquidity commands\n  [Actions.INCREASE_LIQUIDITY]: [\n    { name: 'tokenId', type: 'uint256' },\n    { name: 'liquidity', type: 'uint256' },\n    { name: 'amount0Max', type: 'uint128' },\n    { name: 'amount1Max', type: 'uint128' },\n    { name: 'hookData', type: 'bytes' },\n  ],\n  [Actions.DECREASE_LIQUIDITY]: [\n    { name: 'tokenId', type: 'uint256' },\n    { name: 'liquidity', type: 'uint256' },\n    { name: 'amount0Min', type: 'uint128' },\n    { name: 'amount1Min', type: 'uint128' },\n    { name: 'hookData', type: 'bytes' },\n  ],\n  [Actions.MINT_POSITION]: [\n    { name: 'poolKey', type: POOL_KEY_STRUCT, subparser: Subparser.PoolKey },\n    { name: 'tickLower', type: 'int24' },\n    { name: 'tickUpper', type: 'int24' },\n    { name: 'liquidity', type: 'uint256' },\n    { name: 'amount0Max', type: 'uint128' },\n    { name: 'amount1Max', type: 'uint128' },\n    { name: 'owner', type: 'address' },\n    { name: 'hookData', type: 'bytes' },\n  ],\n  [Actions.BURN_POSITION]: [\n    { name: 'tokenId', type: 'uint256' },\n    { name: 'amount0Min', type: 'uint128' },\n    { name: 'amount1Min', type: 'uint128' },\n    { name: 'hookData', type: 'bytes' },\n  ],\n\n  // Swapping commands\n  [Actions.SWAP_EXACT_IN_SINGLE]: [\n    { name: 'swap', type: SWAP_EXACT_IN_SINGLE_STRUCT, subparser: Subparser.V4SwapExactInSingle },\n  ],\n  [Actions.SWAP_EXACT_IN]: [{ name: 'swap', type: SWAP_EXACT_IN_STRUCT, subparser: Subparser.V4SwapExactIn }],\n  [Actions.SWAP_EXACT_OUT_SINGLE]: [\n    { name: 'swap', type: SWAP_EXACT_OUT_SINGLE_STRUCT, subparser: Subparser.V4SwapExactOutSingle },\n  ],\n  [Actions.SWAP_EXACT_OUT]: [{ name: 'swap', type: SWAP_EXACT_OUT_STRUCT, subparser: Subparser.V4SwapExactOut }],\n\n  // Payments commands\n  [Actions.SETTLE]: [\n    { name: 'currency', type: 'address' },\n    { name: 'amount', type: 'uint256' },\n    { name: 'payerIsUser', type: 'bool' },\n  ],\n  [Actions.SETTLE_ALL]: [\n    { name: 'currency', type: 'address' },\n    { name: 'maxAmount', type: 'uint256' },\n  ],\n  [Actions.SETTLE_PAIR]: [\n    { name: 'currency0', type: 'address' },\n    { name: 'currency1', type: 'address' },\n  ],\n  [Actions.TAKE]: [\n    { name: 'currency', type: 'address' },\n    { name: 'recipient', type: 'address' },\n    { name: 'amount', type: 'uint256' },\n  ],\n  [Actions.TAKE_ALL]: [\n    { name: 'currency', type: 'address' },\n    { name: 'minAmount', type: 'uint256' },\n  ],\n  [Actions.TAKE_PORTION]: [\n    { name: 'currency', type: 'address' },\n    { name: 'recipient', type: 'address' },\n    { name: 'bips', type: 'uint256' },\n  ],\n  [Actions.TAKE_PAIR]: [\n    { name: 'currency0', type: 'address' },\n    { name: 'currency1', type: 'address' },\n    { name: 'recipient', type: 'address' },\n  ],\n  [Actions.CLOSE_CURRENCY]: [{ name: 'currency', type: 'address' }],\n  [Actions.SWEEP]: [\n    { name: 'currency', type: 'address' },\n    { name: 'recipient', type: 'address' },\n  ],\n  [Actions.UNWRAP]: [{ name: 'amount', type: 'uint256' }],\n}\n\nconst FULL_DELTA_AMOUNT = 0\n\nexport class V4Planner {\n  actions: string\n  params: string[]\n\n  constructor() {\n    this.actions = EMPTY_BYTES\n    this.params = []\n  }\n\n  addAction(type: Actions, parameters: any[]): V4Planner {\n    let command = createAction(type, parameters)\n    this.params.push(command.encodedInput)\n    this.actions = this.actions.concat(command.action.toString(16).padStart(2, '0'))\n    return this\n  }\n\n  addTrade(trade: Trade<Currency, Currency, TradeType>, slippageTolerance?: Percent): V4Planner {\n    const exactOutput = trade.tradeType === TradeType.EXACT_OUTPUT\n\n    // exactInput we sometimes perform aggregated slippage checks, but not with exactOutput\n    if (exactOutput) invariant(!!slippageTolerance, 'ExactOut requires slippageTolerance')\n    invariant(trade.swaps.length === 1, 'Only accepts Trades with 1 swap (must break swaps into individual trades)')\n\n    const actionType = exactOutput ? Actions.SWAP_EXACT_OUT : Actions.SWAP_EXACT_IN\n\n    const currencyIn = currencyAddress(trade.route.pathInput)\n    const currencyOut = currencyAddress(trade.route.pathOutput)\n\n    this.addAction(actionType, [\n      exactOutput\n        ? {\n            currencyOut,\n            path: encodeRouteToPath(trade.route, exactOutput),\n            amountInMaximum: trade.maximumAmountIn(slippageTolerance ?? new Percent(0)).quotient.toString(),\n            amountOut: trade.outputAmount.quotient.toString(),\n          }\n        : {\n            currencyIn,\n            path: encodeRouteToPath(trade.route, exactOutput),\n            amountIn: trade.inputAmount.quotient.toString(),\n            amountOutMinimum: slippageTolerance ? trade.minimumAmountOut(slippageTolerance).quotient.toString() : 0,\n          },\n    ])\n    return this\n  }\n\n  addSettle(currency: Currency, payerIsUser: boolean, amount?: BigNumber): V4Planner {\n    this.addAction(Actions.SETTLE, [currencyAddress(currency), amount ?? FULL_DELTA_AMOUNT, payerIsUser])\n    return this\n  }\n\n  addTake(currency: Currency, recipient: string, amount?: BigNumber): V4Planner {\n    const takeAmount = amount ?? FULL_DELTA_AMOUNT\n    this.addAction(Actions.TAKE, [currencyAddress(currency), recipient, takeAmount])\n    return this\n  }\n\n  addUnwrap(amount: BigNumber): V4Planner {\n    this.addAction(Actions.UNWRAP, [amount])\n    return this\n  }\n\n  finalize(): string {\n    return defaultAbiCoder.encode(['bytes', 'bytes[]'], [this.actions, this.params])\n  }\n}\n\nfunction currencyAddress(currency: Currency): string {\n  return currency.isNative ? ADDRESS_ZERO : currency.wrapped.address\n}\n\ntype RouterAction = {\n  action: Actions\n  encodedInput: string\n}\n\nfunction createAction(action: Actions, parameters: any[]): RouterAction {\n  const encodedInput = defaultAbiCoder.encode(\n    V4_BASE_ACTIONS_ABI_DEFINITION[action].map((v) => v.type),\n    parameters\n  )\n  return { action, encodedInput }\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { ADDRESS_ZERO } from '../internalConstants'\n\n// Uniswap v4 supports native pools. Those currencies are represented by the zero address.\n// TODO: Figure out if this is how we should be handling weird edge case tokens like CELO/Polygon/etc..\n// Does interface treat those like ERC20 tokens or NATIVE tokens?\nexport function toAddress(currency: Currency): string {\n  if (currency.isNative) return ADDRESS_ZERO\n  else return currency.wrapped.address\n}\n","import { Actions, V4Planner } from './v4Planner'\nimport { Pool } from '../entities'\nimport { BigintIsh, Currency } from '@uniswap/sdk-core'\nimport { toAddress } from '../utils/currencyMap'\nimport { EMPTY_BYTES } from '../internalConstants'\n\n// A wrapper around V4Planner to help handle PositionManager actions\nexport class V4PositionPlanner extends V4Planner {\n  // MINT_POSITION\n  addMint(\n    pool: Pool,\n    tickLower: number,\n    tickUpper: number,\n    liquidity: BigintIsh,\n    amount0Max: BigintIsh,\n    amount1Max: BigintIsh,\n    owner: string,\n    hookData: string = EMPTY_BYTES\n  ): void {\n    const inputs = [\n      Pool.getPoolKey(pool.currency0, pool.currency1, pool.fee, pool.tickSpacing, pool.hooks),\n      tickLower,\n      tickUpper,\n      liquidity.toString(),\n      amount0Max.toString(),\n      amount1Max.toString(),\n      owner,\n      hookData,\n    ]\n    this.addAction(Actions.MINT_POSITION, inputs)\n  }\n\n  // INCREASE_LIQUIDITY\n  addIncrease(\n    tokenId: BigintIsh,\n    liquidity: BigintIsh,\n    amount0Max: BigintIsh,\n    amount1Max: BigintIsh,\n    hookData: string = EMPTY_BYTES\n  ): void {\n    const inputs = [tokenId.toString(), liquidity.toString(), amount0Max.toString(), amount1Max.toString(), hookData]\n    this.addAction(Actions.INCREASE_LIQUIDITY, inputs)\n  }\n\n  // DECREASE_LIQUIDITY\n  addDecrease(\n    tokenId: BigintIsh,\n    liquidity: BigintIsh,\n    amount0Min: BigintIsh,\n    amount1Min: BigintIsh,\n    hookData: string = EMPTY_BYTES\n  ): void {\n    const inputs = [tokenId.toString(), liquidity.toString(), amount0Min.toString(), amount1Min.toString(), hookData]\n    this.addAction(Actions.DECREASE_LIQUIDITY, inputs)\n  }\n\n  // BURN_POSITION\n  addBurn(tokenId: BigintIsh, amount0Min: BigintIsh, amount1Min: BigintIsh, hookData: string = EMPTY_BYTES): void {\n    const inputs = [tokenId.toString(), amount0Min.toString(), amount1Min.toString(), hookData]\n    this.addAction(Actions.BURN_POSITION, inputs)\n  }\n\n  // SETTLE_PAIR\n  addSettlePair(currency0: Currency, currency1: Currency): void {\n    const inputs = [toAddress(currency0), toAddress(currency1)]\n    this.addAction(Actions.SETTLE_PAIR, inputs)\n  }\n\n  // TAKE_PAIR\n  addTakePair(currency0: Currency, currency1: Currency, recipient: string): void {\n    const inputs = [toAddress(currency0), toAddress(currency1), recipient]\n    this.addAction(Actions.TAKE_PAIR, inputs)\n  }\n\n  // SWEEP\n  addSweep(currency: Currency, to: string): void {\n    const inputs = [toAddress(currency), to]\n    this.addAction(Actions.SWEEP, inputs)\n  }\n}\n","import { BigintIsh } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * Generated method parameters for executing a call.\n */\nexport interface MethodParameters {\n  /**\n   * The hex encoded calldata to perform the given operation\n   */\n  calldata: string\n  /**\n   * The amount of ether (wei) to send in hex.\n   */\n  value: string\n}\n\n/**\n * Converts a big int to a hex string\n * @param bigintIsh\n * @returns The hex encoded calldata\n */\nexport function toHex(bigintIsh: BigintIsh) {\n  const bigInt = JSBI.BigInt(bigintIsh)\n  let hex = bigInt.toString(16)\n  if (hex.length % 2 !== 0) {\n    hex = `0${hex}`\n  }\n  return `0x${hex}`\n}\n","import { ethers } from 'ethers'\nimport { PoolKey } from '../entities/pool'\nimport { PathKey } from './encodeRouteToPath'\nimport { Actions, Subparser, V4_BASE_ACTIONS_ABI_DEFINITION } from './v4Planner'\n\nexport type Param = {\n  readonly name: string\n  readonly value: any\n}\n\nexport type V4RouterAction = {\n  readonly actionName: string\n  readonly actionType: Actions\n  readonly params: readonly Param[]\n}\n\nexport type V4RouterCall = {\n  readonly actions: readonly V4RouterAction[]\n}\n\nexport type SwapExactInSingle = {\n  readonly poolKey: PoolKey\n  readonly zeroForOne: boolean\n  readonly amountIn: string\n  readonly amountOutMinimum: string\n  readonly hookData: string\n}\n\nexport type SwapExactIn = {\n  readonly currencyIn: string\n  readonly path: readonly PathKey[]\n  readonly amountIn: string\n  readonly amountOutMinimum: string\n}\n\nexport type SwapExactOutSingle = {\n  readonly poolKey: PoolKey\n  readonly zeroForOne: boolean\n  readonly amountOut: string\n  readonly amountInMaximum: string\n  readonly hookData: string\n}\n\nexport type SwapExactOut = {\n  readonly currencyOut: string\n  readonly path: readonly PathKey[]\n  readonly amountOut: string\n  readonly amountInMaximum: string\n}\n\n// Parses V4Router actions\nexport abstract class V4BaseActionsParser {\n  public static parseCalldata(calldata: string): V4RouterCall {\n    const [actions, inputs] = ethers.utils.defaultAbiCoder.decode(['bytes', 'bytes[]'], calldata)\n\n    const actionTypes = V4BaseActionsParser.getActions(actions)\n\n    return {\n      actions: actionTypes.map((actionType: Actions, i: number) => {\n        const abiDef = V4_BASE_ACTIONS_ABI_DEFINITION[actionType]\n        const rawParams = ethers.utils.defaultAbiCoder.decode(\n          abiDef.map((command) => command.type),\n          inputs[i]\n        )\n        const params = rawParams.map((param, j) => {\n          switch (abiDef[j].subparser) {\n            case Subparser.V4SwapExactInSingle:\n              return {\n                name: abiDef[j].name,\n                value: parseV4ExactInSingle(param),\n              }\n            case Subparser.V4SwapExactIn:\n              return {\n                name: abiDef[j].name,\n                value: parseV4ExactIn(param),\n              }\n            case Subparser.V4SwapExactOutSingle:\n              return {\n                name: abiDef[j].name,\n                value: parseV4ExactOutSingle(param),\n              }\n            case Subparser.V4SwapExactOut:\n              return {\n                name: abiDef[j].name,\n                value: parseV4ExactOut(param),\n              }\n            case Subparser.PoolKey:\n              return {\n                name: abiDef[j].name,\n                value: parsePoolKey(param),\n              }\n            default:\n              return {\n                name: abiDef[j].name,\n                value: param,\n              }\n          }\n        })\n\n        return {\n          actionName: Actions[actionType],\n          actionType,\n          params,\n        }\n      }),\n    }\n  }\n\n  // parse command types from bytes string\n  private static getActions(actions: string): Actions[] {\n    const actionTypes = []\n\n    for (let i = 2; i < actions.length; i += 2) {\n      const byte = actions.substring(i, i + 2)\n      actionTypes.push(parseInt(byte, 16) as Actions)\n    }\n\n    return actionTypes\n  }\n}\n\nfunction parsePoolKey(data: string): PoolKey {\n  const [currency0, currency1, fee, tickSpacing, hooks] = data\n\n  return {\n    currency0,\n    currency1,\n    fee: parseInt(fee),\n    tickSpacing: parseInt(tickSpacing),\n    hooks,\n  }\n}\n\nfunction parsePathKey(data: string): PathKey {\n  const [intermediateCurrency, fee, tickSpacing, hooks, hookData] = data\n\n  return {\n    intermediateCurrency,\n    fee: parseInt(fee),\n    tickSpacing: parseInt(tickSpacing),\n    hooks,\n    hookData,\n  }\n}\n\nfunction parseV4ExactInSingle(data: any[]): SwapExactInSingle {\n  const [poolKey, zeroForOne, amountIn, amountOutMinimum, hookData] = data\n  const [currency0, currency1, fee, tickSpacing, hooks] = poolKey\n  return {\n    poolKey: {\n      currency0,\n      currency1,\n      fee,\n      tickSpacing,\n      hooks,\n    },\n    zeroForOne,\n    amountIn,\n    amountOutMinimum,\n    hookData,\n  }\n}\n\nfunction parseV4ExactIn(data: any[]): SwapExactIn {\n  const [currencyIn, path, amountIn, amountOutMinimum] = data\n  const paths: readonly PathKey[] = path.map((pathKey: string) => parsePathKey(pathKey))\n\n  return {\n    path: paths,\n    currencyIn,\n    amountIn,\n    amountOutMinimum,\n  }\n}\n\nfunction parseV4ExactOutSingle(data: any[]): SwapExactOutSingle {\n  const [poolKey, zeroForOne, amountOut, amountInMaximum, hookData] = data\n  const { currency0, currency1, fee, tickSpacing, hooks } = poolKey\n\n  return {\n    poolKey: {\n      currency0,\n      currency1,\n      fee,\n      tickSpacing,\n      hooks,\n    },\n    zeroForOne,\n    amountOut,\n    amountInMaximum,\n    hookData,\n  }\n}\n\nfunction parseV4ExactOut(data: any[]): SwapExactOut {\n  const [currencyOut, path, amountOut, amountInMaximum] = data\n  const paths: readonly PathKey[] = path.map((pathKey: string) => parsePathKey(pathKey))\n\n  return {\n    path: paths,\n    currencyOut,\n    amountOut,\n    amountInMaximum,\n  }\n}\n","// Shared Action Constants used in the v4 Router and v4 position manager\nexport const MSG_SENDER = '0x0000000000000000000000000000000000000001'\n","import { Interface } from '@ethersproject/abi'\nimport IMulticall from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IMulticall.sol/IMulticall.json'\n\nexport abstract class Multicall {\n  public static INTERFACE: Interface = new Interface(IMulticall.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldataList: string | string[]): string {\n    if (!Array.isArray(calldataList)) {\n      calldataList = [calldataList]\n    }\n\n    return calldataList.length === 1\n      ? calldataList[0]\n      : Multicall.INTERFACE.encodeFunctionData('multicall', [calldataList])\n  }\n\n  public static decodeMulticall(encodedCalldata: string): string[] {\n    return Multicall.INTERFACE.decodeFunctionData('multicall', encodedCalldata)[0]\n  }\n}\n","// TODO: import this from npm\nexport const positionManagerAbi = [\n  {\n    type: 'constructor',\n    inputs: [\n      {\n        name: '_poolManager',\n        type: 'address',\n        internalType: 'contract IPoolManager',\n      },\n      {\n        name: '_permit2',\n        type: 'address',\n        internalType: 'contract IAllowanceTransfer',\n      },\n      {\n        name: '_unsubscribeGasLimit',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: '_tokenDescriptor',\n        type: 'address',\n        internalType: 'contract IPositionDescriptor',\n      },\n      {\n        name: '_weth9',\n        type: 'address',\n        internalType: 'contract IWETH9',\n      },\n    ],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'receive',\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'DOMAIN_SEPARATOR',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'WETH9',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'address',\n        internalType: 'contract IWETH9',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'approve',\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'id',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'balanceOf',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getApproved',\n    inputs: [\n      {\n        name: '',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getPoolAndPositionInfo',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: 'poolKey',\n        type: 'tuple',\n        internalType: 'struct PoolKey',\n        components: [\n          {\n            name: 'currency0',\n            type: 'address',\n            internalType: 'Currency',\n          },\n          {\n            name: 'currency1',\n            type: 'address',\n            internalType: 'Currency',\n          },\n          {\n            name: 'fee',\n            type: 'uint24',\n            internalType: 'uint24',\n          },\n          {\n            name: 'tickSpacing',\n            type: 'int24',\n            internalType: 'int24',\n          },\n          {\n            name: 'hooks',\n            type: 'address',\n            internalType: 'contract IHooks',\n          },\n        ],\n      },\n      {\n        name: 'info',\n        type: 'uint256',\n        internalType: 'PositionInfo',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'getPositionLiquidity',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: 'liquidity',\n        type: 'uint128',\n        internalType: 'uint128',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'initializePool',\n    inputs: [\n      {\n        name: 'key',\n        type: 'tuple',\n        internalType: 'struct PoolKey',\n        components: [\n          {\n            name: 'currency0',\n            type: 'address',\n            internalType: 'Currency',\n          },\n          {\n            name: 'currency1',\n            type: 'address',\n            internalType: 'Currency',\n          },\n          {\n            name: 'fee',\n            type: 'uint24',\n            internalType: 'uint24',\n          },\n          {\n            name: 'tickSpacing',\n            type: 'int24',\n            internalType: 'int24',\n          },\n          {\n            name: 'hooks',\n            type: 'address',\n            internalType: 'contract IHooks',\n          },\n        ],\n      },\n      {\n        name: 'sqrtPriceX96',\n        type: 'uint160',\n        internalType: 'uint160',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'int24',\n        internalType: 'int24',\n      },\n    ],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'isApprovedForAll',\n    inputs: [\n      {\n        name: '',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: '',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n        internalType: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'modifyLiquidities',\n    inputs: [\n      {\n        name: 'unlockData',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n      {\n        name: 'deadline',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'modifyLiquiditiesWithoutUnlock',\n    inputs: [\n      {\n        name: 'actions',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n      {\n        name: 'params',\n        type: 'bytes[]',\n        internalType: 'bytes[]',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'msgSender',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'multicall',\n    inputs: [\n      {\n        name: 'data',\n        type: 'bytes[]',\n        internalType: 'bytes[]',\n      },\n    ],\n    outputs: [\n      {\n        name: 'results',\n        type: 'bytes[]',\n        internalType: 'bytes[]',\n      },\n    ],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'name',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n        internalType: 'string',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'nextTokenId',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'nonces',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'word',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: 'bitmap',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'ownerOf',\n    inputs: [\n      {\n        name: 'id',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'permit',\n    inputs: [\n      {\n        name: 'spender',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'deadline',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'nonce',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'signature',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'permit',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'permitSingle',\n        type: 'tuple',\n        internalType: 'struct IAllowanceTransfer.PermitSingle',\n        components: [\n          {\n            name: 'details',\n            type: 'tuple',\n            internalType: 'struct IAllowanceTransfer.PermitDetails',\n            components: [\n              {\n                name: 'token',\n                type: 'address',\n                internalType: 'address',\n              },\n              {\n                name: 'amount',\n                type: 'uint160',\n                internalType: 'uint160',\n              },\n              {\n                name: 'expiration',\n                type: 'uint48',\n                internalType: 'uint48',\n              },\n              {\n                name: 'nonce',\n                type: 'uint48',\n                internalType: 'uint48',\n              },\n            ],\n          },\n          {\n            name: 'spender',\n            type: 'address',\n            internalType: 'address',\n          },\n          {\n            name: 'sigDeadline',\n            type: 'uint256',\n            internalType: 'uint256',\n          },\n        ],\n      },\n      {\n        name: 'signature',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    outputs: [\n      {\n        name: 'err',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'permit2',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'address',\n        internalType: 'contract IAllowanceTransfer',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'permitBatch',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: '_permitBatch',\n        type: 'tuple',\n        internalType: 'struct IAllowanceTransfer.PermitBatch',\n        components: [\n          {\n            name: 'details',\n            type: 'tuple[]',\n            internalType: 'struct IAllowanceTransfer.PermitDetails[]',\n            components: [\n              {\n                name: 'token',\n                type: 'address',\n                internalType: 'address',\n              },\n              {\n                name: 'amount',\n                type: 'uint160',\n                internalType: 'uint160',\n              },\n              {\n                name: 'expiration',\n                type: 'uint48',\n                internalType: 'uint48',\n              },\n              {\n                name: 'nonce',\n                type: 'uint48',\n                internalType: 'uint48',\n              },\n            ],\n          },\n          {\n            name: 'spender',\n            type: 'address',\n            internalType: 'address',\n          },\n          {\n            name: 'sigDeadline',\n            type: 'uint256',\n            internalType: 'uint256',\n          },\n        ],\n      },\n      {\n        name: 'signature',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    outputs: [\n      {\n        name: 'err',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'permitForAll',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'operator',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'approved',\n        type: 'bool',\n        internalType: 'bool',\n      },\n      {\n        name: 'deadline',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'nonce',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'signature',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'poolKeys',\n    inputs: [\n      {\n        name: 'poolId',\n        type: 'bytes25',\n        internalType: 'bytes25',\n      },\n    ],\n    outputs: [\n      {\n        name: 'currency0',\n        type: 'address',\n        internalType: 'Currency',\n      },\n      {\n        name: 'currency1',\n        type: 'address',\n        internalType: 'Currency',\n      },\n      {\n        name: 'fee',\n        type: 'uint24',\n        internalType: 'uint24',\n      },\n      {\n        name: 'tickSpacing',\n        type: 'int24',\n        internalType: 'int24',\n      },\n      {\n        name: 'hooks',\n        type: 'address',\n        internalType: 'contract IHooks',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'poolManager',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'address',\n        internalType: 'contract IPoolManager',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'positionInfo',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: 'info',\n        type: 'uint256',\n        internalType: 'PositionInfo',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'revokeNonce',\n    inputs: [\n      {\n        name: 'nonce',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'safeTransferFrom',\n    inputs: [\n      {\n        name: 'from',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'to',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'id',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'safeTransferFrom',\n    inputs: [\n      {\n        name: 'from',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'to',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'id',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'data',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'setApprovalForAll',\n    inputs: [\n      {\n        name: 'operator',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'approved',\n        type: 'bool',\n        internalType: 'bool',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'subscribe',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'newSubscriber',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'data',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'subscriber',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: 'subscriber',\n        type: 'address',\n        internalType: 'contract ISubscriber',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'supportsInterface',\n    inputs: [\n      {\n        name: 'interfaceId',\n        type: 'bytes4',\n        internalType: 'bytes4',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'bool',\n        internalType: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'symbol',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n        internalType: 'string',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'tokenDescriptor',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'address',\n        internalType: 'contract IPositionDescriptor',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'tokenURI',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'string',\n        internalType: 'string',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'function',\n    name: 'transferFrom',\n    inputs: [\n      {\n        name: 'from',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'to',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'id',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'unlockCallback',\n    inputs: [\n      {\n        name: 'data',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    outputs: [\n      {\n        name: '',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    stateMutability: 'nonpayable',\n  },\n  {\n    type: 'function',\n    name: 'unsubscribe',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'unsubscribeGasLimit',\n    inputs: [],\n    outputs: [\n      {\n        name: '',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'event',\n    name: 'Approval',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'spender',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'id',\n        type: 'uint256',\n        indexed: true,\n        internalType: 'uint256',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'ApprovalForAll',\n    inputs: [\n      {\n        name: 'owner',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'operator',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'approved',\n        type: 'bool',\n        indexed: false,\n        internalType: 'bool',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Subscription',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        indexed: true,\n        internalType: 'uint256',\n      },\n      {\n        name: 'subscriber',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Transfer',\n    inputs: [\n      {\n        name: 'from',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'to',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n      {\n        name: 'id',\n        type: 'uint256',\n        indexed: true,\n        internalType: 'uint256',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'event',\n    name: 'Unsubscription',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        indexed: true,\n        internalType: 'uint256',\n      },\n      {\n        name: 'subscriber',\n        type: 'address',\n        indexed: true,\n        internalType: 'address',\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: 'error',\n    name: 'AlreadySubscribed',\n    inputs: [\n      {\n        name: 'tokenId',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n      {\n        name: 'subscriber',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'BurnNotificationReverted',\n    inputs: [\n      {\n        name: 'subscriber',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'reason',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ContractLocked',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'DeadlinePassed',\n    inputs: [\n      {\n        name: 'deadline',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'DeltaNotNegative',\n    inputs: [\n      {\n        name: 'currency',\n        type: 'address',\n        internalType: 'Currency',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'DeltaNotPositive',\n    inputs: [\n      {\n        name: 'currency',\n        type: 'address',\n        internalType: 'Currency',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'GasLimitTooLow',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'InputLengthMismatch',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'InsufficientBalance',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'InvalidContractSignature',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'InvalidEthSender',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'InvalidSignature',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'InvalidSignatureLength',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'InvalidSigner',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'MaximumAmountExceeded',\n    inputs: [\n      {\n        name: 'maximumAmount',\n        type: 'uint128',\n        internalType: 'uint128',\n      },\n      {\n        name: 'amountRequested',\n        type: 'uint128',\n        internalType: 'uint128',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'MinimumAmountInsufficient',\n    inputs: [\n      {\n        name: 'minimumAmount',\n        type: 'uint128',\n        internalType: 'uint128',\n      },\n      {\n        name: 'amountReceived',\n        type: 'uint128',\n        internalType: 'uint128',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'ModifyLiquidityNotificationReverted',\n    inputs: [\n      {\n        name: 'subscriber',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'reason',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'NoCodeSubscriber',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'NoSelfPermit',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'NonceAlreadyUsed',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'NotApproved',\n    inputs: [\n      {\n        name: 'caller',\n        type: 'address',\n        internalType: 'address',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'NotPoolManager',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'NotSubscribed',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'PoolManagerMustBeLocked',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'SignatureDeadlineExpired',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'SubscriptionReverted',\n    inputs: [\n      {\n        name: 'subscriber',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'reason',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'TransferNotificationReverted',\n    inputs: [\n      {\n        name: 'subscriber',\n        type: 'address',\n        internalType: 'address',\n      },\n      {\n        name: 'reason',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n  },\n  {\n    type: 'error',\n    name: 'Unauthorized',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'UnsupportedAction',\n    inputs: [\n      {\n        name: 'action',\n        type: 'uint256',\n        internalType: 'uint256',\n      },\n    ],\n  },\n]\n","import { BigintIsh, Percent, validateAndParseAddress, NativeCurrency } from '@uniswap/sdk-core'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport JSBI from 'jsbi'\nimport { Position } from './entities/position'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { MSG_SENDER } from './actionConstants'\nimport { Interface } from '@ethersproject/abi'\nimport { PoolKey } from './entities'\nimport { Multicall } from './multicall'\nimport invariant from 'tiny-invariant'\nimport {\n  EMPTY_BYTES,\n  CANNOT_BURN,\n  NATIVE_NOT_SET,\n  NO_SQRT_PRICE,\n  ONE,\n  OPEN_DELTA,\n  PositionFunctions,\n  ZERO,\n  ZERO_LIQUIDITY,\n} from './internalConstants'\nimport { V4PositionPlanner } from './utils'\nimport { positionManagerAbi } from './utils/positionManagerAbi'\n\nexport interface CommonOptions {\n  /**\n   * How much the pool price is allowed to move from the specified action.\n   */\n  slippageTolerance: Percent\n  /**\n   * Optional data to pass to hooks\n   */\n  hookData?: string\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n}\n\nexport interface ModifyPositionSpecificOptions {\n  /**\n   * Indicates the ID of the position to increase liquidity for.\n   */\n  tokenId: BigintIsh\n}\n\nexport interface MintSpecificOptions {\n  /**\n   * The account that should receive the minted NFT.\n   */\n  recipient: string\n\n  /**\n   * Creates pool if not initialized before mint.\n   */\n  createPool?: boolean\n\n  /**\n   * Initial price to set on the pool if creating\n   */\n  sqrtPriceX96?: BigintIsh\n\n  /**\n   * Whether the mint is part of a migration from V3 to V4.\n   */\n  migrate?: boolean\n}\n\n/**\n * Options for producing the calldata to add liquidity.\n */\nexport interface CommonAddLiquidityOptions {\n  /**\n   * Whether to spend ether. If true, one of the currencies must be the NATIVE currency.\n   */\n  useNative?: NativeCurrency\n\n  /**\n   * The optional permit2 batch permit parameters for spending token0 and token1\n   */\n  batchPermit?: BatchPermitOptions\n}\n\n/**\n * Options for producing the calldata to exit a position.\n */\nexport interface RemoveLiquiditySpecificOptions {\n  /**\n   * The percentage of position liquidity to exit.\n   */\n  liquidityPercentage: Percent\n\n  /**\n   * Whether the NFT should be burned if the entire position is being exited, by default false.\n   */\n  burnToken?: boolean\n\n  /**\n   * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\n   */\n  permit?: NFTPermitOptions\n}\n\nexport interface CollectSpecificOptions {\n  /**\n   * Indicates the ID of the position to collect for.\n   */\n  tokenId: BigintIsh\n\n  /**\n   * The account that should receive the tokens.\n   */\n  recipient: string\n}\n\nexport interface TransferOptions {\n  /**\n   * The account sending the NFT.\n   */\n  sender: string\n\n  /**\n   * The account that should receive the NFT.\n   */\n  recipient: string\n\n  /**\n   * The id of the token being sent.\n   */\n  tokenId: BigintIsh\n}\n\nexport interface PermitDetails {\n  token: string\n  amount: BigintIsh\n  expiration: BigintIsh\n  nonce: BigintIsh\n}\n\nexport interface AllowanceTransferPermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigintIsh\n}\n\nexport interface AllowanceTransferPermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigintIsh\n}\n\nexport interface BatchPermitOptions {\n  owner: string\n  permitBatch: AllowanceTransferPermitBatch\n  signature: string\n}\n\nconst NFT_PERMIT_TYPES = {\n  Permit: [\n    { name: 'spender', type: 'address' },\n    { name: 'tokenId', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n}\n\nexport interface NFTPermitValues {\n  spender: string\n  tokenId: BigintIsh\n  deadline: BigintIsh\n  nonce: BigintIsh\n}\n\nexport interface NFTPermitOptions extends NFTPermitValues {\n  signature: string\n}\n\nexport interface NFTPermitData {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: NFTPermitValues\n}\n\nexport type MintOptions = CommonOptions & CommonAddLiquidityOptions & MintSpecificOptions\nexport type IncreaseLiquidityOptions = CommonOptions & CommonAddLiquidityOptions & ModifyPositionSpecificOptions\n\nexport type AddLiquidityOptions = MintOptions | IncreaseLiquidityOptions\n\nexport type RemoveLiquidityOptions = CommonOptions & RemoveLiquiditySpecificOptions & ModifyPositionSpecificOptions\n\nexport type CollectOptions = CommonOptions & CollectSpecificOptions\n\n// type guard\nfunction isMint(options: AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nfunction shouldCreatePool(options: MintOptions): boolean {\n  if (options.createPool) {\n    invariant(options.sqrtPriceX96 !== undefined, NO_SQRT_PRICE)\n    return true\n  }\n  return false\n}\n\nexport abstract class V4PositionManager {\n  public static INTERFACE: Interface = new Interface(positionManagerAbi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Public methods to encode method parameters for different actions on the PositionManager contract\n   */\n  public static createCallParameters(poolKey: PoolKey, sqrtPriceX96: BigintIsh): MethodParameters {\n    return {\n      calldata: this.encodeInitializePool(poolKey, sqrtPriceX96),\n      value: toHex(0),\n    }\n  }\n\n  public static addCallParameters(position: Position, options: AddLiquidityOptions): MethodParameters {\n    /**\n     * Cases:\n     * - if pool does not exist yet, encode initializePool\n     * then,\n     * - if is mint, encode MINT_POSITION. If migrating, encode a SETTLE and SWEEP for both currencies. Else, encode a SETTLE_PAIR. If on a NATIVE pool, encode a SWEEP.\n     * - else, encode INCREASE_LIQUIDITY and SETTLE_PAIR. If it is on a NATIVE pool, encode a SWEEP.\n     */\n    invariant(JSBI.greaterThan(position.liquidity, ZERO), ZERO_LIQUIDITY)\n\n    const calldataList: string[] = []\n    const planner = new V4PositionPlanner()\n\n    // Encode initialize pool.\n    if (isMint(options) && shouldCreatePool(options)) {\n      // No planner used here because initializePool is not supported as an Action\n      calldataList.push(V4PositionManager.encodeInitializePool(position.pool.poolKey, options.sqrtPriceX96!))\n    }\n\n    // position.pool.currency0 is native if and only if options.useNative is set\n    invariant(\n      position.pool.currency0 === options.useNative ||\n        (!position.pool.currency0.isNative && options.useNative === undefined),\n      NATIVE_NOT_SET\n    )\n\n    // adjust for slippage\n    const maximumAmounts = position.mintAmountsWithSlippage(options.slippageTolerance)\n    const amount0Max = toHex(maximumAmounts.amount0)\n    const amount1Max = toHex(maximumAmounts.amount1)\n\n    // We use permit2 to approve tokens to the position manager\n    if (options.batchPermit) {\n      calldataList.push(\n        V4PositionManager.encodePermitBatch(\n          options.batchPermit.owner,\n          options.batchPermit.permitBatch,\n          options.batchPermit.signature\n        )\n      )\n    }\n\n    // mint\n    if (isMint(options)) {\n      const recipient: string = validateAndParseAddress(options.recipient)\n      planner.addMint(\n        position.pool,\n        position.tickLower,\n        position.tickUpper,\n        position.liquidity,\n        amount0Max,\n        amount1Max,\n        recipient,\n        options.hookData\n      )\n    } else {\n      // increase\n      planner.addIncrease(options.tokenId, position.liquidity, amount0Max, amount1Max, options.hookData)\n    }\n\n    let value: string = toHex(0)\n\n    // If migrating, we need to settle and sweep both currencies individually\n    if (isMint(options) && options.migrate) {\n      if (options.useNative) {\n        // unwrap the exact amount needed to send to the pool manager\n        planner.addUnwrap(OPEN_DELTA)\n        // payer is v4 position manager\n        planner.addSettle(position.pool.currency0, false)\n        planner.addSettle(position.pool.currency1, false)\n        // sweep any leftover wrapped native that was not unwrapped\n        // recipient will be same as the v4 lp token recipient\n        planner.addSweep(position.pool.currency0.wrapped, options.recipient)\n        planner.addSweep(position.pool.currency1, options.recipient)\n      } else {\n        // payer is v4 position manager\n        planner.addSettle(position.pool.currency0, false)\n        planner.addSettle(position.pool.currency1, false)\n        // recipient will be same as the v4 lp token recipient\n        planner.addSweep(position.pool.currency0, options.recipient)\n        planner.addSweep(position.pool.currency1, options.recipient)\n      }\n    } else {\n      // need to settle both currencies when minting / adding liquidity (user is the payer)\n      planner.addSettlePair(position.pool.currency0, position.pool.currency1)\n      // When not migrating and adding native currency, add a final sweep\n      if (options.useNative) {\n        // Any sweeping must happen after the settling.\n        // native currency will always be currency0 in v4\n        value = toHex(amount0Max)\n        planner.addSweep(position.pool.currency0, MSG_SENDER)\n      }\n    }\n\n    calldataList.push(V4PositionManager.encodeModifyLiquidities(planner.finalize(), options.deadline))\n\n    return {\n      calldata: Multicall.encodeMulticall(calldataList),\n      value,\n    }\n  }\n\n  /**\n   * Produces the calldata for completely or partially exiting a position\n   * @param position The position to exit\n   * @param options Additional information necessary for generating the calldata\n   * @returns The call parameters\n   */\n  public static removeCallParameters(position: Position, options: RemoveLiquidityOptions): MethodParameters {\n    /**\n     * cases:\n     * - if liquidityPercentage is 100%, encode BURN_POSITION and then TAKE_PAIR\n     * - else, encode DECREASE_LIQUIDITY and then TAKE_PAIR\n     */\n    const calldataList: string[] = []\n    const planner = new V4PositionPlanner()\n\n    const tokenId = toHex(options.tokenId)\n\n    if (options.burnToken) {\n      // if burnToken is true, the specified liquidity percentage must be 100%\n      invariant(options.liquidityPercentage.equalTo(ONE), CANNOT_BURN)\n\n      // if there is a permit, encode the ERC721Permit permit call\n      if (options.permit) {\n        calldataList.push(\n          V4PositionManager.encodeERC721Permit(\n            options.permit.spender,\n            options.permit.tokenId,\n            options.permit.deadline,\n            options.permit.nonce,\n            options.permit.signature\n          )\n        )\n      }\n\n      // slippage-adjusted amounts derived from current position liquidity\n      const { amount0: amount0Min, amount1: amount1Min } = position.burnAmountsWithSlippage(options.slippageTolerance)\n      planner.addBurn(tokenId, amount0Min, amount1Min, options.hookData)\n    } else {\n      // construct a partial position with a percentage of liquidity\n      const partialPosition = new Position({\n        pool: position.pool,\n        liquidity: options.liquidityPercentage.multiply(position.liquidity).quotient,\n        tickLower: position.tickLower,\n        tickUpper: position.tickUpper,\n      })\n\n      // If the partial position has liquidity=0, this is a collect call and collectCallParameters should be used\n      invariant(JSBI.greaterThan(partialPosition.liquidity, ZERO), ZERO_LIQUIDITY)\n\n      // slippage-adjusted underlying amounts\n      const { amount0: amount0Min, amount1: amount1Min } = partialPosition.burnAmountsWithSlippage(\n        options.slippageTolerance\n      )\n\n      planner.addDecrease(\n        tokenId,\n        partialPosition.liquidity.toString(),\n        amount0Min.toString(),\n        amount1Min.toString(),\n        options.hookData ?? EMPTY_BYTES\n      )\n    }\n\n    planner.addTakePair(position.pool.currency0, position.pool.currency1, MSG_SENDER)\n\n    calldataList.push(V4PositionManager.encodeModifyLiquidities(planner.finalize(), options.deadline))\n\n    return {\n      calldata: Multicall.encodeMulticall(calldataList),\n      value: toHex(0),\n    }\n  }\n\n  /**\n   * Produces the calldata for collecting fees from a position\n   * @param position The position to collect fees from\n   * @param options Additional information necessary for generating the calldata\n   * @returns The call parameters\n   */\n  public static collectCallParameters(position: Position, options: CollectOptions): MethodParameters {\n    const calldataList: string[] = []\n    const planner = new V4PositionPlanner()\n\n    const tokenId = toHex(options.tokenId)\n    const recipient = validateAndParseAddress(options.recipient)\n\n    /**\n     * To collect fees in V4, we need to:\n     * - encode a decrease liquidity by 0\n     * - and encode a TAKE_PAIR\n     */\n\n    planner.addDecrease(tokenId, '0', '0', '0', options.hookData)\n\n    planner.addTakePair(position.pool.currency0, position.pool.currency1, recipient)\n\n    calldataList.push(V4PositionManager.encodeModifyLiquidities(planner.finalize(), options.deadline))\n\n    return {\n      calldata: Multicall.encodeMulticall(calldataList),\n      value: toHex(0),\n    }\n  }\n\n  // Initialize a pool\n  private static encodeInitializePool(poolKey: PoolKey, sqrtPriceX96: BigintIsh): string {\n    return V4PositionManager.INTERFACE.encodeFunctionData(PositionFunctions.INITIALIZE_POOL, [\n      poolKey,\n      sqrtPriceX96.toString(),\n    ])\n  }\n\n  // Encode a modify liquidities call\n  public static encodeModifyLiquidities(unlockData: string, deadline: BigintIsh): string {\n    return V4PositionManager.INTERFACE.encodeFunctionData(PositionFunctions.MODIFY_LIQUIDITIES, [unlockData, deadline])\n  }\n\n  // Encode a permit batch call\n  public static encodePermitBatch(owner: string, permitBatch: AllowanceTransferPermitBatch, signature: string): string {\n    return V4PositionManager.INTERFACE.encodeFunctionData(PositionFunctions.PERMIT_BATCH, [\n      owner,\n      permitBatch,\n      signature,\n    ])\n  }\n\n  // Encode a ERC721Permit permit call\n  public static encodeERC721Permit(\n    spender: string,\n    tokenId: BigintIsh,\n    deadline: BigintIsh,\n    nonce: BigintIsh,\n    signature: string\n  ): string {\n    return V4PositionManager.INTERFACE.encodeFunctionData(PositionFunctions.ERC721PERMIT_PERMIT, [\n      spender,\n      tokenId,\n      deadline,\n      nonce,\n      signature,\n    ])\n  }\n\n  // Prepare the params for an EIP712 signTypedData request\n  public static getPermitData(permit: NFTPermitValues, positionManagerAddress: string, chainId: number): NFTPermitData {\n    return {\n      domain: {\n        name: 'Uniswap V4 Positions NFT',\n        chainId,\n        verifyingContract: positionManagerAddress,\n      },\n      types: NFT_PERMIT_TYPES,\n      values: permit,\n    }\n  }\n}\n"],"names":["sortsBefore","currencyA","currencyB","isNative","wrapped","HookOptions","hookFlagIndex","_hookFlagIndex","AfterRemoveLiquidityReturnsDelta","AfterAddLiquidityReturnsDelta","AfterSwapReturnsDelta","BeforeSwapReturnsDelta","AfterDonate","BeforeDonate","AfterSwap","BeforeSwap","AfterRemoveLiquidity","BeforeRemoveLiquidity","AfterAddLiquidity","BeforeAddLiquidity","AfterInitialize","BeforeInitialize","Hook","permissions","address","_checkAddress","beforeInitialize","_hasPermission","afterInitialize","beforeAddLiquidity","afterAddLiquidity","beforeRemoveLiquidity","afterRemoveLiquidity","beforeSwap","afterSwap","beforeDonate","afterDonate","beforeSwapReturnsDelta","afterSwapReturnsDelta","afterAddLiquidityReturnsDelta","afterRemoveLiquidityReturnsDelta","hasPermission","hookOption","hasInitializePermissions","hasLiquidityPermissions","hasSwapPermissions","hasDonatePermissions","parseInt","isAddress","process","invariant","ADDRESS_ZERO","constants","AddressZero","NEGATIVE_ONE","JSBI","BigInt","ZERO","ONE","EMPTY_BYTES","Q96","exponentiate","Q192","OPEN_DELTA","Zero","NATIVE_NOT_SET","ZERO_LIQUIDITY","NO_SQRT_PRICE","CANNOT_BURN","PositionFunctions","FeeAmount","TICK_SPACINGS","_TICK_SPACINGS","LOWEST","LOW","MEDIUM","HIGH","DYNAMIC_FEE_FLAG","NO_TICK_DATA_PROVIDER_DEFAULT","NoTickDataProvider","Pool","fee","tickSpacing","hooks","sqrtRatioX96","liquidity","tickCurrent","ticks","Number","isInteger","tickCurrentSqrtRatioX96","TickMath","getSqrtRatioAtTick","nextTickSqrtRatioX96","greaterThanOrEqual","lessThanOrEqual","_ref","currency0","currency1","tickDataProvider","Array","isArray","TickListDataProvider","poolKey","getPoolKey","poolId","getPoolId","_ref2","currency0Addr","currency1Addr","_ref3","keccak256","defaultAbiCoder","encode","_proto","prototype","involvesCurrency","currency","equals","involvesToken","v4InvolvesToken","priceOf","currency0Price","currency1Price","getOutputAmount","_getOutputAmount","_asyncToGenerator","_regeneratorRuntime","mark","_callee","inputAmount","sqrtPriceLimitX96","zeroForOne","_yield$this$swap","outputAmount","outputCurrency","wrap","_callee$","_context","prev","next","swap","quotient","sent","amountCalculated","abrupt","CurrencyAmount","fromRawAmount","multiply","stop","_x","_x2","apply","arguments","getInputAmount","_getInputAmount","_callee2","_yield$this$swap2","inputCurrency","_callee2$","_context2","_x3","_x4","_swap","_callee3","amountSpecified","_callee3$","_context3","hookImpactsSwap","v3Swap","Error","_x5","_x6","_x7","_createClass","key","get","_this$_currency0Price","_currency0Price","Price","_this$_currency1Price","_currency1Price","chainId","amountWithPathCurrency","amount","pool","fromFractionalAmount","getPathCurrency","numerator","denominator","symbol","Route","pools","input","output","length","allOnSameChain","every","pathInput","pathOutput","currencyPath","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","value","i","currentInputCurrency","nextCurrency","push","_midPrice","price","slice","reduce","nextInput","tradeComparator","a","b","equalTo","aHops","swaps","total","cur","route","bHops","lessThan","Trade","routes","tradeType","numPools","map","_ref4","poolIDSet","Set","_iterator2","_step2","add","size","exactIn","_exactIn","amountIn","fromRoute","TradeType","EXACT_INPUT","exactOut","_exactOut","amountOut","EXACT_OUTPUT","_fromRoute","tokenAmount","_yield$pool$getOutput","_tokenAmount","_i","_pool","_yield$_pool$getInput","fromRoutes","_fromRoutes","_callee5","_callee5$","_context5","Promise","all","_ref6","_callee4","_ref5","trade","_callee4$","_context4","_x10","_x8","_x9","createUncheckedTrade","constructorArguments","_extends","createUncheckedTradeWithMultipleRoutes","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","worstExecutionPrice","bestTradeExactIn","_bestTradeExactIn","_callee6","currencyAmountIn","currencyOut","_temp","currentPools","nextAmountIn","bestTrades","_ref7$maxNumResults","_ref7","maxNumResults","_ref7$maxHops","maxHops","_context6","_yield$pool$getOutput2","t0","isInsufficientInputAmountError","t1","sortedInsert","t2","concat","t3","t4","t5","poolsExcludingThisPool","_x11","_x12","_x13","_x14","_x15","_x16","_x17","bestTradeExactOut","_bestTradeExactOut","_callee7","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref8$maxNumResults","_ref8","_ref8$maxHops","_context7","_yield$pool$getInputA","isInsufficientReservesError","_x18","_x19","_x20","_x21","_x22","_x23","_x24","_inputAmount","totalInputFromRoutes","_ref9","_outputAmount","totalOutputFromRoutes","_ref10","_this$_executionPrice","_executionPrice","_priceImpact","spotOutputAmount","_iterator3","_step3","_step3$value","midPrice","quote","priceImpact","subtract","divide","Percent","tickToPrice","baseCurrency","quoteCurrency","tick","ratioX192","priceToClosestTick","sorted","encodeSqrtRatioX96","getTickAtSqrtRatio","nextTickPrice","greaterThan","Position","tickLower","tickUpper","MIN_TICK","MAX_TICK","ratiosAfterSlippage","priceLower","token0Price","asFraction","priceUpper","sqrtRatioX96Lower","MIN_SQRT_RATIO","sqrtRatioX96Upper","MAX_SQRT_RATIO","mintAmountsWithSlippage","_this$ratiosAfterSlip","poolLower","token0","token1","poolUpper","amount1","mintAmounts","amount0","burnAmountsWithSlippage","_this$ratiosAfterSlip2","permitBatchData","spender","nonce","deadline","_this$mintAmountsWith","details","token","expiration","sigDeadline","fromAmounts","useFullPrecision","sqrtRatioAX96","sqrtRatioBX96","maxLiquidityForAmounts","fromAmount0","MaxUint256","fromAmount1","_token0Amount","SqrtPriceMath","getAmount0Delta","_token1Amount","getAmount1Delta","_mintAmounts","encodeRouteToPath","exactOutput","p","reverse","startingCurrency","pathKeys","intermediateCurrency","hookData","Actions","Subparser","POOL_KEY_STRUCT","PATH_KEY_STRUCT","SWAP_EXACT_IN_SINGLE_STRUCT","SWAP_EXACT_IN_STRUCT","SWAP_EXACT_OUT_SINGLE_STRUCT","SWAP_EXACT_OUT_STRUCT","V4_BASE_ACTIONS_ABI_DEFINITION","_V4_BASE_ACTIONS_ABI_","INCREASE_LIQUIDITY","name","type","DECREASE_LIQUIDITY","MINT_POSITION","subparser","PoolKey","BURN_POSITION","SWAP_EXACT_IN_SINGLE","V4SwapExactInSingle","SWAP_EXACT_IN","V4SwapExactIn","SWAP_EXACT_OUT_SINGLE","V4SwapExactOutSingle","SWAP_EXACT_OUT","V4SwapExactOut","SETTLE","SETTLE_ALL","SETTLE_PAIR","TAKE","TAKE_ALL","TAKE_PORTION","TAKE_PAIR","CLOSE_CURRENCY","SWEEP","UNWRAP","FULL_DELTA_AMOUNT","V4Planner","actions","params","addAction","parameters","command","createAction","encodedInput","action","toString","padStart","addTrade","actionType","currencyAddress","path","amountInMaximum","amountOutMinimum","addSettle","payerIsUser","addTake","recipient","takeAmount","addUnwrap","finalize","v","toAddress","V4PositionPlanner","_V4Planner","_inheritsLoose","addMint","amount0Max","amount1Max","owner","inputs","addIncrease","tokenId","addDecrease","amount0Min","amount1Min","addBurn","addSettlePair","addTakePair","addSweep","to","toHex","bigintIsh","bigInt","hex","V4BaseActionsParser","parseCalldata","calldata","_ethers$utils$default","ethers","utils","decode","actionTypes","getActions","abiDef","rawParams","param","j","parseV4ExactInSingle","parseV4ExactIn","parseV4ExactOutSingle","parseV4ExactOut","parsePoolKey","actionName","byte","substring","data","parsePathKey","paths","pathKey","MSG_SENDER","Multicall","encodeMulticall","calldataList","INTERFACE","encodeFunctionData","decodeMulticall","encodedCalldata","decodeFunctionData","Interface","IMulticall","abi","positionManagerAbi","internalType","stateMutability","outputs","components","indexed","anonymous","NFT_PERMIT_TYPES","Permit","isMint","options","Object","keys","some","k","shouldCreatePool","createPool","sqrtPriceX96","undefined","V4PositionManager","createCallParameters","encodeInitializePool","addCallParameters","position","planner","useNative","maximumAmounts","batchPermit","encodePermitBatch","permitBatch","signature","validateAndParseAddress","migrate","encodeModifyLiquidities","removeCallParameters","burnToken","liquidityPercentage","permit","encodeERC721Permit","_position$burnAmounts","_options$hookData","partialPosition","_partialPosition$burn","collectCallParameters","INITIALIZE_POOL","unlockData","MODIFY_LIQUIDITIES","PERMIT_BATCH","ERC721PERMIT_PERMIT","getPermitData","positionManagerAddress","domain","verifyingContract","types","values"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAEgBA,WAAWA,CAACC,SAAmB,EAAEC,SAAmB;EAClE,IAAID,SAAS,CAACE,QAAQ,EAAE,OAAO,IAAI;EACnC,IAAID,SAAS,CAACC,QAAQ,EAAE,OAAO,KAAK;EACpC,OAAOF,SAAS,CAACG,OAAO,CAACJ,WAAW,CAACE,SAAS,CAACE,OAAO,CAAC;AACzD;;;ACNA,AAKA,WAAYC,WAAW;EACrBA,oFAAqE;EACrEA,8EAA+D;EAC/DA,8DAA+C;EAC/CA,gEAAiD;EACjDA,0CAA2B;EAC3BA,4CAA6B;EAC7BA,sCAAuB;EACvBA,wCAAyB;EACzBA,4DAA6C;EAC7CA,8DAA+C;EAC/CA,sDAAuC;EACvCA,wDAAyC;EACzCA,kDAAmC;EACnCA,oDAAqC;AACvC,CAAC,EAfWA,mBAAW,KAAXA,mBAAW;AAiBvB,IAAaC,aAAa,IAAAC,cAAA,OAAAA,cAAA,CACvBF,mBAAW,CAACG,gCAAgC,IAAG,CAAC,EAAAD,cAAA,CAChDF,mBAAW,CAACI,6BAA6B,IAAG,CAAC,EAAAF,cAAA,CAC7CF,mBAAW,CAACK,qBAAqB,IAAG,CAAC,EAAAH,cAAA,CACrCF,mBAAW,CAACM,sBAAsB,IAAG,CAAC,EAAAJ,cAAA,CACtCF,mBAAW,CAACO,WAAW,IAAG,CAAC,EAAAL,cAAA,CAC3BF,mBAAW,CAACQ,YAAY,IAAG,CAAC,EAAAN,cAAA,CAC5BF,mBAAW,CAACS,SAAS,IAAG,CAAC,EAAAP,cAAA,CACzBF,mBAAW,CAACU,UAAU,IAAG,CAAC,EAAAR,cAAA,CAC1BF,mBAAW,CAACW,oBAAoB,IAAG,CAAC,EAAAT,cAAA,CACpCF,mBAAW,CAACY,qBAAqB,IAAG,CAAC,EAAAV,cAAA,CACrCF,mBAAW,CAACa,iBAAiB,IAAG,EAAE,EAAAX,cAAA,CAClCF,mBAAW,CAACc,kBAAkB,IAAG,EAAE,EAAAZ,cAAA,CACnCF,mBAAW,CAACe,eAAe,IAAG,EAAE,EAAAb,cAAA,CAChCF,mBAAW,CAACgB,gBAAgB,IAAG,EAAE,EAAAd,cAAA,CACnC;AAED,IAAae,IAAI;EAAA,SAAAA;EAAAA,IAAA,CACDC,WAAW,GAAlB,SAAOA,WAAWA,CAACC,OAAe;IACvC,IAAI,CAACC,aAAa,CAACD,OAAO,CAAC;IAC3B,OAAO;MACLE,gBAAgB,EAAE,IAAI,CAACC,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACgB,gBAAgB,CAAC;MAC5EO,eAAe,EAAE,IAAI,CAACD,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACe,eAAe,CAAC;MAC1ES,kBAAkB,EAAE,IAAI,CAACF,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACc,kBAAkB,CAAC;MAChFW,iBAAiB,EAAE,IAAI,CAACH,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACa,iBAAiB,CAAC;MAC9Ea,qBAAqB,EAAE,IAAI,CAACJ,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACY,qBAAqB,CAAC;MACtFe,oBAAoB,EAAE,IAAI,CAACL,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACW,oBAAoB,CAAC;MACpFiB,UAAU,EAAE,IAAI,CAACN,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACU,UAAU,CAAC;MAChEmB,SAAS,EAAE,IAAI,CAACP,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACS,SAAS,CAAC;MAC9DqB,YAAY,EAAE,IAAI,CAACR,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACQ,YAAY,CAAC;MACpEuB,WAAW,EAAE,IAAI,CAACT,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACO,WAAW,CAAC;MAClEyB,sBAAsB,EAAE,IAAI,CAACV,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACM,sBAAsB,CAAC;MACxF2B,qBAAqB,EAAE,IAAI,CAACX,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACK,qBAAqB,CAAC;MACtF6B,6BAA6B,EAAE,IAAI,CAACZ,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACI,6BAA6B,CAAC;MACtG+B,gCAAgC,EAAE,IAAI,CAACb,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACG,gCAAgC;KAC5G;GACF;EAAAc,IAAA,CAEamB,aAAa,GAApB,SAAOA,aAAaA,CAACjB,OAAe,EAAEkB,UAAuB;IAClE,IAAI,CAACjB,aAAa,CAACD,OAAO,CAAC;IAC3B,OAAO,IAAI,CAACG,cAAc,CAACH,OAAO,EAAEkB,UAAU,CAAC;GAChD;EAAApB,IAAA,CAEaqB,wBAAwB,GAA/B,SAAOA,wBAAwBA,CAACnB,OAAe;IACpD,IAAI,CAACC,aAAa,CAACD,OAAO,CAAC;IAC3B,OACE,IAAI,CAACG,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACgB,gBAAgB,CAAC,IAC1DC,IAAI,CAACK,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACe,eAAe,CAAC;GAE5D;EAAAE,IAAA,CAEasB,uBAAuB,GAA9B,SAAOA,uBAAuBA,CAACpB,OAAe;IACnD,IAAI,CAACC,aAAa,CAACD,OAAO,CAAC;;IAE3B,OACE,IAAI,CAACG,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACc,kBAAkB,CAAC,IAC5DG,IAAI,CAACK,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACa,iBAAiB,CAAC,IAC3DI,IAAI,CAACK,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACY,qBAAqB,CAAC,IAC/DK,IAAI,CAACK,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACW,oBAAoB,CAAC;GAEjE;EAAAM,IAAA,CAEauB,kBAAkB,GAAzB,SAAOA,kBAAkBA,CAACrB,OAAe;IAC9C,IAAI,CAACC,aAAa,CAACD,OAAO,CAAC;;IAE3B,OAAO,IAAI,CAACG,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACU,UAAU,CAAC,IAAIO,IAAI,CAACK,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACS,SAAS,CAAC;GACnH;EAAAQ,IAAA,CAEawB,oBAAoB,GAA3B,SAAOA,oBAAoBA,CAACtB,OAAe;IAChD,IAAI,CAACC,aAAa,CAACD,OAAO,CAAC;IAC3B,OACE,IAAI,CAACG,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACQ,YAAY,CAAC,IAAIS,IAAI,CAACK,cAAc,CAACH,OAAO,EAAEnB,mBAAW,CAACO,WAAW,CAAC;GAElH;EAAAU,IAAA,CAEcK,cAAc,GAArB,SAAOA,cAAcA,CAACH,OAAe,EAAEkB,UAAuB;IACpE,OAAO,CAAC,EAAEK,QAAQ,CAACvB,OAAO,EAAE,EAAE,CAAC,GAAI,CAAC,IAAIlB,aAAa,CAACoC,UAAU,CAAE,CAAC;GACpE;EAAApB,IAAA,CAEcG,aAAa,GAApB,SAAOA,aAAaA,CAACD,OAAe;IAC1C,CAAUwB,eAAS,CAACxB,OAAO,CAAC,GAAAyB,CAA5BC,SAAS,QAAqB,iBAAiB;GAChD;EAAA,OAAA5B,IAAA;AAAA;;;ACvGH,AAIA;AACA,AAAO,IAAM6B,YAAY,GAAGC,gBAAS,CAACC,WAAW;AACjD,AAAO,IAAMC,YAAY,gBAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC3C,AAAO,IAAMC,IAAI,gBAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAClC,AAAO,IAAME,GAAG,gBAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AACjC,AACO,IAAMG,WAAW,GAAG,IAAI;AAE/B;AACA,AAAO,IAAMC,GAAG,gBAAGL,IAAI,CAACM,YAAY,cAACN,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,eAAED,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,CAAC;AACrE,AAAO,IAAMM,IAAI,gBAAGP,IAAI,CAACM,YAAY,CAACD,GAAG,eAAEL,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;AAE1D,AAUA;AACA,AAAO,IAAMO,UAAU,GAAGX,gBAAS,CAACY,IAAI;AAExC,AAMA;AACA,AAAO,IAAMC,cAAc,GAAG,gBAAgB;AAC9C,AAAO,IAAMC,cAAc,GAAG,gBAAgB;AAC9C,AAAO,IAAMC,aAAa,GAAG,eAAe;AAC5C,AAAO,IAAMC,WAAW,GAAG,aAAa;AAExC;;;AAGA,AAAA,IAAYC,iBAOX;AAPD,WAAYA,iBAAiB;EAC3BA,uDAAkC;EAClCA,6DAAwC;;EAExCA,gDAA2B;;EAE3BA,uDAAkC;AACpC,CAAC,EAPWA,iBAAiB,KAAjBA,iBAAiB;AAS7B;;;AAGA,AAAA,IAAYC,SAKX;AALD,WAAYA,SAAS;EACnBA,+CAAY;EACZA,yCAAS;EACTA,gDAAa;EACbA,6CAAY;AACd,CAAC,EALWA,SAAS,KAATA,SAAS;AAOrB;;;AAGA,AAAO,IAAMC,aAAa,IAAAC,cAAA,OAAAA,cAAA,CACvBF,SAAS,CAACG,MAAM,IAAG,CAAC,EAAAD,cAAA,CACpBF,SAAS,CAACI,GAAG,IAAG,EAAE,EAAAF,cAAA,CAClBF,SAAS,CAACK,MAAM,IAAG,EAAE,EAAAH,cAAA,CACrBF,SAAS,CAACM,IAAI,IAAG,GAAG,EAAAJ,cAAA,CACtB;;ICrDYK,gBAAgB,GAAG,QAAQ;AACxC,IAAMC,6BAA6B,gBAAG,IAAIC,wBAAkB,EAAE;AAU9D;;;AAGA,IAAaC,IAAI;;;;;;;;;;;;EAsEf,SAAAA,KACE/E,SAAmB,EACnBC,SAAmB,EACnB+E,GAAW,EACXC,WAAmB,EACnBC,KAAa,EACbC,YAAuB,EACvBC,SAAoB,EACpBC,WAAmB,EACnBC;QAAAA;MAAAA,QAA2DT,6BAA6B;;IAExF,CAAU9B,eAAS,CAACmC,KAAK,CAAC,GAAAlC,CAA1BC,SAAS,QAAmB,sBAAsB;IAClD,EAAUsC,MAAM,CAACC,SAAS,CAACR,GAAG,CAAC,KAAKA,GAAG,KAAKJ,gBAAgB,IAAII,GAAG,GAAG,OAAS,CAAC,IAAAhC,CAAhFC,SAAS,QAAyE,KAAK;IACvF,IAAI+B,GAAG,KAAKJ,gBAAgB,EAAE;MAC5B,EAAUW,MAAM,CAACL,KAAK,CAAC,GAAG,CAAC,IAAAlC,CAA3BC,SAAS,QAAoB,kCAAkC;;IAEjE,IAAMwC,uBAAuB,GAAGC,cAAQ,CAACC,kBAAkB,CAACN,WAAW,CAAC;IACxE,IAAMO,oBAAoB,GAAGF,cAAQ,CAACC,kBAAkB,CAACN,WAAW,GAAG,CAAC,CAAC;IACzE,EACE/B,IAAI,CAACuC,kBAAkB,CAACvC,IAAI,CAACC,MAAM,CAAC4B,YAAY,CAAC,EAAEM,uBAAuB,CAAC,IACzEnC,IAAI,CAACwC,eAAe,CAACxC,IAAI,CAACC,MAAM,CAAC4B,YAAY,CAAC,EAAES,oBAAoB,CAAC,IAAA5C,CAFzEC,SAAS,QAGP,cAAc;IAIf,IAAA8C,IAAA,GAAmChG,WAAW,CAACC,SAAS,EAAEC,SAAS,CAAC,GACjE,CAACD,SAAS,EAAEC,SAAS,CAAC,GACtB,CAACA,SAAS,EAAED,SAAS,CAAC;IAFxB,IAAI,CAACgG,SAAS,GAAAD,IAAA;IAAE,IAAI,CAACE,SAAS,GAAAF,IAAA;IAGhC,IAAI,CAACf,GAAG,GAAGA,GAAG;IACd,IAAI,CAACG,YAAY,GAAG7B,IAAI,CAACC,MAAM,CAAC4B,YAAY,CAAC;IAC7C,IAAI,CAACF,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,SAAS,GAAG9B,IAAI,CAACC,MAAM,CAAC6B,SAAS,CAAC;IACvC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACa,gBAAgB,GAAGC,KAAK,CAACC,OAAO,CAACd,KAAK,CAAC,GAAG,IAAIe,0BAAoB,CAACf,KAAK,EAAEL,WAAW,CAAC,GAAGK,KAAK;IACnG,IAAI,CAACgB,OAAO,GAAGvB,IAAI,CAACwB,UAAU,CAAC,IAAI,CAACP,SAAS,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACjB,GAAG,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,KAAK,CAAC;IACtG,IAAI,CAACsB,MAAM,GAAGzB,IAAI,CAAC0B,SAAS,CAAC,IAAI,CAACT,SAAS,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACjB,GAAG,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,KAAK,CAAC;;EACrGH,IAAA,CA3FawB,UAAU,GAAjB,SAAOA,UAAUA,CACtBvG,SAAmB,EACnBC,SAAmB,EACnB+E,GAAW,EACXC,WAAmB,EACnBC,KAAa;IAEb,CAAUnC,eAAS,CAACmC,KAAK,CAAC,GAAAlC,CAA1BC,SAAS,QAAmB,sBAAsB;IAElD,IAAAyD,KAAA,GAA+B3G,WAAW,CAACC,SAAS,EAAEC,SAAS,CAAC,GAAG,CAACD,SAAS,EAAEC,SAAS,CAAC,GAAG,CAACA,SAAS,EAAED,SAAS,CAAC;MAA3GgG,SAAS,GAAAU,KAAA;MAAET,SAAS,GAAAS,KAAA;IAC3B,IAAMC,aAAa,GAAGX,SAAS,CAAC9F,QAAQ,GAAGgD,YAAY,GAAG8C,SAAS,CAAC7F,OAAO,CAACoB,OAAO;IACnF,IAAMqF,aAAa,GAAGX,SAAS,CAAC/F,QAAQ,GAAGgD,YAAY,GAAG+C,SAAS,CAAC9F,OAAO,CAACoB,OAAO;IAEnF,OAAO;MACLyE,SAAS,EAAEW,aAAa;MACxBV,SAAS,EAAEW,aAAa;MACxB5B,GAAG,EAAHA,GAAG;MACHC,WAAW,EAAXA,WAAW;MACXC,KAAK,EAALA;KACD;GACF;EAAAH,IAAA,CAEa0B,SAAS,GAAhB,SAAOA,SAASA,CACrBzG,SAAmB,EACnBC,SAAmB,EACnB+E,GAAW,EACXC,WAAmB,EACnBC,KAAa;IAEb,IAAA2B,KAAA,GAA+B9G,WAAW,CAACC,SAAS,EAAEC,SAAS,CAAC,GAAG,CAACD,SAAS,EAAEC,SAAS,CAAC,GAAG,CAACA,SAAS,EAAED,SAAS,CAAC;MAA3GgG,SAAS,GAAAa,KAAA;MAAEZ,SAAS,GAAAY,KAAA;IAC3B,IAAMF,aAAa,GAAGX,SAAS,CAAC9F,QAAQ,GAAGgD,YAAY,GAAG8C,SAAS,CAAC7F,OAAO,CAACoB,OAAO;IACnF,IAAMqF,aAAa,GAAGX,SAAS,CAAC/F,QAAQ,GAAGgD,YAAY,GAAG+C,SAAS,CAAC9F,OAAO,CAACoB,OAAO;IACnF,OAAOuF,kBAAS,CACd,CAAC,OAAO,CAAC,EACT,CACEC,qBAAe,CAACC,MAAM,CACpB,CAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,EACpD,CAACL,aAAa,EAAEC,aAAa,EAAE5B,GAAG,EAAEC,WAAW,EAAEC,KAAK,CAAC,CACxD,CACF,CACF;;;EAqDH,IAAA+B,MAAA,GAAAlC,IAAA,CAAAmC,SAAA;;;;;;EAQAD,MAAA,CAKOE,gBAAgB,GAAhB,SAAAA,gBAAgBA,CAACC,QAAkB;IACxC,OAAOA,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACrB,SAAS,CAAC,IAAIoB,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACpB,SAAS,CAAC;;;EAE3EgB,MAAA,CACOK,aAAa,GAAb,SAAAA,aAAaA,CAACF,QAAkB;IACrC,OAAO,IAAI,CAACD,gBAAgB,CAACC,QAAQ,CAAC;;;;;;EAGxCH,MAAA,CAIOM,eAAe,GAAf,SAAAA,eAAeA,CAACH,QAAkB;IACvC,OACE,IAAI,CAACD,gBAAgB,CAACC,QAAQ,CAAC,IAC/BA,QAAQ,CAACjH,OAAO,CAACkH,MAAM,CAAC,IAAI,CAACrB,SAAS,CAAC,IACvCoB,QAAQ,CAACjH,OAAO,CAACkH,MAAM,CAAC,IAAI,CAACpB,SAAS,CAAC,IACvCmB,QAAQ,CAACjH,OAAO,CAACkH,MAAM,CAAC,IAAI,CAACrB,SAAS,CAAC7F,OAAO,CAAC,IAC/CiH,QAAQ,CAACjH,OAAO,CAACkH,MAAM,CAAC,IAAI,CAACpB,SAAS,CAAC9F,OAAO,CAAC;;;;;;;;;;EA0CnD8G,MAAA,CAKOO,OAAO,GAAP,SAAAA,OAAOA,CAACJ,QAAkB;IAC/B,CAAU,IAAI,CAACD,gBAAgB,CAACC,QAAQ,CAAC,GAAApE,CAAzCC,SAAS,QAAkC,UAAU;IACrD,OAAOmE,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACrB,SAAS,CAAC,GAAG,IAAI,CAACyB,cAAc,GAAG,IAAI,CAACC,cAAc;;;;;;EAUpFT,MAAA,CACaU,eAAe;;EAAA;IAAA,IAAAC,gBAAA,gBAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAArB,SAAAC,QACLC,WAAqC,EACrCC,iBAAwB;MAAA,IAAAC,UAAA,EAAAC,gBAAA,EAAAC,YAAA,EAAAlD,YAAA,EAAAC,SAAA,EAAAC,WAAA,EAAAiD,cAAA;MAAA,OAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAExB,CAAU,IAAI,CAACxB,gBAAgB,CAACc,WAAW,CAACb,QAAQ,CAAC,GAAApE,CAArDC,SAAS,QAA8C,UAAU;YAE3DkF,UAAU,GAAGF,WAAW,CAACb,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACrB,SAAS,CAAC;YAAAyC,QAAA,CAAAE,IAAA;YAAA,OAOpD,IAAI,CAACC,IAAI,CAACT,UAAU,EAAEF,WAAW,CAACY,QAAQ,EAAEX,iBAAiB,CAAC;UAAA;YAAAE,gBAAA,GAAAK,QAAA,CAAAK,IAAA;YAJpDT,YAAY,GAAAD,gBAAA,CAA9BW,gBAAgB;YAChB5D,YAAY,GAAAiD,gBAAA,CAAZjD,YAAY;YACZC,SAAS,GAAAgD,gBAAA,CAAThD,SAAS;YACTC,WAAW,GAAA+C,gBAAA,CAAX/C,WAAW;YAEPiD,cAAc,GAAGH,UAAU,GAAG,IAAI,CAAClC,SAAS,GAAG,IAAI,CAACD,SAAS;YAAA,OAAAyC,QAAA,CAAAO,MAAA,WAC5D,CACLC,sBAAc,CAACC,aAAa,CAACZ,cAAc,EAAEhF,IAAI,CAAC6F,QAAQ,CAACd,YAAY,EAAEhF,YAAY,CAAC,CAAC,EACvF,IAAI0B,IAAI,CACN,IAAI,CAACiB,SAAS,EACd,IAAI,CAACC,SAAS,EACd,IAAI,CAACjB,GAAG,EACR,IAAI,CAACC,WAAW,EAChB,IAAI,CAACC,KAAK,EACVC,YAAY,EACZC,SAAS,EACTC,WAAW,EACX,IAAI,CAACa,gBAAgB,CACtB,CACF;UAAA;UAAA;YAAA,OAAAuC,QAAA,CAAAW,IAAA;;SAAApB,OAAA;KACF;IAAA,SA7BYL,eAAeA,CAAA0B,EAAA,EAAAC,GAAA;MAAA,OAAA1B,gBAAA,CAAA2B,KAAA,OAAAC,SAAA;;IAAA,OAAf7B,eAAe;;;;;;;;;;EA+B5BV,MAAA,CAOawC,cAAc;;EAAA;IAAA,IAAAC,eAAA,gBAAA7B,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAA4B,SACLtB,YAAsC,EACtCH,iBAAwB;MAAA,IAAAC,UAAA,EAAAyB,iBAAA,EAAA3B,WAAA,EAAA9C,YAAA,EAAAC,SAAA,EAAAC,WAAA,EAAAwE,aAAA;MAAA,OAAA/B,mBAAA,GAAAS,IAAA,UAAAuB,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAArB,IAAA,GAAAqB,SAAA,CAAApB,IAAA;UAAA;YAExB,CAAU,IAAI,CAACxB,gBAAgB,CAACkB,YAAY,CAACjB,QAAQ,CAAC,GAAApE,CAAtDC,SAAS,QAA+C,UAAU;YAE5DkF,UAAU,GAAGE,YAAY,CAACjB,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACpB,SAAS,CAAC;YAAA8D,SAAA,CAAApB,IAAA;YAAA,OAOrD,IAAI,CAACC,IAAI,CAACT,UAAU,EAAE7E,IAAI,CAAC6F,QAAQ,CAACd,YAAY,CAACQ,QAAQ,EAAExF,YAAY,CAAC,EAAE6E,iBAAiB,CAAC;UAAA;YAAA0B,iBAAA,GAAAG,SAAA,CAAAjB,IAAA;YAJlFb,WAAW,GAAA2B,iBAAA,CAA7Bb,gBAAgB;YAChB5D,YAAY,GAAAyE,iBAAA,CAAZzE,YAAY;YACZC,SAAS,GAAAwE,iBAAA,CAATxE,SAAS;YACTC,WAAW,GAAAuE,iBAAA,CAAXvE,WAAW;YAEPwE,aAAa,GAAG1B,UAAU,GAAG,IAAI,CAACnC,SAAS,GAAG,IAAI,CAACC,SAAS;YAAA,OAAA8D,SAAA,CAAAf,MAAA,WAC3D,CACLC,sBAAc,CAACC,aAAa,CAACW,aAAa,EAAE5B,WAAW,CAAC,EACxD,IAAIlD,IAAI,CACN,IAAI,CAACiB,SAAS,EACd,IAAI,CAACC,SAAS,EACd,IAAI,CAACjB,GAAG,EACR,IAAI,CAACC,WAAW,EAChB,IAAI,CAACC,KAAK,EACVC,YAAY,EACZC,SAAS,EACTC,WAAW,EACX,IAAI,CAACa,gBAAgB,CACtB,CACF;UAAA;UAAA;YAAA,OAAA6D,SAAA,CAAAX,IAAA;;SAAAO,QAAA;KACF;IAAA,SA7BYF,cAAcA,CAAAO,GAAA,EAAAC,GAAA;MAAA,OAAAP,eAAA,CAAAH,KAAA,OAAAC,SAAA;;IAAA,OAAdC,cAAc;;;;;;;;;;;;;EA+B3BxC,MAAA,CAUc2B,IAAI;;EAAA;IAAA,IAAAsB,KAAA,gBAAArC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAV,SAAAoC,SACNhC,UAAmB,EACnBiC,eAAqB,EACrBlC,iBAAwB;MAAA,OAAAJ,mBAAA,GAAAS,IAAA,UAAA8B,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA5B,IAAA,GAAA4B,SAAA,CAAA3B,IAAA;UAAA;YAAA,IAEnB,IAAI,CAAC4B,eAAe,EAAE;cAAAD,SAAA,CAAA3B,IAAA;cAAA;;YAAA,OAAA2B,SAAA,CAAAtB,MAAA,WAClBwB,YAAM,CACXlH,IAAI,CAACC,MAAM,CAAC,IAAI,CAACyB,GAAG,CAAC,EACrB,IAAI,CAACG,YAAY,EACjB,IAAI,CAACE,WAAW,EAChB,IAAI,CAACD,SAAS,EACd,IAAI,CAACH,WAAW,EAChB,IAAI,CAACiB,gBAAgB,EACrBiC,UAAU,EACViC,eAAe,EACflC,iBAAiB,CAClB;UAAA;YAAA,MAEK,IAAIuC,KAAK,CAAC,kBAAkB,CAAC;UAAA;UAAA;YAAA,OAAAH,SAAA,CAAAlB,IAAA;;SAAAe,QAAA;KAEtC;IAAA,SApBavB,IAAIA,CAAA8B,GAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAAV,KAAA,CAAAX,KAAA,OAAAC,SAAA;;IAAA,OAAJZ,IAAI;;EAAA3B,MAAA,CAsBVsD,eAAe,GAAf,SAAAA,eAAeA;;;IAGrB,OAAOlJ,IAAI,CAACuB,kBAAkB,CAAC,IAAI,CAACsC,KAAK,CAAC;GAC3C;EAAA,OAAA2F,YAAA,CAAA9F,IAAA;IAAA+F,GAAA;IAAAC,GAAA,EAnMD,SAAAA;MACE,OAAO,IAAI,CAAC/E,SAAS;;;IACtB8E,GAAA;IAAAC,GAAA,EACD,SAAAA;MACE,OAAO,IAAI,CAAC9E,SAAS;;;IACtB6E,GAAA;IAAAC,GAAA,EAgCD,SAAAA;;MACE,QAAAC,qBAAA,GACE,IAAI,CAACC,eAAe,YAAAD,qBAAA,GACnB,IAAI,CAACC,eAAe,GAAG,IAAIC,aAAK,CAC/B,IAAI,CAAClF,SAAS,EACd,IAAI,CAACC,SAAS,EACdpC,IAAI,EACJP,IAAI,CAAC6F,QAAQ,CAAC,IAAI,CAAChE,YAAY,EAAE,IAAI,CAACA,YAAY,CAAC,CACpD;;;;IAGL2F,GAAA;IAAAC,GAAA,EACA,SAAAA;MACE,OAAO,IAAI,CAACtD,cAAc;;;;;;IAG5BqD,GAAA;IAAAC,GAAA,EAGA,SAAAA;;MACE,QAAAI,qBAAA,GACE,IAAI,CAACC,eAAe,YAAAD,qBAAA,GACnB,IAAI,CAACC,eAAe,GAAG,IAAIF,aAAK,CAC/B,IAAI,CAACjF,SAAS,EACd,IAAI,CAACD,SAAS,EACd1C,IAAI,CAAC6F,QAAQ,CAAC,IAAI,CAAChE,YAAY,EAAE,IAAI,CAACA,YAAY,CAAC,EACnDtB,IAAI,CACL;;;;IAGLiH,GAAA;IAAAC,GAAA,EACA,SAAAA;MACE,OAAO,IAAI,CAACrD,cAAc;;;IAC3BoD,GAAA;IAAAC,GAAA,EAeD,SAAAA;MACE,OAAO,IAAI,CAAC/E,SAAS,CAACqF,OAAO;;;AAC9B;;SClOaC,sBAAsBA,CAACC,MAAgC,EAAEC,IAAU;EACjF,OAAOvC,sBAAc,CAACwC,oBAAoB,CACxCC,eAAe,CAACH,MAAM,CAACnE,QAAQ,EAAEoE,IAAI,CAAC,EACtCD,MAAM,CAACI,SAAS,EAChBJ,MAAM,CAACK,WAAW,CACnB;AACH;AAEA,SAAgBF,eAAeA,CAACtE,QAAkB,EAAEoE,IAAU;EAC5D,IAAIA,IAAI,CAACrE,gBAAgB,CAACC,QAAQ,CAAC,EAAE;IACnC,OAAOA,QAAQ;GAChB,MAAM,IAAIoE,IAAI,CAACrE,gBAAgB,CAACC,QAAQ,CAACjH,OAAO,CAAC,EAAE;IAClD,OAAOiH,QAAQ,CAACjH,OAAO;GACxB,MAAM,IAAIqL,IAAI,CAACxF,SAAS,CAAC7F,OAAO,CAACkH,MAAM,CAACD,QAAQ,CAAC,EAAE;IAClD,OAAOoE,IAAI,CAACxF,SAAS;GACtB,MAAM,IAAIwF,IAAI,CAACvF,SAAS,CAAC9F,OAAO,CAACkH,MAAM,CAACD,QAAQ,CAAC,EAAE;IAClD,OAAOoE,IAAI,CAACvF,SAAS;GACtB,MAAM;IACL,MAAM,IAAIwE,KAAK,wBACQrD,QAAQ,CAACyE,MAAM,sBAAiBL,IAAI,CAACxF,SAAS,CAAC6F,MAAM,YAAOL,IAAI,CAACvF,SAAS,CAAC4F,MAAQ,CACzG;;AAEL;;ACnBA;;;;;AAKA,IAAaC,KAAK;;;;;;;EAgBhB,SAAAA,MAAmBC,KAAa,EAAEC,KAAa,EAAEC,MAAe;IARxD,cAAS,GAAkC,IAAI;IASrD,EAAUF,KAAK,CAACG,MAAM,GAAG,CAAC,IAAAlJ,CAA1BC,SAAS,QAAmB,OAAO;IAEnC,IAAMoI,OAAO,GAAGU,KAAK,CAAC,CAAC,CAAC,CAACV,OAAO;IAChC,IAAMc,cAAc,GAAGJ,KAAK,CAACK,KAAK,CAAC,UAACZ,IAAI;MAAA,OAAKA,IAAI,CAACH,OAAO,KAAKA,OAAO;MAAC;IACtE,CAAUc,cAAc,GAAAnJ,CAAxBC,SAAS,QAAiB,WAAW;;;;IAKrC,IAAI,CAACoJ,SAAS,GAAGX,eAAe,CAACM,KAAK,EAAED,KAAK,CAAC,CAAC,CAAC,CAAC;IACjD,IAAI,CAACO,UAAU,GAAGZ,eAAe,CAACO,MAAM,EAAEF,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,CAAC;;;;IAKlE,IAAMK,YAAY,GAAe,CAAC,IAAI,CAACF,SAAS,CAAC;IACjD,SAAAG,SAAA,GAAAC,+BAAA,CAAwBV,KAAK,CAACW,OAAO,EAAE,GAAAC,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAAAC,WAAA,GAAAF,KAAA,CAAAG,KAAA;QAA7BC,CAAC,GAAAF,WAAA;QAAErB,IAAI,GAAAqB,WAAA;MACjB,IAAMG,oBAAoB,GAAGT,YAAY,CAACQ,CAAC,CAAC;MAC5C,EAAUC,oBAAoB,CAAC3F,MAAM,CAACmE,IAAI,CAACxF,SAAS,CAAC,IAAIgH,oBAAoB,CAAC3F,MAAM,CAACmE,IAAI,CAACvF,SAAS,CAAC,IAAAjD,CAApGC,SAAS,QAA6F,MAAM;MAC5G,IAAMgK,YAAY,GAAGD,oBAAoB,CAAC3F,MAAM,CAACmE,IAAI,CAACxF,SAAS,CAAC,GAAGwF,IAAI,CAACvF,SAAS,GAAGuF,IAAI,CAACxF,SAAS;MAClGuG,YAAY,CAACW,IAAI,CAACD,YAAY,CAAC;;IAGjC,IAAI,CAAClB,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACQ,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACP,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM,WAANA,MAAM,GAAIM,YAAY,CAACA,YAAY,CAACL,MAAM,GAAG,CAAC,CAAC;;EAC9D,OAAArB,YAAA,CAAAiB,KAAA;IAAAhB,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAACgB,KAAK,CAAC,CAAC,CAAC,CAACV,OAAO;;;;;;IAG9BP,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,IAAI,IAAI,CAACoC,SAAS,KAAK,IAAI,EAAE,OAAO,IAAI,CAACA,SAAS;MAElD,IAAMC,KAAK,GAAG,IAAI,CAACrB,KAAK,CAACsB,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,CACtC,UAAAvH,IAAA,EAAuByF,IAAI;YAAxB+B,SAAS,GAAAxH,IAAA,CAATwH,SAAS;UAAEH,KAAK,GAAArH,IAAA,CAALqH,KAAK;QACjB,OAAOG,SAAS,CAAClG,MAAM,CAACmE,IAAI,CAACxF,SAAS,CAAC,GACnC;UACEuH,SAAS,EAAE/B,IAAI,CAACvF,SAAS;UACzBmH,KAAK,EAAEA,KAAK,CAACjE,QAAQ,CAACqC,IAAI,CAAC/D,cAAc;SAC1C,GACD;UACE8F,SAAS,EAAE/B,IAAI,CAACxF,SAAS;UACzBoH,KAAK,EAAEA,KAAK,CAACjE,QAAQ,CAACqC,IAAI,CAAC9D,cAAc;SAC1C;OACN,EACD,IAAI,CAACqE,KAAK,CAAC,CAAC,CAAC,CAAC/F,SAAS,CAACqB,MAAM,CAAC,IAAI,CAAC2E,KAAK,CAAC,GACtC;QACEuB,SAAS,EAAE,IAAI,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC9F,SAAS;QAClCmH,KAAK,EAAE,IAAI,CAACrB,KAAK,CAAC,CAAC,CAAC,CAACtE;OACtB,GACD;QACE8F,SAAS,EAAE,IAAI,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC/F,SAAS;QAClCoH,KAAK,EAAE,IAAI,CAACrB,KAAK,CAAC,CAAC,CAAC,CAACrE;OACtB,CACN,CAAC0F,KAAK;MAEP,OAAQ,IAAI,CAACD,SAAS,GAAG,IAAIjC,aAAK,CAAC,IAAI,CAACc,KAAK,EAAE,IAAI,CAACC,MAAM,EAAEmB,KAAK,CAACxB,WAAW,EAAEwB,KAAK,CAACzB,SAAS,CAAC;;;AAChG;;ACpFH;;;;;;;;;AASA,SAAgB6B,eAAeA,CAC7BC,CAAqC,EACrCC,CAAqC;;EAGrC,CAAUD,CAAC,CAACxF,WAAW,CAACb,QAAQ,CAACC,MAAM,CAACqG,CAAC,CAACzF,WAAW,CAACb,QAAQ,CAAC,GAAApE,CAA/DC,SAAS,QAAwD,gBAAgB;EACjF,CAAUwK,CAAC,CAACpF,YAAY,CAACjB,QAAQ,CAACC,MAAM,CAACqG,CAAC,CAACrF,YAAY,CAACjB,QAAQ,CAAC,GAAApE,CAAjEC,SAAS,QAA0D,iBAAiB;EACpF,IAAIwK,CAAC,CAACpF,YAAY,CAACsF,OAAO,CAACD,CAAC,CAACrF,YAAY,CAAC,EAAE;IAC1C,IAAIoF,CAAC,CAACxF,WAAW,CAAC0F,OAAO,CAACD,CAAC,CAACzF,WAAW,CAAC,EAAE;;MAExC,IAAM2F,KAAK,GAAGH,CAAC,CAACI,KAAK,CAACP,MAAM,CAAC,UAACQ,KAAK,EAAEC,GAAG;QAAA,OAAKD,KAAK,GAAGC,GAAG,CAACC,KAAK,CAACzB,YAAY,CAACL,MAAM;SAAE,CAAC,CAAC;MACtF,IAAM+B,KAAK,GAAGP,CAAC,CAACG,KAAK,CAACP,MAAM,CAAC,UAACQ,KAAK,EAAEC,GAAG;QAAA,OAAKD,KAAK,GAAGC,GAAG,CAACC,KAAK,CAACzB,YAAY,CAACL,MAAM;SAAE,CAAC,CAAC;MACtF,OAAO0B,KAAK,GAAGK,KAAK;;;IAGtB,IAAIR,CAAC,CAACxF,WAAW,CAACiG,QAAQ,CAACR,CAAC,CAACzF,WAAW,CAAC,EAAE;MACzC,OAAO,CAAC,CAAC;KACV,MAAM;MACL,OAAO,CAAC;;GAEX,MAAM;;IAEL,IAAIwF,CAAC,CAACpF,YAAY,CAAC6F,QAAQ,CAACR,CAAC,CAACrF,YAAY,CAAC,EAAE;MAC3C,OAAO,CAAC;KACT,MAAM;MACL,OAAO,CAAC,CAAC;;;AAGf;AASA;;;;;;;;;;;;AAYA,IAAa8F,KAAK;;;;;;EAkShB,SAAAA,MAAApI,IAAA;QACEqI,MAAM,GAAArI,IAAA,CAANqI,MAAM;MACNC,SAAS,GAAAtI,IAAA,CAATsI,SAAS;IAST,IAAMxE,aAAa,GAAGuE,MAAM,CAAC,CAAC,CAAC,CAACnG,WAAW,CAACb,QAAQ;IACpD,IAAMkB,cAAc,GAAG8F,MAAM,CAAC,CAAC,CAAC,CAAC/F,YAAY,CAACjB,QAAQ;IACtD,CACEgH,MAAM,CAAChC,KAAK,CAAC,UAAA1F,KAAA;MAAA,IAAGsH,KAAK,GAAAtH,KAAA,CAALsH,KAAK;MAAA,OAAOnE,aAAa,CAACxC,MAAM,CAAC2G,KAAK,CAAChC,KAAK,CAAC;MAAC,GAAAhJ,CADhEC,SAAS,QAEP,sBAAsB;IAExB,CACEmL,MAAM,CAAChC,KAAK,CAAC,UAAAvF,KAAA;MAAA,IAAGmH,KAAK,GAAAnH,KAAA,CAALmH,KAAK;MAAA,OAAO1F,cAAc,CAACjB,MAAM,CAAC2G,KAAK,CAAC/B,MAAM,CAAC;MAAC,GAAAjJ,CADlEC,SAAS,QAEP,uBAAuB;IAGzB,IAAMqL,QAAQ,GAAGF,MAAM,CAACG,GAAG,CAAC,UAAAC,KAAA;MAAA,IAAGR,KAAK,GAAAQ,KAAA,CAALR,KAAK;MAAA,OAAOA,KAAK,CAACjC,KAAK,CAACG,MAAM;MAAC,CAACoB,MAAM,CAAC,UAACQ,KAAK,EAAEC,GAAG;MAAA,OAAKD,KAAK,GAAGC,GAAG;OAAE,CAAC,CAAC;IACrG,IAAMU,SAAS,GAAG,IAAIC,GAAG,EAAU;IACnC,SAAAlC,SAAA,GAAAC,+BAAA,CAAwB2B,MAAM,GAAAzB,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAAnBoB,KAAK,GAAArB,KAAA,CAAAG,KAAA,CAALkB,KAAK;MAChB,SAAAW,UAAA,GAAAlC,+BAAA,CAAmBuB,KAAK,CAACjC,KAAK,GAAA6C,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAA/B,IAAA,GAAE;QAAA,IAArBpB,IAAI,GAAAoD,MAAA,CAAA9B,KAAA;QACb2B,SAAS,CAACI,GAAG,CAAC9J,IAAI,CAAC0B,SAAS,CAAC+E,IAAI,CAACxF,SAAS,EAAEwF,IAAI,CAACvF,SAAS,EAAEuF,IAAI,CAACxG,GAAG,EAAEwG,IAAI,CAACvG,WAAW,EAAEuG,IAAI,CAACtG,KAAK,CAAC,CAAC;;;IAIzG,EAAUoJ,QAAQ,KAAKG,SAAS,CAACK,IAAI,IAAA9L,CAArCC,SAAS,QAA8B,kBAAkB;IAEzD,IAAI,CAAC4K,KAAK,GAAGO,MAAM;IACnB,IAAI,CAACC,SAAS,GAAGA,SAAS;;;;;;;;;;;;;;;;;EA1M5BF,KAAA,CAQoBY,OAAO;;EAAA;IAAA,IAAAC,QAAA,gBAAAnH,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAAC,QACLgG,KAA6B,EAC7BiB,QAAgC;MAAA,OAAAnH,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAA,OAAAF,QAAA,CAAAO,MAAA,WAEzBmF,KAAK,CAACe,SAAS,CAAClB,KAAK,EAAEiB,QAAQ,EAAEE,iBAAS,CAACC,WAAW,CAAC;UAAA;UAAA;YAAA,OAAA3G,QAAA,CAAAW,IAAA;;SAAApB,OAAA;KAC/D;IAAA,SALmB+G,OAAOA,CAAA1F,EAAA,EAAAC,GAAA;MAAA,OAAA0F,QAAA,CAAAzF,KAAA,OAAAC,SAAA;;IAAA,OAAPuF,OAAO;;;;;;;;;;;EAO3BZ,KAAA,CAQoBkB,QAAQ;;EAAA;IAAA,IAAAC,SAAA,gBAAAzH,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAArB,SAAA4B,SACLqE,KAA6B,EAC7BuB,SAAkC;MAAA,OAAAzH,mBAAA,GAAAS,IAAA,UAAAuB,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAArB,IAAA,GAAAqB,SAAA,CAAApB,IAAA;UAAA;YAAA,OAAAoB,SAAA,CAAAf,MAAA,WAE3BmF,KAAK,CAACe,SAAS,CAAClB,KAAK,EAAEuB,SAAS,EAAEJ,iBAAS,CAACK,YAAY,CAAC;UAAA;UAAA;YAAA,OAAAzF,SAAA,CAAAX,IAAA;;SAAAO,QAAA;KACjE;IAAA,SALmB0F,QAAQA,CAAArF,GAAA,EAAAC,GAAA;MAAA,OAAAqF,SAAA,CAAA/F,KAAA,OAAAC,SAAA;;IAAA,OAAR6F,QAAQ;;;;;;;;;;;;;EAO5BlB,KAAA,CAUoBe,SAAS;;EAAA;IAAA,IAAAO,UAAA,gBAAA5H,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAtB,SAAAoC,SACL6D,KAA6B,EAC7BzC,MAAmG,EACnG8C,SAAqB;MAAA,IAAApG,WAAA,EAAAI,YAAA,EAAAqH,WAAA,EAAA3C,CAAA,EAAAvB,IAAA,EAAAmE,qBAAA,EAAAC,YAAA,EAAAC,EAAA,EAAAC,KAAA,EAAAC,qBAAA;MAAA,OAAAjI,mBAAA,GAAAS,IAAA,UAAA8B,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA5B,IAAA,GAAA4B,SAAA,CAAA3B,IAAA;UAAA;YAAA,MAIjB0F,SAAS,KAAKc,iBAAS,CAACC,WAAW;cAAA9E,SAAA,CAAA3B,IAAA;cAAA;;YACrC,CAAU4C,MAAM,CAACnE,QAAQ,CAACC,MAAM,CAAC2G,KAAK,CAAChC,KAAK,CAAC,GAAAhJ,CAA7CC,SAAS,QAAsC,OAAO;;YAElDyM,WAAW,GAA6BpE,sBAAsB,CAACC,MAAM,EAAEyC,KAAK,CAACjC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjFgB,CAAC,GAAG,CAAC;UAAA;YAAA,MAAEA,CAAC,GAAGiB,KAAK,CAACjC,KAAK,CAACG,MAAM;cAAA5B,SAAA,CAAA3B,IAAA;cAAA;;YAC9B6C,IAAI,GAAGwC,KAAK,CAACjC,KAAK,CAACgB,CAAC,CAAC;YAAAzC,SAAA,CAAA3B,IAAA;YAAA,OACJ6C,IAAI,CAAC7D,eAAe,CAAC+H,WAAW,CAAC;UAAA;YAAAC,qBAAA,GAAArF,SAAA,CAAAxB,IAAA;YAAtD4G,WAAW,GAAAC,qBAAA;UAAA;YAFyB5C,CAAC,EAAE;YAAAzC,SAAA,CAAA3B,IAAA;YAAA;UAAA;YAI3CV,WAAW,GAAGgB,sBAAc,CAACwC,oBAAoB,CAACuC,KAAK,CAAChC,KAAK,EAAET,MAAM,CAACI,SAAS,EAAEJ,MAAM,CAACK,WAAW,CAAC;YACpGvD,YAAY,GAAGY,sBAAc,CAACwC,oBAAoB,CAACuC,KAAK,CAAC/B,MAAM,EAAEyD,WAAW,CAAC/D,SAAS,EAAE+D,WAAW,CAAC9D,WAAW,CAAC;YAAAtB,SAAA,CAAA3B,IAAA;YAAA;UAAA;YAEhH,CAAU4C,MAAM,CAACnE,QAAQ,CAACC,MAAM,CAAC2G,KAAK,CAAC/B,MAAM,CAAC,GAAAjJ,CAA9CC,SAAS,QAAuC,QAAQ;;YAEpDyM,YAAW,GAA6BpE,sBAAsB,CAACC,MAAM,EAAEyC,KAAK,CAACjC,KAAK,CAACiC,KAAK,CAACjC,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,CAAC;YACtGa,EAAC,GAAGiB,KAAK,CAACjC,KAAK,CAACG,MAAM,GAAG,CAAC;UAAA;YAAA,MAAEa,EAAC,IAAI,CAAC;cAAAzC,SAAA,CAAA3B,IAAA;cAAA;;YACnC6C,KAAI,GAAGwC,KAAK,CAACjC,KAAK,CAACgB,EAAC,CAAC;YAAAzC,SAAA,CAAA3B,IAAA;YAAA,OACJ6C,KAAI,CAAC/B,cAAc,CAACiG,YAAW,CAAC;UAAA;YAAAK,qBAAA,GAAAzF,SAAA,CAAAxB,IAAA;YAArD4G,YAAW,GAAAK,qBAAA;UAAA;YAF8BhD,EAAC,EAAE;YAAAzC,SAAA,CAAA3B,IAAA;YAAA;UAAA;YAIhDV,WAAW,GAAGgB,sBAAc,CAACwC,oBAAoB,CAACuC,KAAK,CAAChC,KAAK,EAAE0D,YAAW,CAAC/D,SAAS,EAAE+D,YAAW,CAAC9D,WAAW,CAAC;YAC9GvD,YAAY,GAAGY,sBAAc,CAACwC,oBAAoB,CAACuC,KAAK,CAAC/B,MAAM,EAAEV,MAAM,CAACI,SAAS,EAAEJ,MAAM,CAACK,WAAW,CAAC;UAAA;YAAA,OAAAtB,SAAA,CAAAtB,MAAA,WAGjG,IAAImF,KAAK,CAAC;cACfC,MAAM,EAAE,CAAC;gBAAEnG,WAAW,EAAXA,WAAW;gBAAEI,YAAY,EAAZA,YAAY;gBAAE2F,KAAK,EAALA;eAAO,CAAC;cAC9CK,SAAS,EAATA;aACD,CAAC;UAAA;UAAA;YAAA,OAAA/D,SAAA,CAAAlB,IAAA;;SAAAe,QAAA;KACH;IAAA,SAjCmB+E,SAASA,CAAAxE,GAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAA6E,UAAA,CAAAlG,KAAA,OAAAC,SAAA;;IAAA,OAAT0F,SAAS;;;;;;;;;;;;;EAmC7Bf,KAAA,CAUoB6B,UAAU;;EAAA;IAAA,IAAAC,WAAA,gBAAApI,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAvB,SAAAmI,SACL9B,MAGG,EACHC,SAAqB;MAAA,IAAAR,KAAA;MAAA,OAAA/F,mBAAA,GAAAS,IAAA,UAAA4H,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA1H,IAAA,GAAA0H,SAAA,CAAAzH,IAAA;UAAA;YAAAyH,SAAA,CAAAzH,IAAA;YAAA,OAMT0H,OAAO,CAACC,GAAG,CACrBlC,MAAM,CAACG,GAAG;cAAA,IAAAgC,KAAA,GAAA1I,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAyI,SAAAC,KAAA;gBAAA,IAAAlF,MAAA,EAAAyC,KAAA,EAAA0C,KAAA;gBAAA,OAAA5I,mBAAA,GAAAS,IAAA,UAAAoI,UAAAC,SAAA;kBAAA,kBAAAA,SAAA,CAAAlI,IAAA,GAAAkI,SAAA,CAAAjI,IAAA;oBAAA;sBAAS4C,MAAM,GAAAkF,KAAA,CAANlF,MAAM,EAAEyC,KAAK,GAAAyC,KAAA,CAALzC,KAAK;sBAAA4C,SAAA,CAAAjI,IAAA;sBAAA,OACXwF,KAAK,CAACe,SAAS,CAAClB,KAAK,EAAEzC,MAAM,EAAE8C,SAAS,CAAC;oBAAA;sBAAvDqC,KAAK,GAAAE,SAAA,CAAA9H,IAAA;sBAAA,OAAA8H,SAAA,CAAA5H,MAAA,WACJ0H,KAAK,CAAC7C,KAAK,CAAC,CAAC,CAAC;oBAAA;oBAAA;sBAAA,OAAA+C,SAAA,CAAAxH,IAAA;;mBAAAoH,QAAA;eACtB;cAAA,iBAAAK,IAAA;gBAAA,OAAAN,KAAA,CAAAhH,KAAA,OAAAC,SAAA;;gBAAC,CACH;UAAA;YATKqE,KAAK,GAAAuC,SAAA,CAAAtH,IAAA;YAAA,OAAAsH,SAAA,CAAApH,MAAA,WAWJ,IAAImF,KAAK,CAAC;cACfC,MAAM,EAAEP,KAAK;cACbQ,SAAS,EAATA;aACD,CAAC;UAAA;UAAA;YAAA,OAAA+B,SAAA,CAAAhH,IAAA;;SAAA8G,QAAA;KACH;IAAA,SAtBmBF,UAAUA,CAAAc,GAAA,EAAAC,GAAA;MAAA,OAAAd,WAAA,CAAA1G,KAAA,OAAAC,SAAA;;IAAA,OAAVwG,UAAU;;;;;;;;;;;;EAwB9B7B,KAAA,CASc6C,oBAAoB,GAA3B,SAAOA,oBAAoBA,CAIhCC,oBAKD;IACC,OAAO,IAAI9C,KAAK,CAAA+C,QAAA,KACXD,oBAAoB;MACvB7C,MAAM,EAAE,CACN;QACEnG,WAAW,EAAEgJ,oBAAoB,CAAChJ,WAAW;QAC7CI,YAAY,EAAE4I,oBAAoB,CAAC5I,YAAY;QAC/C2F,KAAK,EAAEiD,oBAAoB,CAACjD;OAC7B;MAEJ,CAAC;;;;;;;;;;;EAGJG,KAAA,CAScgD,sCAAsC,GAA7C,SAAOA,sCAAsCA,CAIlDF,oBAOD;IACC,OAAO,IAAI9C,KAAK,CAAC8C,oBAAoB,CAAC;;;;;;;EA4CxC,IAAAhK,MAAA,GAAAkH,KAAA,CAAAjH,SAAA;EAAAD,MAAA,CAKOmK,gBAAgB,GAAhB,SAAAA,gBAAgBA,CAACC,iBAA0B,EAAE9B,SAAS;QAATA,SAAS;MAATA,SAAS,GAAG,IAAI,CAAClH,YAAY;;IAC/E,CAAU,CAACgJ,iBAAiB,CAACnD,QAAQ,CAAC1K,IAAI,CAAC,GAAAR,CAA3CC,SAAS,QAAoC,oBAAoB;IACjE,IAAI,IAAI,CAACoL,SAAS,KAAKc,iBAAS,CAACK,YAAY,EAAE;MAC7C,OAAOD,SAAS;KACjB,MAAM;MACL,IAAM+B,yBAAyB,GAAG,IAAIC,gBAAQ,CAAC9N,GAAG,CAAC,CAChDoL,GAAG,CAACwC,iBAAiB,CAAC,CACtBG,MAAM,EAAE,CACRrI,QAAQ,CAACoG,SAAS,CAAC1G,QAAQ,CAAC,CAACA,QAAQ;MACxC,OAAOI,sBAAc,CAACC,aAAa,CAACqG,SAAS,CAACnI,QAAQ,EAAEkK,yBAAyB,CAAC;;;;;;;;EAItFrK,MAAA,CAKOwK,eAAe,GAAf,SAAAA,eAAeA,CAACJ,iBAA0B,EAAEpC,QAAQ;QAARA,QAAQ;MAARA,QAAQ,GAAG,IAAI,CAAChH,WAAW;;IAC5E,CAAU,CAACoJ,iBAAiB,CAACnD,QAAQ,CAAC1K,IAAI,CAAC,GAAAR,CAA3CC,SAAS,QAAoC,oBAAoB;IACjE,IAAI,IAAI,CAACoL,SAAS,KAAKc,iBAAS,CAACC,WAAW,EAAE;MAC5C,OAAOH,QAAQ;KAChB,MAAM;MACL,IAAMyC,wBAAwB,GAAG,IAAIH,gBAAQ,CAAC9N,GAAG,CAAC,CAACoL,GAAG,CAACwC,iBAAiB,CAAC,CAAClI,QAAQ,CAAC8F,QAAQ,CAACpG,QAAQ,CAAC,CAACA,QAAQ;MAC9G,OAAOI,sBAAc,CAACC,aAAa,CAAC+F,QAAQ,CAAC7H,QAAQ,EAAEsK,wBAAwB,CAAC;;;;;;;;EAIpFzK,MAAA,CAKO0K,mBAAmB,GAAnB,SAAAA,mBAAmBA,CAACN,iBAA0B;IACnD,OAAO,IAAInG,aAAK,CACd,IAAI,CAACjD,WAAW,CAACb,QAAQ,EACzB,IAAI,CAACiB,YAAY,CAACjB,QAAQ,EAC1B,IAAI,CAACqK,eAAe,CAACJ,iBAAiB,CAAC,CAACxI,QAAQ,EAChD,IAAI,CAACuI,gBAAgB,CAACC,iBAAiB,CAAC,CAACxI,QAAQ,CAClD;;;;;;;;;;;;;;;;;EAGHsF,KAAA,CAeoByD,gBAAgB;;EAAA;IAAA,IAAAC,iBAAA,gBAAAhK,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAA7B,SAAA+J,SACL/F,KAAa,EACbgG,gBAAwC,EACxCC,WAAoB,EAAAC,KAAA;;IAGpBC,cACAC,cACAC;;;;;uCAJuD,EAAE,GAAAH,KAAA,EAAAI,mBAAA,GAAAC,KAAA,CAAvDC,aAAa,EAAbA,aAAa,GAAAF,mBAAA,cAAG,CAAC,GAAAA,mBAAA,EAAAG,aAAA,GAAAF,KAAA,CAAEG,OAAO,EAAPA,OAAO,GAAAD,aAAA,cAAG,CAAC,GAAAA,aAAA;YAAA,IAEhCN;cAAAA,eAAuB,EAAE;;YAAA,IACzBC;cAAAA,eAAyCJ,gBAAgB;;YAAA,IACzDK;cAAAA,aAA8D,EAAE;;YAEhE,EAAUrG,KAAK,CAACG,MAAM,GAAG,CAAC,IAAAlJ,CAA1BC,SAAS,QAAmB,OAAO;YACnC,EAAUwP,OAAO,GAAG,CAAC,IAAAzP,CAArBC,SAAS,QAAc,UAAU;YACjC,EAAU8O,gBAAgB,KAAKI,YAAY,IAAID,YAAY,CAAChG,MAAM,GAAG,CAAC,IAAAlJ,CAAtEC,SAAS,QAA+D,mBAAmB;YAErFgM,QAAQ,GAAGkD,YAAY;YACpBpF,CAAC,GAAG,CAAC;UAAA;YAAA,MAAEA,CAAC,GAAGhB,KAAK,CAACG,MAAM;cAAAwG,SAAA,CAAA/J,IAAA;cAAA;;YACxB6C,IAAI,GAAGO,KAAK,CAACgB,CAAC,CAAC;YACrB,MACI,CAACvB,IAAI,CAACxF,SAAS,CAACqB,MAAM,CAAC4H,QAAQ,CAAC7H,QAAQ,CAAC,IAAI,CAACoE,IAAI,CAACvF,SAAS,CAACoB,MAAM,CAAC4H,QAAQ,CAAC7H,QAAQ,CAAC;cAAAsL,SAAA,CAAA/J,IAAA;cAAA;;YAAA,OAAA+J,SAAA,CAAA1J,MAAA;UAAA;YAEtFuG,SAA2C;YAAAmD,SAAA,CAAAhK,IAAA;YAE5CgK,SAAA,CAAA/J,IAAA;YAAA,OAAoB6C,IAAI,CAAC7D,eAAe,CAACsH,QAAQ,CAAC;UAAA;YAAA0D,sBAAA,GAAAD,SAAA,CAAA5J,IAAA;YAAjDyG,SAAS,GAAAoD,sBAAA;YAAAD,SAAA,CAAA/J,IAAA;YAAA;UAAA;YAAA+J,SAAA,CAAAhK,IAAA;YAAAgK,SAAA,CAAAE,EAAA,GAAAF,SAAA;YAAA,KAGNA,SAAA,CAAAE,EAAA,CAAcC,8BAA8B;cAAAH,SAAA,CAAA/J,IAAA;cAAA;;YAAA,OAAA+J,SAAA,CAAA1J,MAAA;UAAA;YAAA,MAAA0J,SAAA,CAAAE,EAAA;UAAA;YAAA,KAM/CrD,SAAS,CAACnI,QAAQ,CAACC,MAAM,CAAC2K,WAAW,CAAC;cAAAU,SAAA,CAAA/J,IAAA;cAAA;;YAAA+J,SAAA,CAAAI,EAAA,GACxCC,oBAAY;YAAAL,SAAA,CAAAM,EAAA,GACVZ,UAAU;YAAAM,SAAA,CAAA/J,IAAA;YAAA,OACJwF,KAAK,CAACe,SAAS,CACnB,IAAIpD,KAAK,IAAAmH,MAAA,CAAKf,YAAY,GAAE1G,IAAI,IAAGuG,gBAAgB,CAAC3K,QAAQ,EAAE4K,WAAW,CAAC,EAC1ED,gBAAgB,EAChB5C,iBAAS,CAACC,WAAW,CACtB;UAAA;YAAAsD,SAAA,CAAAQ,EAAA,GAAAR,SAAA,CAAA5J,IAAA;YAAA4J,SAAA,CAAAS,EAAA,GACDZ,aAAa;YAAAG,SAAA,CAAAU,EAAA,GACb5F,eAAe;YAAA,IAAAkF,SAAA,CAAAI,EAAA,EAAAJ,SAAA,CAAAM,EAAA,EAAAN,SAAA,CAAAQ,EAAA,EAAAR,SAAA,CAAAS,EAAA,EAAAT,SAAA,CAAAU,EAAA;YAAAV,SAAA,CAAA/J,IAAA;YAAA;UAAA;YAAA,MAER8J,OAAO,GAAG,CAAC,IAAI1G,KAAK,CAACG,MAAM,GAAG,CAAC;cAAAwG,SAAA,CAAA/J,IAAA;cAAA;;YAClC0K,sBAAsB,GAAGtH,KAAK,CAACsB,KAAK,CAAC,CAAC,EAAEN,CAAC,CAAC,CAACkG,MAAM,CAAClH,KAAK,CAACsB,KAAK,CAACN,CAAC,GAAG,CAAC,EAAEhB,KAAK,CAACG,MAAM,CAAC,CAAC;YAEzFwG,SAAA,CAAA/J,IAAA;YAAA,OACMwF,KAAK,CAACyD,gBAAgB,CAC1ByB,sBAAsB,EACtBtB,gBAAgB,EAChBC,WAAW,EACX;cACEO,aAAa,EAAbA,aAAa;cACbE,OAAO,EAAEA,OAAO,GAAG;aACpB,KAAAQ,MAAA,CACGf,YAAY,GAAE1G,IAAI,IACtB+D,SAAS,EACT6C,UAAU,CACX;UAAA;YA1C6BrF,CAAC,EAAE;YAAA2F,SAAA,CAAA/J,IAAA;YAAA;UAAA;YAAA,OAAA+J,SAAA,CAAA1J,MAAA,WA6C9BoJ,UAAU;UAAA;UAAA;YAAA,OAAAM,SAAA,CAAAtJ,IAAA;;SAAA0I,QAAA;KAClB;IAAA,SA7DmBF,gBAAgBA,CAAA0B,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;MAAA,OAAA/B,iBAAA,CAAAtI,KAAA,OAAAC,SAAA;;IAAA,OAAhBoI,gBAAgB;;;;;;;;;;;;;;;;;;;EA+DpCzD,KAAA,CAgBoB0F,iBAAiB;;EAAA;IAAA,IAAAC,kBAAA,gBAAAjM,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAA9B,SAAAgM,SACLhI,KAAa,EACbiI,UAAkB,EAClBC,iBAA0C,EAAAC,MAAA;;IAG1ChC,cACAiC,eACA/B;;;;;wCAJuD,EAAE,GAAA8B,MAAA,EAAAE,mBAAA,GAAAC,KAAA,CAAvD9B,aAAa,EAAbA,aAAa,GAAA6B,mBAAA,cAAG,CAAC,GAAAA,mBAAA,EAAAE,aAAA,GAAAD,KAAA,CAAE5B,OAAO,EAAPA,OAAO,GAAA6B,aAAA,cAAG,CAAC,GAAAA,aAAA;YAAA,IAEhCpC;cAAAA,eAAuB,EAAE;;YAAA,IACzBiC;cAAAA,gBAA0CF,iBAAiB;;YAAA,IAC3D7B;cAAAA,aAA+D,EAAE;;YAEjE,EAAUrG,KAAK,CAACG,MAAM,GAAG,CAAC,IAAAlJ,CAA1BC,SAAS,QAAmB,OAAO;YACnC,EAAUwP,OAAO,GAAG,CAAC,IAAAzP,CAArBC,SAAS,QAAc,UAAU;YACjC,EAAUgR,iBAAiB,KAAKE,aAAa,IAAIjC,YAAY,CAAChG,MAAM,GAAG,CAAC,IAAAlJ,CAAxEC,SAAS,QAAiE,mBAAmB;YAEvFsM,SAAS,GAAG4E,aAAa;YACtBpH,CAAC,GAAG,CAAC;UAAA;YAAA,MAAEA,CAAC,GAAGhB,KAAK,CAACG,MAAM;cAAAqI,SAAA,CAAA5L,IAAA;cAAA;;YACxB6C,IAAI,GAAGO,KAAK,CAACgB,CAAC,CAAC;YACrB,MACI,CAACvB,IAAI,CAACxF,SAAS,CAACqB,MAAM,CAACkI,SAAS,CAACnI,QAAQ,CAAC,IAAI,CAACoE,IAAI,CAACvF,SAAS,CAACoB,MAAM,CAACkI,SAAS,CAACnI,QAAQ,CAAC;cAAAmN,SAAA,CAAA5L,IAAA;cAAA;;YAAA,OAAA4L,SAAA,CAAAvL,MAAA;UAAA;YAExFiG,QAA0C;YAAAsF,SAAA,CAAA7L,IAAA;YAE3C6L,SAAA,CAAA5L,IAAA;YAAA,OAAmB6C,IAAI,CAAC/B,cAAc,CAAC8F,SAAS,CAAC;UAAA;YAAAiF,qBAAA,GAAAD,SAAA,CAAAzL,IAAA;YAAhDmG,QAAQ,GAAAuF,qBAAA;YAAAD,SAAA,CAAA5L,IAAA;YAAA;UAAA;YAAA4L,SAAA,CAAA7L,IAAA;YAAA6L,SAAA,CAAA3B,EAAA,GAAA2B,SAAA;YAAA,KAGLA,SAAA,CAAA3B,EAAA,CAAc6B,2BAA2B;cAAAF,SAAA,CAAA5L,IAAA;cAAA;;YAAA,OAAA4L,SAAA,CAAAvL,MAAA;UAAA;YAAA,MAAAuL,SAAA,CAAA3B,EAAA;UAAA;YAAA,KAM5C3D,QAAQ,CAAC7H,QAAQ,CAACC,MAAM,CAAC2M,UAAU,CAAC;cAAAO,SAAA,CAAA5L,IAAA;cAAA;;YAAA4L,SAAA,CAAAzB,EAAA,GACtCC,oBAAY;YAAAwB,SAAA,CAAAvB,EAAA,GACVZ,UAAU;YAAAmC,SAAA,CAAA5L,IAAA;YAAA,OACJwF,KAAK,CAACe,SAAS,CACnB,IAAIpD,KAAK,EAAEN,IAAI,EAAAyH,MAAA,CAAKf,YAAY,GAAG8B,UAAU,EAAEC,iBAAiB,CAAC7M,QAAQ,CAAC,EAC1E6M,iBAAiB,EACjB9E,iBAAS,CAACK,YAAY,CACvB;UAAA;YAAA+E,SAAA,CAAArB,EAAA,GAAAqB,SAAA,CAAAzL,IAAA;YAAAyL,SAAA,CAAApB,EAAA,GACDZ,aAAa;YAAAgC,SAAA,CAAAnB,EAAA,GACb5F,eAAe;YAAA,IAAA+G,SAAA,CAAAzB,EAAA,EAAAyB,SAAA,CAAAvB,EAAA,EAAAuB,SAAA,CAAArB,EAAA,EAAAqB,SAAA,CAAApB,EAAA,EAAAoB,SAAA,CAAAnB,EAAA;YAAAmB,SAAA,CAAA5L,IAAA;YAAA;UAAA;YAAA,MAER8J,OAAO,GAAG,CAAC,IAAI1G,KAAK,CAACG,MAAM,GAAG,CAAC;cAAAqI,SAAA,CAAA5L,IAAA;cAAA;;YAClC0K,sBAAsB,GAAGtH,KAAK,CAACsB,KAAK,CAAC,CAAC,EAAEN,CAAC,CAAC,CAACkG,MAAM,CAAClH,KAAK,CAACsB,KAAK,CAACN,CAAC,GAAG,CAAC,EAAEhB,KAAK,CAACG,MAAM,CAAC,CAAC;YAEzFqI,SAAA,CAAA5L,IAAA;YAAA,OACMwF,KAAK,CAAC0F,iBAAiB,CAC3BR,sBAAsB,EACtBW,UAAU,EACVC,iBAAiB,EACjB;cACE1B,aAAa,EAAbA,aAAa;cACbE,OAAO,EAAEA,OAAO,GAAG;aACpB,GACAjH,IAAI,EAAAyH,MAAA,CAAKf,YAAY,GACtBjD,QAAQ,EACRmD,UAAU,CACX;UAAA;YA1C6BrF,CAAC,EAAE;YAAAwH,SAAA,CAAA5L,IAAA;YAAA;UAAA;YAAA,OAAA4L,SAAA,CAAAvL,MAAA,WA8C9BoJ,UAAU;UAAA;UAAA;YAAA,OAAAmC,SAAA,CAAAnL,IAAA;;SAAA2K,QAAA;KAClB;IAAA,SA9DmBF,iBAAiBA,CAAAa,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;MAAA,OAAAlB,kBAAA,CAAAvK,KAAA,OAAAC,SAAA;;IAAA,OAAjBqK,iBAAiB;;EAAA,OAAAhJ,YAAA,CAAAsD,KAAA;IAAArD,GAAA;IAAAC,GAAA,EA3crC,SAAAA;MACE,EAAU,IAAI,CAAC8C,KAAK,CAAC3B,MAAM,KAAK,CAAC,IAAAlJ,CAAjCC,SAAS,QAA0B,iBAAiB;MACpD,OAAO,IAAI,CAAC4K,KAAK,CAAC,CAAC,CAAC,CAACG,KAAK;;;;;;IAwB5BlD,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,IAAI,IAAI,CAACkK,YAAY,EAAE;QACrB,OAAO,IAAI,CAACA,YAAY;;MAG1B,IAAMpL,aAAa,GAAG,IAAI,CAACgE,KAAK,CAAC,CAAC,CAAC,CAAC5F,WAAW,CAACb,QAAQ;MACxD,IAAM8N,oBAAoB,GAAG,IAAI,CAACrH,KAAK,CACpCU,GAAG,CAAC,UAAA4G,KAAA;QAAA,IAAGlN,WAAW,GAAAkN,KAAA,CAAXlN,WAAW;QAAA,OAAOA,WAAW;QAAC,CACrCqF,MAAM,CAAC,UAACQ,KAAK,EAAEC,GAAG;QAAA,OAAKD,KAAK,CAACe,GAAG,CAACd,GAAG,CAAC;SAAE9E,sBAAc,CAACC,aAAa,CAACW,aAAa,EAAE,CAAC,CAAC,CAAC;MAEzF,IAAI,CAACoL,YAAY,GAAGC,oBAAoB;MACxC,OAAO,IAAI,CAACD,YAAY;;;;;;IAS1BnK,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,IAAI,IAAI,CAACqK,aAAa,EAAE;QACtB,OAAO,IAAI,CAACA,aAAa;;MAG3B,IAAM9M,cAAc,GAAG,IAAI,CAACuF,KAAK,CAAC,CAAC,CAAC,CAACxF,YAAY,CAACjB,QAAQ;MAC1D,IAAMiO,qBAAqB,GAAG,IAAI,CAACxH,KAAK,CACrCU,GAAG,CAAC,UAAA+G,MAAA;QAAA,IAAGjN,YAAY,GAAAiN,MAAA,CAAZjN,YAAY;QAAA,OAAOA,YAAY;QAAC,CACvCiF,MAAM,CAAC,UAACQ,KAAK,EAAEC,GAAG;QAAA,OAAKD,KAAK,CAACe,GAAG,CAACd,GAAG,CAAC;SAAE9E,sBAAc,CAACC,aAAa,CAACZ,cAAc,EAAE,CAAC,CAAC,CAAC;MAE1F,IAAI,CAAC8M,aAAa,GAAGC,qBAAqB;MAC1C,OAAO,IAAI,CAACD,aAAa;;;;;;IAS3BtK,GAAA;IAAAC,GAAA,EAGA,SAAAA;;MACE,QAAAwK,qBAAA,GACE,IAAI,CAACC,eAAe,YAAAD,qBAAA,GACnB,IAAI,CAACC,eAAe,GAAG,IAAItK,aAAK,CAC/B,IAAI,CAACjD,WAAW,CAACb,QAAQ,EACzB,IAAI,CAACiB,YAAY,CAACjB,QAAQ,EAC1B,IAAI,CAACa,WAAW,CAACY,QAAQ,EACzB,IAAI,CAACR,YAAY,CAACQ,QAAQ,CAC3B;;;;;;IAULiC,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,IAAI,IAAI,CAAC0K,YAAY,EAAE;QACrB,OAAO,IAAI,CAACA,YAAY;;MAG1B,IAAIC,gBAAgB,GAAGzM,sBAAc,CAACC,aAAa,CAAC,IAAI,CAACb,YAAY,CAACjB,QAAQ,EAAE,CAAC,CAAC;MAClF,SAAAuO,UAAA,GAAAlJ,+BAAA,CAAqC,IAAI,CAACoB,KAAK,GAAA+H,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAA/I,IAAA,GAAE;QAAA,IAAAiJ,YAAA,GAAAD,MAAA,CAAA9I,KAAA;UAApCkB,KAAK,GAAA6H,YAAA,CAAL7H,KAAK;UAAE/F,WAAW,GAAA4N,YAAA,CAAX5N,WAAW;QAC7B,IAAM6N,QAAQ,GAAG9H,KAAK,CAAC8H,QAAQ;QAC/BJ,gBAAgB,GAAGA,gBAAgB,CAAC7G,GAAG,CAACiH,QAAQ,CAACC,KAAK,CAAC9N,WAAW,CAAC,CAAC;;MAGtE,IAAM+N,WAAW,GAAGN,gBAAgB,CAACO,QAAQ,CAAC,IAAI,CAAC5N,YAAY,CAAC,CAAC6N,MAAM,CAACR,gBAAgB,CAAC;MACzF,IAAI,CAACD,YAAY,GAAG,IAAIU,eAAO,CAACH,WAAW,CAACrK,SAAS,EAAEqK,WAAW,CAACpK,WAAW,CAAC;MAE/E,OAAO,IAAI,CAAC6J,YAAY;;;AACzB;;AClLH;;;;;AAMA;;;;;;;AAOA,SAAgBW,WAAWA,CAACC,YAAsB,EAAEC,aAAuB,EAAEC,IAAY;EACvF,IAAMpR,YAAY,GAAGO,cAAQ,CAACC,kBAAkB,CAAC4Q,IAAI,CAAC;EAEtD,IAAMC,SAAS,GAAGlT,IAAI,CAAC6F,QAAQ,CAAChE,YAAY,EAAEA,YAAY,CAAC;EAE3D,OAAOpF,WAAW,CAACsW,YAAY,EAAEC,aAAa,CAAC,GAC3C,IAAIpL,aAAK,CAACmL,YAAY,EAAEC,aAAa,EAAEzS,IAAI,EAAE2S,SAAS,CAAC,GACvD,IAAItL,aAAK,CAACmL,YAAY,EAAEC,aAAa,EAAEE,SAAS,EAAE3S,IAAI,CAAC;AAC7D;AAEA;;;;;AAKA,SAAgB4S,kBAAkBA,CAACrJ,KAAgC;EACjE,IAAMsJ,MAAM,GAAG3W,WAAW,CAACqN,KAAK,CAACiJ,YAAY,EAAEjJ,KAAK,CAACkJ,aAAa,CAAC;EAEnE,IAAMnR,YAAY,GAAGuR,MAAM,GACvBC,wBAAkB,CAACvJ,KAAK,CAACzB,SAAS,EAAEyB,KAAK,CAACxB,WAAW,CAAC,GACtD+K,wBAAkB,CAACvJ,KAAK,CAACxB,WAAW,EAAEwB,KAAK,CAACzB,SAAS,CAAC;EAE1D,IAAI4K,IAAI,GAAG7Q,cAAQ,CAACkR,kBAAkB,CAACzR,YAAY,CAAC;EACpD,IAAM0R,aAAa,GAAGT,WAAW,CAAChJ,KAAK,CAACiJ,YAAY,EAAEjJ,KAAK,CAACkJ,aAAa,EAAEC,IAAI,GAAG,CAAC,CAAC;EACpF,IAAIG,MAAM,EAAE;IACV,IAAI,CAACtJ,KAAK,CAACc,QAAQ,CAAC2I,aAAa,CAAC,EAAE;MAClCN,IAAI,EAAE;;GAET,MAAM;IACL,IAAI,CAACnJ,KAAK,CAAC0J,WAAW,CAACD,aAAa,CAAC,EAAE;MACrCN,IAAI,EAAE;;;EAGV,OAAOA,IAAI;AACb;;ACrCA;;;;;;AAMA,IAAaQ,QAAQ;;;;;;;;EAkBnB,SAAAA,SAAAhR,IAAA;QAAqByF,IAAI,GAAAzF,IAAA,CAAJyF,IAAI;MAAEpG,SAAS,GAAAW,IAAA,CAATX,SAAS;MAAE4R,SAAS,GAAAjR,IAAA,CAATiR,SAAS;MAAEC,SAAS,GAAAlR,IAAA,CAATkR,SAAS;;IAXlD,kBAAa,GAAoC,IAAI;IACrD,kBAAa,GAAoC,IAAI;IACrD,iBAAY,GAAsD,IAAI;IAU5E,EAAUD,SAAS,GAAGC,SAAS,IAAAjU,CAA/BC,SAAS,QAAwB,YAAY;IAC7C,EAAU+T,SAAS,IAAItR,cAAQ,CAACwR,QAAQ,IAAIF,SAAS,GAAGxL,IAAI,CAACvG,WAAW,KAAK,CAAC,IAAAjC,CAA9EC,SAAS,QAAuE,YAAY;IAC5F,EAAUgU,SAAS,IAAIvR,cAAQ,CAACyR,QAAQ,IAAIF,SAAS,GAAGzL,IAAI,CAACvG,WAAW,KAAK,CAAC,IAAAjC,CAA9EC,SAAS,QAAuE,YAAY;IAE5F,IAAI,CAACuI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACwL,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAC7R,SAAS,GAAG9B,IAAI,CAACC,MAAM,CAAC6B,SAAS,CAAC;;;;;EAGzC,IAAA6B,MAAA,GAAA8P,QAAA,CAAA7P,SAAA;;;;;;EA8EAD,MAAA,CAKQmQ,mBAAmB,GAAnB,SAAAA,mBAAmBA,CAAC/F,iBAA0B;IACpD,IAAMgG,UAAU,GAAG,IAAI,CAAC7L,IAAI,CAAC8L,WAAW,CAACC,UAAU,CAACpO,QAAQ,CAAC,IAAIgN,eAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC5E,iBAAiB,CAAC,CAAC;IACxG,IAAMmG,UAAU,GAAG,IAAI,CAAChM,IAAI,CAAC8L,WAAW,CAACC,UAAU,CAACpO,QAAQ,CAACkI,iBAAiB,CAACxC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtF,IAAI4I,iBAAiB,GAAGd,wBAAkB,CAACU,UAAU,CAAC1L,SAAS,EAAE0L,UAAU,CAACzL,WAAW,CAAC;IACxF,IAAItI,IAAI,CAACwC,eAAe,CAAC2R,iBAAiB,EAAE/R,cAAQ,CAACgS,cAAc,CAAC,EAAE;MACpED,iBAAiB,GAAGnU,IAAI,CAACuL,GAAG,CAACnJ,cAAQ,CAACgS,cAAc,EAAEpU,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;;IAEvE,IAAIoU,iBAAiB,GAAGhB,wBAAkB,CAACa,UAAU,CAAC7L,SAAS,EAAE6L,UAAU,CAAC5L,WAAW,CAAC;IACxF,IAAItI,IAAI,CAACuC,kBAAkB,CAAC8R,iBAAiB,EAAEjS,cAAQ,CAACkS,cAAc,CAAC,EAAE;MACvED,iBAAiB,GAAGrU,IAAI,CAAC2S,QAAQ,CAACvQ,cAAQ,CAACkS,cAAc,EAAEtU,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;;IAE5E,OAAO;MACLkU,iBAAiB,EAAjBA,iBAAiB;MACjBE,iBAAiB,EAAjBA;KACD;;;;;;;;;EAGH1Q,MAAA,CAOO4Q,uBAAuB,GAAvB,SAAAA,uBAAuBA,CAACxG,iBAA0B;;;IAGvD,IAAAyG,qBAAA,GAAiD,IAAI,CAACV,mBAAmB,CAAC/F,iBAAiB,CAAC;MAApFsG,iBAAiB,GAAAG,qBAAA,CAAjBH,iBAAiB;MAAEF,iBAAiB,GAAAK,qBAAA,CAAjBL,iBAAiB;;IAG5C,IAAMM,SAAS,GAAG,IAAIhT,IAAI,CACxB,IAAI,CAACyG,IAAI,CAACwM,MAAM,EAChB,IAAI,CAACxM,IAAI,CAACyM,MAAM,EAChB,IAAI,CAACzM,IAAI,CAACxG,GAAG,EACb,IAAI,CAACwG,IAAI,CAACvG,WAAW,EACrB,IAAI,CAACuG,IAAI,CAACtG,KAAK,EACfuS,iBAAiB,EACjB,CAAC,iCACD/R,cAAQ,CAACkR,kBAAkB,CAACa,iBAAiB,CAAC,CAC/C;IACD,IAAMS,SAAS,GAAG,IAAInT,IAAI,CACxB,IAAI,CAACyG,IAAI,CAACwM,MAAM,EAChB,IAAI,CAACxM,IAAI,CAACyM,MAAM,EAChB,IAAI,CAACzM,IAAI,CAACxG,GAAG,EACb,IAAI,CAACwG,IAAI,CAACvG,WAAW,EACrB,IAAI,CAACuG,IAAI,CAACtG,KAAK,EACfyS,iBAAiB,EACjB,CAAC,iCACDjS,cAAQ,CAACkR,kBAAkB,CAACe,iBAAiB,CAAC,CAC/C;;;;;;IAOD,IAAQQ,OAAO,GAAK,IAAIpB,QAAQ,CAAC;MAC/BvL,IAAI,EAAE0M,SAAS;MACf9S,SAAS,EAAE,IAAI,CAACA,SAAS;MACzB4R,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBC,SAAS,EAAE,IAAI,CAACA;KACjB,CAAC,CAACmB,WAAW,CALND,OAAO;;IAOf,IAAQE,OAAO,GAAK,IAAItB,QAAQ,CAAC;MAC/BvL,IAAI,EAAEuM,SAAS;MACf3S,SAAS,EAAE,IAAI,CAACA,SAAS;MACzB4R,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBC,SAAS,EAAE,IAAI,CAACA;KACjB,CAAC,CAACmB,WAAW,CALNC,OAAO;IAOf,OAAO;MAAEA,OAAO,EAAPA,OAAO;MAAEF,OAAO,EAAPA;KAAS;;;;;;;;EAG7BlR,MAAA,CAMOqR,uBAAuB,GAAvB,SAAAA,uBAAuBA,CAACjH,iBAA0B;;IAEvD,IAAAkH,sBAAA,GAAiD,IAAI,CAACnB,mBAAmB,CAAC/F,iBAAiB,CAAC;MAApFsG,iBAAiB,GAAAY,sBAAA,CAAjBZ,iBAAiB;MAAEF,iBAAiB,GAAAc,sBAAA,CAAjBd,iBAAiB;;IAG5C,IAAMM,SAAS,GAAG,IAAIhT,IAAI,CACxB,IAAI,CAACyG,IAAI,CAACxF,SAAS,EACnB,IAAI,CAACwF,IAAI,CAACvF,SAAS,EACnB,IAAI,CAACuF,IAAI,CAACxG,GAAG,EACb,IAAI,CAACwG,IAAI,CAACvG,WAAW,EACrB,IAAI,CAACuG,IAAI,CAACtG,KAAK,EACfuS,iBAAiB,EACjB,CAAC,iCACD/R,cAAQ,CAACkR,kBAAkB,CAACa,iBAAiB,CAAC,CAC/C;IACD,IAAMS,SAAS,GAAG,IAAInT,IAAI,CACxB,IAAI,CAACyG,IAAI,CAACxF,SAAS,EACnB,IAAI,CAACwF,IAAI,CAACvF,SAAS,EACnB,IAAI,CAACuF,IAAI,CAACxG,GAAG,EACb,IAAI,CAACwG,IAAI,CAACvG,WAAW,EACrB,IAAI,CAACuG,IAAI,CAACtG,KAAK,EACfyS,iBAAiB,EACjB,CAAC,iCACDjS,cAAQ,CAACkR,kBAAkB,CAACe,iBAAiB,CAAC,CAC/C;;;IAID,IAAMU,OAAO,GAAG,IAAItB,QAAQ,CAAC;MAC3BvL,IAAI,EAAE0M,SAAS;MACf9S,SAAS,EAAE,IAAI,CAACA,SAAS;MACzB4R,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBC,SAAS,EAAE,IAAI,CAACA;KACjB,CAAC,CAACoB,OAAO;;IAEV,IAAMF,OAAO,GAAG,IAAIpB,QAAQ,CAAC;MAC3BvL,IAAI,EAAEuM,SAAS;MACf3S,SAAS,EAAE,IAAI,CAACA,SAAS;MACzB4R,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBC,SAAS,EAAE,IAAI,CAACA;KACjB,CAAC,CAACkB,OAAO;IAEV,OAAO;MAAEE,OAAO,EAAEA,OAAO,CAACxP,QAAQ;MAAEsP,OAAO,EAAEA,OAAO,CAACtP;KAAU;;;;;;;;;;;;;EAiDjE5B,MAAA,CAOOuR,eAAe,GAAf,SAAAA,eAAeA,CACpBnH,iBAA0B,EAC1BoH,OAAe,EACfC,KAAgB,EAChBC,QAAmB;IAEnB,IAAAC,qBAAA,GAA6B,IAAI,CAACf,uBAAuB,CAACxG,iBAAiB,CAAC;MAApEgH,OAAO,GAAAO,qBAAA,CAAPP,OAAO;MAAEF,OAAO,GAAAS,qBAAA,CAAPT,OAAO;IACxB,OAAO;MACLU,OAAO,EAAE,CACP;QACEC,KAAK,EAAE,IAAI,CAACtN,IAAI,CAACxF,SAAS,CAAC7F,OAAO,CAACoB,OAAO;QAC1CgK,MAAM,EAAE8M,OAAO;QACfU,UAAU,EAAEJ,QAAQ;QACpBD,KAAK,EAAEA;OACR,EACD;QACEI,KAAK,EAAE,IAAI,CAACtN,IAAI,CAACvF,SAAS,CAAC9F,OAAO,CAACoB,OAAO;QAC1CgK,MAAM,EAAE4M,OAAO;QACfY,UAAU,EAAEJ,QAAQ;QACpBD,KAAK,EAAEA;OACR,CACF;MACDD,OAAO,EAAPA,OAAO;MACPO,WAAW,EAAEL;KACd;;;;;;;;;;;;;;EAGH5B,QAAA,CAYckC,WAAW,GAAlB,SAAOA,WAAWA,CAAAvS,KAAA;QACvB8E,IAAI,GAAA9E,KAAA,CAAJ8E,IAAI;MACJwL,SAAS,GAAAtQ,KAAA,CAATsQ,SAAS;MACTC,SAAS,GAAAvQ,KAAA,CAATuQ,SAAS;MACToB,OAAO,GAAA3R,KAAA,CAAP2R,OAAO;MACPF,OAAO,GAAAzR,KAAA,CAAPyR,OAAO;MACPe,gBAAgB,GAAAxS,KAAA,CAAhBwS,gBAAgB;IAShB,IAAMC,aAAa,GAAGzT,cAAQ,CAACC,kBAAkB,CAACqR,SAAS,CAAC;IAC5D,IAAMoC,aAAa,GAAG1T,cAAQ,CAACC,kBAAkB,CAACsR,SAAS,CAAC;IAC5D,OAAO,IAAIF,QAAQ,CAAC;MAClBvL,IAAI,EAAJA,IAAI;MACJwL,SAAS,EAATA,SAAS;MACTC,SAAS,EAATA,SAAS;MACT7R,SAAS,EAAEiU,4BAAsB,CAC/B7N,IAAI,CAACrG,YAAY,EACjBgU,aAAa,EACbC,aAAa,EACbf,OAAO,EACPF,OAAO,EACPe,gBAAgB;KAEnB,CAAC;;;;;;;;;;;;EAGJnC,QAAA,CAUcuC,WAAW,GAAlB,SAAOA,WAAWA,CAAAzS,KAAA;QACvB2E,IAAI,GAAA3E,KAAA,CAAJ2E,IAAI;MACJwL,SAAS,GAAAnQ,KAAA,CAATmQ,SAAS;MACTC,SAAS,GAAApQ,KAAA,CAAToQ,SAAS;MACToB,OAAO,GAAAxR,KAAA,CAAPwR,OAAO;MACPa,gBAAgB,GAAArS,KAAA,CAAhBqS,gBAAgB;IAQhB,OAAOnC,QAAQ,CAACkC,WAAW,CAAC;MAAEzN,IAAI,EAAJA,IAAI;MAAEwL,SAAS,EAATA,SAAS;MAAEC,SAAS,EAATA,SAAS;MAAEoB,OAAO,EAAPA,OAAO;MAAEF,OAAO,EAAEoB,kBAAU;MAAEL,gBAAgB,EAAhBA;KAAkB,CAAC;;;;;;;;;;EAG7GnC,QAAA,CAQcyC,WAAW,GAAlB,SAAOA,WAAWA,CAAAhL,KAAA;QACvBhD,IAAI,GAAAgD,KAAA,CAAJhD,IAAI;MACJwL,SAAS,GAAAxI,KAAA,CAATwI,SAAS;MACTC,SAAS,GAAAzI,KAAA,CAATyI,SAAS;MACTkB,OAAO,GAAA3J,KAAA,CAAP2J,OAAO;;IAQP,OAAOpB,QAAQ,CAACkC,WAAW,CAAC;MAAEzN,IAAI,EAAJA,IAAI;MAAEwL,SAAS,EAATA,SAAS;MAAEC,SAAS,EAATA,SAAS;MAAEoB,OAAO,EAAEkB,kBAAU;MAAEpB,OAAO,EAAPA,OAAO;MAAEe,gBAAgB,EAAE;KAAM,CAAC;GAClH;EAAA,OAAArO,YAAA,CAAAkM,QAAA;IAAAjM,GAAA;IAAAC,GAAA,EAvXD,SAAAA;MACE,OAAOqL,WAAW,CAAC,IAAI,CAAC5K,IAAI,CAACxF,SAAS,EAAE,IAAI,CAACwF,IAAI,CAACvF,SAAS,EAAE,IAAI,CAAC+Q,SAAS,CAAC;;;;;;IAG9ElM,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,OAAOqL,WAAW,CAAC,IAAI,CAAC5K,IAAI,CAACxF,SAAS,EAAE,IAAI,CAACwF,IAAI,CAACvF,SAAS,EAAE,IAAI,CAACgR,SAAS,CAAC;;;;;;IAG9EnM,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,IAAI,CAAC,IAAI,CAAC0O,aAAa,EAAE;QACvB,IAAI,IAAI,CAACjO,IAAI,CAACnG,WAAW,GAAG,IAAI,CAAC2R,SAAS,EAAE;UAC1C,IAAI,CAACyC,aAAa,GAAGxQ,sBAAc,CAACC,aAAa,CAC/C,IAAI,CAACsC,IAAI,CAACxF,SAAS,EACnB0T,mBAAa,CAACC,eAAe,CAC3BjU,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACqR,SAAS,CAAC,EAC3CtR,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACsR,SAAS,CAAC,EAC3C,IAAI,CAAC7R,SAAS,EACd,KAAK,CACN,CACF;SACF,MAAM,IAAI,IAAI,CAACoG,IAAI,CAACnG,WAAW,GAAG,IAAI,CAAC4R,SAAS,EAAE;UACjD,IAAI,CAACwC,aAAa,GAAGxQ,sBAAc,CAACC,aAAa,CAC/C,IAAI,CAACsC,IAAI,CAACxF,SAAS,EACnB0T,mBAAa,CAACC,eAAe,CAC3B,IAAI,CAACnO,IAAI,CAACrG,YAAY,EACtBO,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACsR,SAAS,CAAC,EAC3C,IAAI,CAAC7R,SAAS,EACd,KAAK,CACN,CACF;SACF,MAAM;UACL,IAAI,CAACqU,aAAa,GAAGxQ,sBAAc,CAACC,aAAa,CAAC,IAAI,CAACsC,IAAI,CAACxF,SAAS,EAAExC,IAAI,CAAC;;;MAGhF,OAAO,IAAI,CAACiW,aAAa;;;;;;IAG3B3O,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,IAAI,CAAC,IAAI,CAAC6O,aAAa,EAAE;QACvB,IAAI,IAAI,CAACpO,IAAI,CAACnG,WAAW,GAAG,IAAI,CAAC2R,SAAS,EAAE;UAC1C,IAAI,CAAC4C,aAAa,GAAG3Q,sBAAc,CAACC,aAAa,CAAC,IAAI,CAACsC,IAAI,CAACvF,SAAS,EAAEzC,IAAI,CAAC;SAC7E,MAAM,IAAI,IAAI,CAACgI,IAAI,CAACnG,WAAW,GAAG,IAAI,CAAC4R,SAAS,EAAE;UACjD,IAAI,CAAC2C,aAAa,GAAG3Q,sBAAc,CAACC,aAAa,CAC/C,IAAI,CAACsC,IAAI,CAACvF,SAAS,EACnByT,mBAAa,CAACG,eAAe,CAC3BnU,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACqR,SAAS,CAAC,EAC3C,IAAI,CAACxL,IAAI,CAACrG,YAAY,EACtB,IAAI,CAACC,SAAS,EACd,KAAK,CACN,CACF;SACF,MAAM;UACL,IAAI,CAACwU,aAAa,GAAG3Q,sBAAc,CAACC,aAAa,CAC/C,IAAI,CAACsC,IAAI,CAACvF,SAAS,EACnByT,mBAAa,CAACG,eAAe,CAC3BnU,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACqR,SAAS,CAAC,EAC3CtR,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACsR,SAAS,CAAC,EAC3C,IAAI,CAAC7R,SAAS,EACd,KAAK,CACN,CACF;;;MAGL,OAAO,IAAI,CAACwU,aAAa;;;IAC1B9O,GAAA;IAAAC,GAAA,EAuID,SAAAA;MACE,IAAI,IAAI,CAAC+O,YAAY,KAAK,IAAI,EAAE;QAC9B,IAAI,IAAI,CAACtO,IAAI,CAACnG,WAAW,GAAG,IAAI,CAAC2R,SAAS,EAAE;UAC1C,OAAO;YACLqB,OAAO,EAAEqB,mBAAa,CAACC,eAAe,CACpCjU,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACqR,SAAS,CAAC,EAC3CtR,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACsR,SAAS,CAAC,EAC3C,IAAI,CAAC7R,SAAS,EACd,IAAI,CACL;YACD+S,OAAO,EAAE3U;WACV;SACF,MAAM,IAAI,IAAI,CAACgI,IAAI,CAACnG,WAAW,GAAG,IAAI,CAAC4R,SAAS,EAAE;UACjD,OAAO;YACLoB,OAAO,EAAEqB,mBAAa,CAACC,eAAe,CACpC,IAAI,CAACnO,IAAI,CAACrG,YAAY,EACtBO,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACsR,SAAS,CAAC,EAC3C,IAAI,CAAC7R,SAAS,EACd,IAAI,CACL;YACD+S,OAAO,EAAEuB,mBAAa,CAACG,eAAe,CACpCnU,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACqR,SAAS,CAAC,EAC3C,IAAI,CAACxL,IAAI,CAACrG,YAAY,EACtB,IAAI,CAACC,SAAS,EACd,IAAI;WAEP;SACF,MAAM;UACL,OAAO;YACLiT,OAAO,EAAE7U,IAAI;YACb2U,OAAO,EAAEuB,mBAAa,CAACG,eAAe,CACpCnU,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACqR,SAAS,CAAC,EAC3CtR,cAAQ,CAACC,kBAAkB,CAAC,IAAI,CAACsR,SAAS,CAAC,EAC3C,IAAI,CAAC7R,SAAS,EACd,IAAI;WAEP;;;MAGL,OAAO,IAAI,CAAC0U,YAAY;;;AACzB;;IClSUC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAI/L,KAAgC,EAAEgM,WAAqB;;EAEvF,IAAIjO,KAAK,GAAGiC,KAAK,CAACjC,KAAK,CAACwC,GAAG,CAAC,UAAC0L,CAAC;IAAA,OAAKA,CAAC;IAAC;EACrC,IAAID,WAAW,EAAEjO,KAAK,GAAGA,KAAK,CAACmO,OAAO,EAAE;EACxC,IAAIC,gBAAgB,GAAGH,WAAW,GAAGhM,KAAK,CAAC1B,UAAU,GAAG0B,KAAK,CAAC3B,SAAS;EACvE,IAAI+N,QAAQ,GAAc,EAAE;EAE5B,SAAA5N,SAAA,GAAAC,+BAAA,CAAiBV,KAAK,GAAAY,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;IAAA,IAAfpB,IAAI,GAAAmB,KAAA,CAAAG,KAAA;IACX,IAAMG,YAAY,GAAGkN,gBAAgB,CAAC9S,MAAM,CAACmE,IAAI,CAACxF,SAAS,CAAC,GAAGwF,IAAI,CAACvF,SAAS,GAAGuF,IAAI,CAACxF,SAAS;IAE9FoU,QAAQ,CAAClN,IAAI,CAAC;MACZmN,oBAAoB,EAAEpN,YAAY,CAAC/M,QAAQ,GAAGgD,YAAY,GAAG+J,YAAY,CAAC1L,OAAO;MACjFyD,GAAG,EAAEwG,IAAI,CAACxG,GAAG;MACbC,WAAW,EAAEuG,IAAI,CAACvG,WAAW;MAC7BC,KAAK,EAAEsG,IAAI,CAACtG,KAAK;MACjBoV,QAAQ,EAAE;KACX,CAAC;IAEFH,gBAAgB,GAAGlN,YAAY;;EAGjC,OAAO+M,WAAW,GAAGI,QAAQ,CAACF,OAAO,EAAE,GAAGE,QAAQ;AACpD,CAAC;;;AClCD,AAaA,WAAYG,OAAO;;;EAGjBA,iEAAyB;EACzBA,iEAAyB;EACzBA,uDAAoB;EACpBA,uDAAoB;;;;;EAOpBA,qEAA2B;EAC3BA,uDAAoB;EACpBA,uEAA4B;EAC5BA,yDAAqB;;;EAIrBA,0CAAa;EACbA,kDAAiB;EACjBA,oDAAkB;;EAElBA,sCAAW;EACXA,8CAAe;EACfA,sDAAmB;EACnBA,gDAAgB;EAEhBA,0DAAqB;;EAErBA,wCAAY;;;EAIZA,0CAAa;AACf,CAAC,EApCWA,eAAO,KAAPA,eAAO;AAsCnB,AAAA,WAAYC,SAAS;EACnBA,uEAAmB;EACnBA,2DAAa;EACbA,yEAAoB;EACpBA,6DAAc;EACdA,+CAAO;AACT,CAAC,EANWA,iBAAS,KAATA,iBAAS;AAcrB,IAAMC,eAAe,GAAG,kFAAkF;AAE1G,IAAMC,eAAe,GAAG,2FAA2F;AAEnH,IAAMC,2BAA2B,GAC/B,GAAG,GAAGF,eAAe,GAAG,oFAAoF;AAE9G,IAAMG,oBAAoB,GACxB,sBAAsB,GAAGF,eAAe,GAAG,oDAAoD;AAEjG,IAAMG,4BAA4B,GAChC,GAAG,GAAGJ,eAAe,GAAG,oFAAoF;AAE9G,IAAMK,qBAAqB,GACzB,uBAAuB,GAAGJ,eAAe,GAAG,oDAAoD;AAElG,IAAaK,8BAA8B,IAAAC,qBAAA,OAAAA,qBAAA,CAExCT,eAAO,CAACU,kBAAkB,IAAG,CAC5B;EAAEC,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE;CAAW,EACpC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,EACtC;EAAED,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;CAAW,EACvC;EAAED,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;CAAW,EACvC;EAAED,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAS,CACpC,EAAAH,qBAAA,CACAT,eAAO,CAACa,kBAAkB,IAAG,CAC5B;EAAEF,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE;CAAW,EACpC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,EACtC;EAAED,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;CAAW,EACvC;EAAED,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;CAAW,EACvC;EAAED,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAS,CACpC,EAAAH,qBAAA,CACAT,eAAO,CAACc,aAAa,IAAG,CACvB;EAAEH,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAEV,eAAe;EAAEa,SAAS,EAAEd,iBAAS,CAACe;CAAS,EACxE;EAAEL,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAS,EACpC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAS,EACpC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,EACtC;EAAED,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;CAAW,EACvC;EAAED,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;CAAW,EACvC;EAAED,IAAI,EAAE,OAAO;EAAEC,IAAI,EAAE;CAAW,EAClC;EAAED,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAS,CACpC,EAAAH,qBAAA,CACAT,eAAO,CAACiB,aAAa,IAAG,CACvB;EAAEN,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE;CAAW,EACpC;EAAED,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;CAAW,EACvC;EAAED,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;CAAW,EACvC;EAAED,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAS,CACpC,EAAAH,qBAAA,CAGAT,eAAO,CAACkB,oBAAoB,IAAG,CAC9B;EAAEP,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAER,2BAA2B;EAAEW,SAAS,EAAEd,iBAAS,CAACkB;CAAqB,CAC9F,EAAAV,qBAAA,CACAT,eAAO,CAACoB,aAAa,IAAG,CAAC;EAAET,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAEP,oBAAoB;EAAEU,SAAS,EAAEd,iBAAS,CAACoB;CAAe,CAAC,EAAAZ,qBAAA,CAC1GT,eAAO,CAACsB,qBAAqB,IAAG,CAC/B;EAAEX,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAEN,4BAA4B;EAAES,SAAS,EAAEd,iBAAS,CAACsB;CAAsB,CAChG,EAAAd,qBAAA,CACAT,eAAO,CAACwB,cAAc,IAAG,CAAC;EAAEb,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAEL,qBAAqB;EAAEQ,SAAS,EAAEd,iBAAS,CAACwB;CAAgB,CAAC,EAAAhB,qBAAA,CAG7GT,eAAO,CAAC0B,MAAM,IAAG,CAChB;EAAEf,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAW,EACrC;EAAED,IAAI,EAAE,QAAQ;EAAEC,IAAI,EAAE;CAAW,EACnC;EAAED,IAAI,EAAE,aAAa;EAAEC,IAAI,EAAE;CAAQ,CACtC,EAAAH,qBAAA,CACAT,eAAO,CAAC2B,UAAU,IAAG,CACpB;EAAEhB,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAW,EACrC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,CACvC,EAAAH,qBAAA,CACAT,eAAO,CAAC4B,WAAW,IAAG,CACrB;EAAEjB,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,EACtC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,CACvC,EAAAH,qBAAA,CACAT,eAAO,CAAC6B,IAAI,IAAG,CACd;EAAElB,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAW,EACrC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,EACtC;EAAED,IAAI,EAAE,QAAQ;EAAEC,IAAI,EAAE;CAAW,CACpC,EAAAH,qBAAA,CACAT,eAAO,CAAC8B,QAAQ,IAAG,CAClB;EAAEnB,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAW,EACrC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,CACvC,EAAAH,qBAAA,CACAT,eAAO,CAAC+B,YAAY,IAAG,CACtB;EAAEpB,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAW,EACrC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,EACtC;EAAED,IAAI,EAAE,MAAM;EAAEC,IAAI,EAAE;CAAW,CAClC,EAAAH,qBAAA,CACAT,eAAO,CAACgC,SAAS,IAAG,CACnB;EAAErB,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,EACtC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,EACtC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,CACvC,EAAAH,qBAAA,CACAT,eAAO,CAACiC,cAAc,IAAG,CAAC;EAAEtB,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAW,CAAC,EAAAH,qBAAA,CAChET,eAAO,CAACkC,KAAK,IAAG,CACf;EAAEvB,IAAI,EAAE,UAAU;EAAEC,IAAI,EAAE;CAAW,EACrC;EAAED,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;CAAW,CACvC,EAAAH,qBAAA,CACAT,eAAO,CAACmC,MAAM,IAAG,CAAC;EAAExB,IAAI,EAAE,QAAQ;EAAEC,IAAI,EAAE;CAAW,CAAC,EAAAH,qBAAA,CACxD;AAED,IAAM2B,iBAAiB,GAAG,CAAC;AAE3B,IAAaC,SAAS;EAIpB,SAAAA;IACE,IAAI,CAACC,OAAO,GAAGnZ,WAAW;IAC1B,IAAI,CAACoZ,MAAM,GAAG,EAAE;;EACjB,IAAA7V,MAAA,GAAA2V,SAAA,CAAA1V,SAAA;EAAAD,MAAA,CAED8V,SAAS,GAAT,SAAAA,SAASA,CAAC5B,IAAa,EAAE6B,UAAiB;IACxC,IAAIC,OAAO,GAAGC,YAAY,CAAC/B,IAAI,EAAE6B,UAAU,CAAC;IAC5C,IAAI,CAACF,MAAM,CAAC5P,IAAI,CAAC+P,OAAO,CAACE,YAAY,CAAC;IACtC,IAAI,CAACN,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC5J,MAAM,CAACgK,OAAO,CAACG,MAAM,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAChF,OAAO,IAAI;GACZ;EAAArW,MAAA,CAEDsW,QAAQ,GAAR,SAAAA,QAAQA,CAAC7M,KAA2C,EAAEW,iBAA2B;IAC/E,IAAM2I,WAAW,GAAGtJ,KAAK,CAACrC,SAAS,KAAKc,iBAAS,CAACK,YAAY;;IAG9D,IAAIwK,WAAW,EAAE,CAAU,CAAC,CAAC3I,iBAAiB,GAAArO,CAA7BC,SAAS,QAAsB,qCAAqC;IACrF,EAAUyN,KAAK,CAAC7C,KAAK,CAAC3B,MAAM,KAAK,CAAC,IAAAlJ,CAAlCC,SAAS,QAA2B,2EAA2E;IAE/G,IAAMua,UAAU,GAAGxD,WAAW,GAAGO,eAAO,CAACwB,cAAc,GAAGxB,eAAO,CAACoB,aAAa;IAE/E,IAAM3H,UAAU,GAAGyJ,eAAe,CAAC/M,KAAK,CAAC1C,KAAK,CAAC3B,SAAS,CAAC;IACzD,IAAM2F,WAAW,GAAGyL,eAAe,CAAC/M,KAAK,CAAC1C,KAAK,CAAC1B,UAAU,CAAC;IAE3D,IAAI,CAACyQ,SAAS,CAACS,UAAU,EAAE,CACzBxD,WAAW,GACP;MACEhI,WAAW,EAAXA,WAAW;MACX0L,IAAI,EAAE3D,iBAAiB,CAACrJ,KAAK,CAAC1C,KAAK,EAAEgM,WAAW,CAAC;MACjD2D,eAAe,EAAEjN,KAAK,CAACe,eAAe,CAACJ,iBAAiB,WAAjBA,iBAAiB,GAAI,IAAI8E,eAAO,CAAC,CAAC,CAAC,CAAC,CAACtN,QAAQ,CAACwU,QAAQ,EAAE;MAC/F9N,SAAS,EAAEmB,KAAK,CAACrI,YAAY,CAACQ,QAAQ,CAACwU,QAAQ;KAChD,GACD;MACErJ,UAAU,EAAVA,UAAU;MACV0J,IAAI,EAAE3D,iBAAiB,CAACrJ,KAAK,CAAC1C,KAAK,EAAEgM,WAAW,CAAC;MACjD/K,QAAQ,EAAEyB,KAAK,CAACzI,WAAW,CAACY,QAAQ,CAACwU,QAAQ,EAAE;MAC/CO,gBAAgB,EAAEvM,iBAAiB,GAAGX,KAAK,CAACU,gBAAgB,CAACC,iBAAiB,CAAC,CAACxI,QAAQ,CAACwU,QAAQ,EAAE,GAAG;KACvG,CACN,CAAC;IACF,OAAO,IAAI;GACZ;EAAApW,MAAA,CAED4W,SAAS,GAAT,SAAAA,SAASA,CAACzW,QAAkB,EAAE0W,WAAoB,EAAEvS,MAAkB;IACpE,IAAI,CAACwR,SAAS,CAACxC,eAAO,CAAC0B,MAAM,EAAE,CAACwB,eAAe,CAACrW,QAAQ,CAAC,EAAEmE,MAAM,WAANA,MAAM,GAAIoR,iBAAiB,EAAEmB,WAAW,CAAC,CAAC;IACrG,OAAO,IAAI;GACZ;EAAA7W,MAAA,CAED8W,OAAO,GAAP,SAAAA,OAAOA,CAAC3W,QAAkB,EAAE4W,SAAiB,EAAEzS,MAAkB;IAC/D,IAAM0S,UAAU,GAAG1S,MAAM,WAANA,MAAM,GAAIoR,iBAAiB;IAC9C,IAAI,CAACI,SAAS,CAACxC,eAAO,CAAC6B,IAAI,EAAE,CAACqB,eAAe,CAACrW,QAAQ,CAAC,EAAE4W,SAAS,EAAEC,UAAU,CAAC,CAAC;IAChF,OAAO,IAAI;GACZ;EAAAhX,MAAA,CAEDiX,SAAS,GAAT,SAAAA,SAASA,CAAC3S,MAAiB;IACzB,IAAI,CAACwR,SAAS,CAACxC,eAAO,CAACmC,MAAM,EAAE,CAACnR,MAAM,CAAC,CAAC;IACxC,OAAO,IAAI;GACZ;EAAAtE,MAAA,CAEDkX,QAAQ,GAAR,SAAAA,QAAQA;IACN,OAAOpX,qBAAe,CAACC,MAAM,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC6V,OAAO,EAAE,IAAI,CAACC,MAAM,CAAC,CAAC;GACjF;EAAA,OAAAF,SAAA;AAAA;AAGH,SAASa,eAAeA,CAACrW,QAAkB;EACzC,OAAOA,QAAQ,CAAClH,QAAQ,GAAGgD,YAAY,GAAGkE,QAAQ,CAACjH,OAAO,CAACoB,OAAO;AACpE;AAOA,SAAS2b,YAAYA,CAACE,MAAe,EAAEJ,UAAiB;EACtD,IAAMG,YAAY,GAAGpW,qBAAe,CAACC,MAAM,CACzC+T,8BAA8B,CAACqC,MAAM,CAAC,CAAC7O,GAAG,CAAC,UAAC6P,CAAC;IAAA,OAAKA,CAAC,CAACjD,IAAI;IAAC,EACzD6B,UAAU,CACX;EACD,OAAO;IAAEI,MAAM,EAANA,MAAM;IAAED,YAAY,EAAZA;GAAc;AACjC;;ACtPA;AACA;AACA;AACA,SAAgBkB,SAASA,CAACjX,QAAkB;EAC1C,IAAIA,QAAQ,CAAClH,QAAQ,EAAE,OAAOgD,YAAY,CAAA,KACrC,OAAOkE,QAAQ,CAACjH,OAAO,CAACoB,OAAO;AACtC;;ACHA;AACA,IAAa+c,iBAAkB,0BAAAC,UAAA;EAAA,SAAAD;IAAA,OAAAC,UAAA,CAAAhV,KAAA,OAAAC,SAAA;;EAAAgV,cAAA,CAAAF,iBAAA,EAAAC,UAAA;EAAA,IAAAtX,MAAA,GAAAqX,iBAAA,CAAApX,SAAA;;EAC7BD,MAAA,CACAwX,OAAO,GAAP,SAAAA,OAAOA,CACLjT,IAAU,EACVwL,SAAiB,EACjBC,SAAiB,EACjB7R,SAAoB,EACpBsZ,UAAqB,EACrBC,UAAqB,EACrBC,KAAa,EACbtE;QAAAA;MAAAA,WAAmB5W,WAAW;;IAE9B,IAAMmb,MAAM,GAAG,CACb9Z,IAAI,CAACwB,UAAU,CAACiF,IAAI,CAACxF,SAAS,EAAEwF,IAAI,CAACvF,SAAS,EAAEuF,IAAI,CAACxG,GAAG,EAAEwG,IAAI,CAACvG,WAAW,EAAEuG,IAAI,CAACtG,KAAK,CAAC,EACvF8R,SAAS,EACTC,SAAS,EACT7R,SAAS,CAACiY,QAAQ,EAAE,EACpBqB,UAAU,CAACrB,QAAQ,EAAE,EACrBsB,UAAU,CAACtB,QAAQ,EAAE,EACrBuB,KAAK,EACLtE,QAAQ,CACT;IACD,IAAI,CAACyC,SAAS,CAACxC,eAAO,CAACc,aAAa,EAAEwD,MAAM,CAAC;;;;EAG/C5X,MAAA,CACA6X,WAAW,GAAX,SAAAA,WAAWA,CACTC,OAAkB,EAClB3Z,SAAoB,EACpBsZ,UAAqB,EACrBC,UAAqB,EACrBrE;QAAAA;MAAAA,WAAmB5W,WAAW;;IAE9B,IAAMmb,MAAM,GAAG,CAACE,OAAO,CAAC1B,QAAQ,EAAE,EAAEjY,SAAS,CAACiY,QAAQ,EAAE,EAAEqB,UAAU,CAACrB,QAAQ,EAAE,EAAEsB,UAAU,CAACtB,QAAQ,EAAE,EAAE/C,QAAQ,CAAC;IACjH,IAAI,CAACyC,SAAS,CAACxC,eAAO,CAACU,kBAAkB,EAAE4D,MAAM,CAAC;;;;EAGpD5X,MAAA,CACA+X,WAAW,GAAX,SAAAA,WAAWA,CACTD,OAAkB,EAClB3Z,SAAoB,EACpB6Z,UAAqB,EACrBC,UAAqB,EACrB5E;QAAAA;MAAAA,WAAmB5W,WAAW;;IAE9B,IAAMmb,MAAM,GAAG,CAACE,OAAO,CAAC1B,QAAQ,EAAE,EAAEjY,SAAS,CAACiY,QAAQ,EAAE,EAAE4B,UAAU,CAAC5B,QAAQ,EAAE,EAAE6B,UAAU,CAAC7B,QAAQ,EAAE,EAAE/C,QAAQ,CAAC;IACjH,IAAI,CAACyC,SAAS,CAACxC,eAAO,CAACa,kBAAkB,EAAEyD,MAAM,CAAC;;;;EAGpD5X,MAAA,CACAkY,OAAO,GAAP,SAAAA,OAAOA,CAACJ,OAAkB,EAAEE,UAAqB,EAAEC,UAAqB,EAAE5E;QAAAA;MAAAA,WAAmB5W,WAAW;;IACtG,IAAMmb,MAAM,GAAG,CAACE,OAAO,CAAC1B,QAAQ,EAAE,EAAE4B,UAAU,CAAC5B,QAAQ,EAAE,EAAE6B,UAAU,CAAC7B,QAAQ,EAAE,EAAE/C,QAAQ,CAAC;IAC3F,IAAI,CAACyC,SAAS,CAACxC,eAAO,CAACiB,aAAa,EAAEqD,MAAM,CAAC;;;;EAG/C5X,MAAA,CACAmY,aAAa,GAAb,SAAAA,aAAaA,CAACpZ,SAAmB,EAAEC,SAAmB;IACpD,IAAM4Y,MAAM,GAAG,CAACR,SAAS,CAACrY,SAAS,CAAC,EAAEqY,SAAS,CAACpY,SAAS,CAAC,CAAC;IAC3D,IAAI,CAAC8W,SAAS,CAACxC,eAAO,CAAC4B,WAAW,EAAE0C,MAAM,CAAC;;;;EAG7C5X,MAAA,CACAoY,WAAW,GAAX,SAAAA,WAAWA,CAACrZ,SAAmB,EAAEC,SAAmB,EAAE+X,SAAiB;IACrE,IAAMa,MAAM,GAAG,CAACR,SAAS,CAACrY,SAAS,CAAC,EAAEqY,SAAS,CAACpY,SAAS,CAAC,EAAE+X,SAAS,CAAC;IACtE,IAAI,CAACjB,SAAS,CAACxC,eAAO,CAACgC,SAAS,EAAEsC,MAAM,CAAC;;;;EAG3C5X,MAAA,CACAqY,QAAQ,GAAR,SAAAA,QAAQA,CAAClY,QAAkB,EAAEmY,EAAU;IACrC,IAAMV,MAAM,GAAG,CAACR,SAAS,CAACjX,QAAQ,CAAC,EAAEmY,EAAE,CAAC;IACxC,IAAI,CAACxC,SAAS,CAACxC,eAAO,CAACkC,KAAK,EAAEoC,MAAM,CAAC;GACtC;EAAA,OAAAP,iBAAA;AAAA,EAvEoC1B,SAAS;;ACUhD;;;;;AAKA,SAAgB4C,KAAKA,CAACC,SAAoB;EACxC,IAAMC,MAAM,GAAGpc,IAAI,CAACC,MAAM,CAACkc,SAAS,CAAC;EACrC,IAAIE,GAAG,GAAGD,MAAM,CAACrC,QAAQ,CAAC,EAAE,CAAC;EAC7B,IAAIsC,GAAG,CAACzT,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IACxByT,GAAG,SAAOA,GAAK;;EAEjB,cAAYA,GAAG;AACjB;;ACqBA;AACA,IAAsBC,mBAAmB;EAAA,SAAAA;EAAAA,mBAAA,CACzBC,aAAa,GAApB,SAAOA,aAAaA,CAACC,QAAgB;IAC1C,IAAAC,qBAAA,GAA0BC,aAAM,CAACC,KAAK,CAAClZ,eAAe,CAACmZ,MAAM,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAEJ,QAAQ,CAAC;MAAtFjD,OAAO,GAAAkD,qBAAA;MAAElB,MAAM,GAAAkB,qBAAA;IAEtB,IAAMI,WAAW,GAAGP,mBAAmB,CAACQ,UAAU,CAACvD,OAAO,CAAC;IAE3D,OAAO;MACLA,OAAO,EAAEsD,WAAW,CAAC5R,GAAG,CAAC,UAACiP,UAAmB,EAAEzQ,CAAS;QACtD,IAAMsT,MAAM,GAAGtF,8BAA8B,CAACyC,UAAU,CAAC;QACzD,IAAM8C,SAAS,GAAGN,aAAM,CAACC,KAAK,CAAClZ,eAAe,CAACmZ,MAAM,CACnDG,MAAM,CAAC9R,GAAG,CAAC,UAAC0O,OAAO;UAAA,OAAKA,OAAO,CAAC9B,IAAI;UAAC,EACrC0D,MAAM,CAAC9R,CAAC,CAAC,CACV;QACD,IAAM+P,MAAM,GAAGwD,SAAS,CAAC/R,GAAG,CAAC,UAACgS,KAAK,EAAEC,CAAC;UACpC,QAAQH,MAAM,CAACG,CAAC,CAAC,CAAClF,SAAS;YACzB,KAAKd,iBAAS,CAACkB,mBAAmB;cAChC,OAAO;gBACLR,IAAI,EAAEmF,MAAM,CAACG,CAAC,CAAC,CAACtF,IAAI;gBACpBpO,KAAK,EAAE2T,oBAAoB,CAACF,KAAK;eAClC;YACH,KAAK/F,iBAAS,CAACoB,aAAa;cAC1B,OAAO;gBACLV,IAAI,EAAEmF,MAAM,CAACG,CAAC,CAAC,CAACtF,IAAI;gBACpBpO,KAAK,EAAE4T,cAAc,CAACH,KAAK;eAC5B;YACH,KAAK/F,iBAAS,CAACsB,oBAAoB;cACjC,OAAO;gBACLZ,IAAI,EAAEmF,MAAM,CAACG,CAAC,CAAC,CAACtF,IAAI;gBACpBpO,KAAK,EAAE6T,qBAAqB,CAACJ,KAAK;eACnC;YACH,KAAK/F,iBAAS,CAACwB,cAAc;cAC3B,OAAO;gBACLd,IAAI,EAAEmF,MAAM,CAACG,CAAC,CAAC,CAACtF,IAAI;gBACpBpO,KAAK,EAAE8T,eAAe,CAACL,KAAK;eAC7B;YACH,KAAK/F,iBAAS,CAACe,OAAO;cACpB,OAAO;gBACLL,IAAI,EAAEmF,MAAM,CAACG,CAAC,CAAC,CAACtF,IAAI;gBACpBpO,KAAK,EAAE+T,YAAY,CAACN,KAAK;eAC1B;YACH;cACE,OAAO;gBACLrF,IAAI,EAAEmF,MAAM,CAACG,CAAC,CAAC,CAACtF,IAAI;gBACpBpO,KAAK,EAAEyT;eACR;;SAEN,CAAC;QAEF,OAAO;UACLO,UAAU,EAAEvG,eAAO,CAACiD,UAAU,CAAC;UAC/BA,UAAU,EAAVA,UAAU;UACVV,MAAM,EAANA;SACD;OACF;KACF;;;;EAGH8C,mBAAA,CACeQ,UAAU,GAAjB,SAAOA,UAAUA,CAACvD,OAAe;IACvC,IAAMsD,WAAW,GAAG,EAAE;IAEtB,KAAK,IAAIpT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8P,OAAO,CAAC3Q,MAAM,EAAEa,CAAC,IAAI,CAAC,EAAE;MAC1C,IAAMgU,KAAI,GAAGlE,OAAO,CAACmE,SAAS,CAACjU,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;MACxCoT,WAAW,CAACjT,IAAI,CAACpK,QAAQ,CAACie,KAAI,EAAE,EAAE,CAAY,CAAC;;IAGjD,OAAOZ,WAAW;GACnB;EAAA,OAAAP,mBAAA;AAAA;AAGH,SAASiB,YAAYA,CAACI,IAAY;EAChC,IAAOjb,SAAS,GAAwCib,IAAI;IAA1Chb,SAAS,GAA6Bgb,IAAI;IAA/Bjc,GAAG,GAAwBic,IAAI;IAA1Bhc,WAAW,GAAWgc,IAAI;IAAb/b,KAAK,GAAI+b,IAAI;EAE5D,OAAO;IACLjb,SAAS,EAATA,SAAS;IACTC,SAAS,EAATA,SAAS;IACTjB,GAAG,EAAElC,QAAQ,CAACkC,GAAG,CAAC;IAClBC,WAAW,EAAEnC,QAAQ,CAACmC,WAAW,CAAC;IAClCC,KAAK,EAALA;GACD;AACH;AAEA,SAASgc,YAAYA,CAACD,IAAY;EAChC,IAAO5G,oBAAoB,GAAuC4G,IAAI;IAAzCjc,GAAG,GAAkCic,IAAI;IAApChc,WAAW,GAAqBgc,IAAI;IAAvB/b,KAAK,GAAc+b,IAAI;IAAhB3G,QAAQ,GAAI2G,IAAI;EAEtE,OAAO;IACL5G,oBAAoB,EAApBA,oBAAoB;IACpBrV,GAAG,EAAElC,QAAQ,CAACkC,GAAG,CAAC;IAClBC,WAAW,EAAEnC,QAAQ,CAACmC,WAAW,CAAC;IAClCC,KAAK,EAALA,KAAK;IACLoV,QAAQ,EAARA;GACD;AACH;AAEA,SAASmG,oBAAoBA,CAACQ,IAAW;EACvC,IAAO3a,OAAO,GAAsD2a,IAAI;IAAxD9Y,UAAU,GAA0C8Y,IAAI;IAA5ChS,QAAQ,GAAgCgS,IAAI;IAAlCrD,gBAAgB,GAAcqD,IAAI;IAAhB3G,QAAQ,GAAI2G,IAAI;EACxE,IAAOjb,SAAS,GAAwCM,OAAO;IAA7CL,SAAS,GAA6BK,OAAO;IAAlCtB,GAAG,GAAwBsB,OAAO;IAA7BrB,WAAW,GAAWqB,OAAO;IAAhBpB,KAAK,GAAIoB,OAAO;EAC/D,OAAO;IACLA,OAAO,EAAE;MACPN,SAAS,EAATA,SAAS;MACTC,SAAS,EAATA,SAAS;MACTjB,GAAG,EAAHA,GAAG;MACHC,WAAW,EAAXA,WAAW;MACXC,KAAK,EAALA;KACD;IACDiD,UAAU,EAAVA,UAAU;IACV8G,QAAQ,EAARA,QAAQ;IACR2O,gBAAgB,EAAhBA,gBAAgB;IAChBtD,QAAQ,EAARA;GACD;AACH;AAEA,SAASoG,cAAcA,CAACO,IAAW;EACjC,IAAOjN,UAAU,GAAsCiN,IAAI;IAAxCvD,IAAI,GAAgCuD,IAAI;IAAlChS,QAAQ,GAAsBgS,IAAI;IAAxBrD,gBAAgB,GAAIqD,IAAI;EAC3D,IAAME,KAAK,GAAuBzD,IAAI,CAACnP,GAAG,CAAC,UAAC6S,OAAe;IAAA,OAAKF,YAAY,CAACE,OAAO,CAAC;IAAC;EAEtF,OAAO;IACL1D,IAAI,EAAEyD,KAAK;IACXnN,UAAU,EAAVA,UAAU;IACV/E,QAAQ,EAARA,QAAQ;IACR2O,gBAAgB,EAAhBA;GACD;AACH;AAEA,SAAS+C,qBAAqBA,CAACM,IAAW;EACxC,IAAO3a,OAAO,GAAsD2a,IAAI;IAAxD9Y,UAAU,GAA0C8Y,IAAI;IAA5C1R,SAAS,GAA+B0R,IAAI;IAAjCtD,eAAe,GAAcsD,IAAI;IAAhB3G,QAAQ,GAAI2G,IAAI;EACxE,IAAQjb,SAAS,GAAyCM,OAAO,CAAzDN,SAAS;IAAEC,SAAS,GAA8BK,OAAO,CAA9CL,SAAS;IAAEjB,GAAG,GAAyBsB,OAAO,CAAnCtB,GAAG;IAAEC,WAAW,GAAYqB,OAAO,CAA9BrB,WAAW;IAAEC,KAAK,GAAKoB,OAAO,CAAjBpB,KAAK;EAErD,OAAO;IACLoB,OAAO,EAAE;MACPN,SAAS,EAATA,SAAS;MACTC,SAAS,EAATA,SAAS;MACTjB,GAAG,EAAHA,GAAG;MACHC,WAAW,EAAXA,WAAW;MACXC,KAAK,EAALA;KACD;IACDiD,UAAU,EAAVA,UAAU;IACVoH,SAAS,EAATA,SAAS;IACToO,eAAe,EAAfA,eAAe;IACfrD,QAAQ,EAARA;GACD;AACH;AAEA,SAASsG,eAAeA,CAACK,IAAW;EAClC,IAAOjP,WAAW,GAAsCiP,IAAI;IAAxCvD,IAAI,GAAgCuD,IAAI;IAAlC1R,SAAS,GAAqB0R,IAAI;IAAvBtD,eAAe,GAAIsD,IAAI;EAC5D,IAAME,KAAK,GAAuBzD,IAAI,CAACnP,GAAG,CAAC,UAAC6S,OAAe;IAAA,OAAKF,YAAY,CAACE,OAAO,CAAC;IAAC;EAEtF,OAAO;IACL1D,IAAI,EAAEyD,KAAK;IACXnP,WAAW,EAAXA,WAAW;IACXzC,SAAS,EAATA,SAAS;IACToO,eAAe,EAAfA;GACD;AACH;;AC5MA;AACA,AAAO,IAAM0D,UAAU,GAAG,4CAA4C;;ICEhDC,SAAS;;;;EAM7B,SAAAA;EAAwBA,SAAA,CAEVC,eAAe,GAAtB,SAAOA,eAAeA,CAACC,YAA+B;IAC3D,IAAI,CAACrb,KAAK,CAACC,OAAO,CAACob,YAAY,CAAC,EAAE;MAChCA,YAAY,GAAG,CAACA,YAAY,CAAC;;IAG/B,OAAOA,YAAY,CAACtV,MAAM,KAAK,CAAC,GAC5BsV,YAAY,CAAC,CAAC,CAAC,GACfF,SAAS,CAACG,SAAS,CAACC,kBAAkB,CAAC,WAAW,EAAE,CAACF,YAAY,CAAC,CAAC;GACxE;EAAAF,SAAA,CAEaK,eAAe,GAAtB,SAAOA,eAAeA,CAACC,eAAuB;IACnD,OAAON,SAAS,CAACG,SAAS,CAACI,kBAAkB,CAAC,WAAW,EAAED,eAAe,CAAC,CAAC,CAAC,CAAC;GAC/E;EAAA,OAAAN,SAAA;AAAA;AAnBaA,mBAAS,gBAAc,IAAIQ,aAAS,CAACC,UAAU,CAACC,GAAG,CAAC;;ACJpE;AACA,AAAO,IAAMC,kBAAkB,GAAG,CAChC;EACE9G,IAAI,EAAE,aAAa;EACnB0D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,kBAAkB;IACxBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,SAAS;EACfgH,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,OAAO;EACb2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,SAAS;EACf2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,WAAW;EACjB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,aAAa;EACnB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,wBAAwB;EAC9B2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE,gBAAgB;IAC9BG,UAAU,EAAE,CACV;MACEnH,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE,QAAQ;MACd+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE,OAAO;MACb+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,OAAO;MACbC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf;GAEJ,EACD;IACEhH,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,sBAAsB;EAC5B2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,gBAAgB;EACtB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE,gBAAgB;IAC9BG,UAAU,EAAE,CACV;MACEnH,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE,QAAQ;MACd+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE,OAAO;MACb+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,OAAO;MACbC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf;GAEJ,EACD;IACEhH,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,MAAM;IACZ+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,mBAAmB;EACzB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,gCAAgC;EACtC2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,WAAW;EACjB2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,WAAW;EACjB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,MAAM;EACZ2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,QAAQ;IACd+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,aAAa;EACnB2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,QAAQ;EACd2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,SAAS;EACf2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,QAAQ;EACd2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,QAAQ;EACd2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE,wCAAwC;IACtDG,UAAU,EAAE,CACV;MACEnH,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE,OAAO;MACb+G,YAAY,EAAE,yCAAyC;MACvDG,UAAU,EAAE,CACV;QACEnH,IAAI,EAAE,OAAO;QACbC,IAAI,EAAE,SAAS;QACf+G,YAAY,EAAE;OACf,EACD;QACEhH,IAAI,EAAE,QAAQ;QACdC,IAAI,EAAE,SAAS;QACf+G,YAAY,EAAE;OACf,EACD;QACEhH,IAAI,EAAE,YAAY;QAClBC,IAAI,EAAE,QAAQ;QACd+G,YAAY,EAAE;OACf,EACD;QACEhH,IAAI,EAAE,OAAO;QACbC,IAAI,EAAE,QAAQ;QACd+G,YAAY,EAAE;OACf;KAEJ,EACD;MACEhH,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf;GAEJ,EACD;IACEhH,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,SAAS;EACf2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,aAAa;EACnB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE,uCAAuC;IACrDG,UAAU,EAAE,CACV;MACEnH,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE,2CAA2C;MACzDG,UAAU,EAAE,CACV;QACEnH,IAAI,EAAE,OAAO;QACbC,IAAI,EAAE,SAAS;QACf+G,YAAY,EAAE;OACf,EACD;QACEhH,IAAI,EAAE,QAAQ;QACdC,IAAI,EAAE,SAAS;QACf+G,YAAY,EAAE;OACf,EACD;QACEhH,IAAI,EAAE,YAAY;QAClBC,IAAI,EAAE,QAAQ;QACd+G,YAAY,EAAE;OACf,EACD;QACEhH,IAAI,EAAE,OAAO;QACbC,IAAI,EAAE,QAAQ;QACd+G,YAAY,EAAE;OACf;KAEJ,EACD;MACEhH,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf,EACD;MACEhH,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE,SAAS;MACf+G,YAAY,EAAE;KACf;GAEJ,EACD;IACEhH,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,cAAc;EACpB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,MAAM;IACZ+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,UAAU;EAChB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE,QAAQ;IACd+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,aAAa;EACnB2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,cAAc;EACpB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,aAAa;EACnB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,mBAAmB;EACzB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,MAAM;IACZ+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,WAAW;EACjB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,YAAY;EAClB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,mBAAmB;EACzB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE,QAAQ;IACd+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,MAAM;IACZ+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,QAAQ;EACd2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,QAAQ;IACd+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,iBAAiB;EACvB2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,UAAU;EAChB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,QAAQ;IACd+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,cAAc;EACpB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,gBAAgB;EACtB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,aAAa;EACnB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDE,OAAO,EAAE,EAAE;EACXD,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,UAAU;EAChBD,IAAI,EAAE,qBAAqB;EAC3B2D,MAAM,EAAE,EAAE;EACVuD,OAAO,EAAE,CACP;IACElH,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,CACF;EACDC,eAAe,EAAE;CAClB,EACD;EACEhH,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,UAAU;EAChB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,CACF;EACDK,SAAS,EAAE;CACZ,EACD;EACEpH,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,gBAAgB;EACtB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,MAAM;IACZmH,OAAO,EAAE,KAAK;IACdJ,YAAY,EAAE;GACf,CACF;EACDK,SAAS,EAAE;CACZ,EACD;EACEpH,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,cAAc;EACpB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,CACF;EACDK,SAAS,EAAE;CACZ,EACD;EACEpH,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,UAAU;EAChB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,CACF;EACDK,SAAS,EAAE;CACZ,EACD;EACEpH,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,gBAAgB;EACtB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,SAAS;IACfmH,OAAO,EAAE,IAAI;IACbJ,YAAY,EAAE;GACf,CACF;EACDK,SAAS,EAAE;CACZ,EACD;EACEpH,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,mBAAmB;EACzB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,0BAA0B;EAChC2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,gBAAgB;EACtB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,gBAAgB;EACtB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,gBAAgB;EACtB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,qBAAqB;EAC3B2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,qBAAqB;EAC3B2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,0BAA0B;EAChC2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,wBAAwB;EAC9B2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,eAAe;EACrB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,uBAAuB;EAC7B2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,2BAA2B;EACjC2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,qCAAqC;EAC3C2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,cAAc;EACpB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,kBAAkB;EACxB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,aAAa;EACnB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,gBAAgB;EACtB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,eAAe;EACrB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,yBAAyB;EAC/B2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,0BAA0B;EAChC2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,sBAAsB;EAC5B2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,8BAA8B;EACpC2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf,EACD;IACEhH,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,OAAO;IACb+G,YAAY,EAAE;GACf;CAEJ,EACD;EACE/G,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,cAAc;EACpB2D,MAAM,EAAE;CACT,EACD;EACE1D,IAAI,EAAE,OAAO;EACbD,IAAI,EAAE,mBAAmB;EACzB2D,MAAM,EAAE,CACN;IACE3D,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,SAAS;IACf+G,YAAY,EAAE;GACf;CAEJ,CACF;;ACnoCD,IAAMM,gBAAgB,GAAG;EACvBC,MAAM,EAAE,CACN;IAAEvH,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;GAAW,EACpC;IAAED,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;GAAW,EACpC;IAAED,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;GAAW,EAClC;IAAED,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE;GAAW;CAExC;AA4BD;AACA,SAASuH,MAAMA,CAACC,OAA4B;EAC1C,OAAOC,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,CAACG,IAAI,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC,KAAK,WAAW;IAAC;AAC5D;AAEA,SAASC,gBAAgBA,CAACL,OAAoB;EAC5C,IAAIA,OAAO,CAACM,UAAU,EAAE;IACtB,EAAUN,OAAO,CAACO,YAAY,KAAKC,SAAS,IAAAngB,CAA5CC,SAAS,QAAqCiB,aAAa;IAC3D,OAAO,IAAI;;EAEb,OAAO,KAAK;AACd;AAEA,IAAsBkf,iBAAiB;;;;EAMrC,SAAAA;;;;EAEAA,iBAAA,CAGcC,oBAAoB,GAA3B,SAAOA,oBAAoBA,CAAC/c,OAAgB,EAAE4c,YAAuB;IAC1E,OAAO;MACLpD,QAAQ,EAAE,IAAI,CAACwD,oBAAoB,CAAChd,OAAO,EAAE4c,YAAY,CAAC;MAC1DpW,KAAK,EAAE0S,KAAK,CAAC,CAAC;KACf;GACF;EAAA4D,iBAAA,CAEaG,iBAAiB,GAAxB,SAAOA,iBAAiBA,CAACC,QAAkB,EAAEb,OAA4B;;;;;;;;IAQ9E,CAAUrf,IAAI,CAACwT,WAAW,CAAC0M,QAAQ,CAACpe,SAAS,EAAE5B,IAAI,CAAC,GAAAR,CAApDC,SAAS,QAA6CgB,cAAc;IAEpE,IAAMud,YAAY,GAAa,EAAE;IACjC,IAAMiC,OAAO,GAAG,IAAInF,iBAAiB,EAAE;;IAGvC,IAAIoE,MAAM,CAACC,OAAO,CAAC,IAAIK,gBAAgB,CAACL,OAAO,CAAC,EAAE;;MAEhDnB,YAAY,CAACtU,IAAI,CAACkW,iBAAiB,CAACE,oBAAoB,CAACE,QAAQ,CAAChY,IAAI,CAAClF,OAAO,EAAEqc,OAAO,CAACO,YAAa,CAAC,CAAC;;;IAIzG,EACEM,QAAQ,CAAChY,IAAI,CAACxF,SAAS,KAAK2c,OAAO,CAACe,SAAS,IAC1C,CAACF,QAAQ,CAAChY,IAAI,CAACxF,SAAS,CAAC9F,QAAQ,IAAIyiB,OAAO,CAACe,SAAS,KAAKP,SAAU,IAAAngB,CAF1EC,SAAS,QAGPe,cAAc;;IAIhB,IAAM2f,cAAc,GAAGH,QAAQ,CAAC3L,uBAAuB,CAAC8K,OAAO,CAACtR,iBAAiB,CAAC;IAClF,IAAMqN,UAAU,GAAGc,KAAK,CAACmE,cAAc,CAACtL,OAAO,CAAC;IAChD,IAAMsG,UAAU,GAAGa,KAAK,CAACmE,cAAc,CAACxL,OAAO,CAAC;;IAGhD,IAAIwK,OAAO,CAACiB,WAAW,EAAE;MACvBpC,YAAY,CAACtU,IAAI,CACfkW,iBAAiB,CAACS,iBAAiB,CACjClB,OAAO,CAACiB,WAAW,CAAChF,KAAK,EACzB+D,OAAO,CAACiB,WAAW,CAACE,WAAW,EAC/BnB,OAAO,CAACiB,WAAW,CAACG,SAAS,CAC9B,CACF;;;IAIH,IAAIrB,MAAM,CAACC,OAAO,CAAC,EAAE;MACnB,IAAM3E,SAAS,GAAWgG,+BAAuB,CAACrB,OAAO,CAAC3E,SAAS,CAAC;MACpEyF,OAAO,CAAChF,OAAO,CACb+E,QAAQ,CAAChY,IAAI,EACbgY,QAAQ,CAACxM,SAAS,EAClBwM,QAAQ,CAACvM,SAAS,EAClBuM,QAAQ,CAACpe,SAAS,EAClBsZ,UAAU,EACVC,UAAU,EACVX,SAAS,EACT2E,OAAO,CAACrI,QAAQ,CACjB;KACF,MAAM;;MAELmJ,OAAO,CAAC3E,WAAW,CAAC6D,OAAO,CAAC5D,OAAO,EAAEyE,QAAQ,CAACpe,SAAS,EAAEsZ,UAAU,EAAEC,UAAU,EAAEgE,OAAO,CAACrI,QAAQ,CAAC;;IAGpG,IAAIxN,KAAK,GAAW0S,KAAK,CAAC,CAAC,CAAC;;IAG5B,IAAIkD,MAAM,CAACC,OAAO,CAAC,IAAIA,OAAO,CAACsB,OAAO,EAAE;MACtC,IAAItB,OAAO,CAACe,SAAS,EAAE;;QAErBD,OAAO,CAACvF,SAAS,CAACpa,UAAU,CAAC;;QAE7B2f,OAAO,CAAC5F,SAAS,CAAC2F,QAAQ,CAAChY,IAAI,CAACxF,SAAS,EAAE,KAAK,CAAC;QACjDyd,OAAO,CAAC5F,SAAS,CAAC2F,QAAQ,CAAChY,IAAI,CAACvF,SAAS,EAAE,KAAK,CAAC;;;QAGjDwd,OAAO,CAACnE,QAAQ,CAACkE,QAAQ,CAAChY,IAAI,CAACxF,SAAS,CAAC7F,OAAO,EAAEwiB,OAAO,CAAC3E,SAAS,CAAC;QACpEyF,OAAO,CAACnE,QAAQ,CAACkE,QAAQ,CAAChY,IAAI,CAACvF,SAAS,EAAE0c,OAAO,CAAC3E,SAAS,CAAC;OAC7D,MAAM;;QAELyF,OAAO,CAAC5F,SAAS,CAAC2F,QAAQ,CAAChY,IAAI,CAACxF,SAAS,EAAE,KAAK,CAAC;QACjDyd,OAAO,CAAC5F,SAAS,CAAC2F,QAAQ,CAAChY,IAAI,CAACvF,SAAS,EAAE,KAAK,CAAC;;QAEjDwd,OAAO,CAACnE,QAAQ,CAACkE,QAAQ,CAAChY,IAAI,CAACxF,SAAS,EAAE2c,OAAO,CAAC3E,SAAS,CAAC;QAC5DyF,OAAO,CAACnE,QAAQ,CAACkE,QAAQ,CAAChY,IAAI,CAACvF,SAAS,EAAE0c,OAAO,CAAC3E,SAAS,CAAC;;KAE/D,MAAM;;MAELyF,OAAO,CAACrE,aAAa,CAACoE,QAAQ,CAAChY,IAAI,CAACxF,SAAS,EAAEwd,QAAQ,CAAChY,IAAI,CAACvF,SAAS,CAAC;;MAEvE,IAAI0c,OAAO,CAACe,SAAS,EAAE;;;QAGrB5W,KAAK,GAAG0S,KAAK,CAACd,UAAU,CAAC;QACzB+E,OAAO,CAACnE,QAAQ,CAACkE,QAAQ,CAAChY,IAAI,CAACxF,SAAS,EAAEqb,UAAU,CAAC;;;IAIzDG,YAAY,CAACtU,IAAI,CAACkW,iBAAiB,CAACc,uBAAuB,CAACT,OAAO,CAACtF,QAAQ,EAAE,EAAEwE,OAAO,CAAChK,QAAQ,CAAC,CAAC;IAElG,OAAO;MACLmH,QAAQ,EAAEwB,SAAS,CAACC,eAAe,CAACC,YAAY,CAAC;MACjD1U,KAAK,EAALA;KACD;;;;;;;;EAGHsW,iBAAA,CAMce,oBAAoB,GAA3B,SAAOA,oBAAoBA,CAACX,QAAkB,EAAEb,OAA+B;;;;;;IAMpF,IAAMnB,YAAY,GAAa,EAAE;IACjC,IAAMiC,OAAO,GAAG,IAAInF,iBAAiB,EAAE;IAEvC,IAAMS,OAAO,GAAGS,KAAK,CAACmD,OAAO,CAAC5D,OAAO,CAAC;IAEtC,IAAI4D,OAAO,CAACyB,SAAS,EAAE;;MAErB,CAAUzB,OAAO,CAAC0B,mBAAmB,CAAC1W,OAAO,CAAClK,GAAG,CAAC,GAAAT,CAAlDC,SAAS,QAA2CkB,WAAW;;MAG/D,IAAIwe,OAAO,CAAC2B,MAAM,EAAE;QAClB9C,YAAY,CAACtU,IAAI,CACfkW,iBAAiB,CAACmB,kBAAkB,CAClC5B,OAAO,CAAC2B,MAAM,CAAC7L,OAAO,EACtBkK,OAAO,CAAC2B,MAAM,CAACvF,OAAO,EACtB4D,OAAO,CAAC2B,MAAM,CAAC3L,QAAQ,EACvBgK,OAAO,CAAC2B,MAAM,CAAC5L,KAAK,EACpBiK,OAAO,CAAC2B,MAAM,CAACP,SAAS,CACzB,CACF;;;MAIH,IAAAS,qBAAA,GAAqDhB,QAAQ,CAAClL,uBAAuB,CAACqK,OAAO,CAACtR,iBAAiB,CAAC;QAA/F4N,UAAU,GAAAuF,qBAAA,CAAnBnM,OAAO;QAAuB6G,UAAU,GAAAsF,qBAAA,CAAnBrM,OAAO;MACpCsL,OAAO,CAACtE,OAAO,CAACJ,OAAO,EAAEE,UAAU,EAAEC,UAAU,EAAEyD,OAAO,CAACrI,QAAQ,CAAC;KACnE,MAAM;MAAA,IAAAmK,iBAAA;;MAEL,IAAMC,eAAe,GAAG,IAAI3N,QAAQ,CAAC;QACnCvL,IAAI,EAAEgY,QAAQ,CAAChY,IAAI;QACnBpG,SAAS,EAAEud,OAAO,CAAC0B,mBAAmB,CAAClb,QAAQ,CAACqa,QAAQ,CAACpe,SAAS,CAAC,CAACyD,QAAQ;QAC5EmO,SAAS,EAAEwM,QAAQ,CAACxM,SAAS;QAC7BC,SAAS,EAAEuM,QAAQ,CAACvM;OACrB,CAAC;;MAGF,CAAU3T,IAAI,CAACwT,WAAW,CAAC4N,eAAe,CAACtf,SAAS,EAAE5B,IAAI,CAAC,GAAAR,CAA3DC,SAAS,QAAoDgB,cAAc;;MAG3E,IAAA0gB,qBAAA,GAAqDD,eAAe,CAACpM,uBAAuB,CAC1FqK,OAAO,CAACtR,iBAAiB,CAC1B;QAFgB4N,WAAU,GAAA0F,qBAAA,CAAnBtM,OAAO;QAAuB6G,WAAU,GAAAyF,qBAAA,CAAnBxM,OAAO;MAIpCsL,OAAO,CAACzE,WAAW,CACjBD,OAAO,EACP2F,eAAe,CAACtf,SAAS,CAACiY,QAAQ,EAAE,EACpC4B,WAAU,CAAC5B,QAAQ,EAAE,EACrB6B,WAAU,CAAC7B,QAAQ,EAAE,GAAAoH,iBAAA,GACrB9B,OAAO,CAACrI,QAAQ,YAAAmK,iBAAA,GAAI/gB,WAAW,CAChC;;IAGH+f,OAAO,CAACpE,WAAW,CAACmE,QAAQ,CAAChY,IAAI,CAACxF,SAAS,EAAEwd,QAAQ,CAAChY,IAAI,CAACvF,SAAS,EAAEob,UAAU,CAAC;IAEjFG,YAAY,CAACtU,IAAI,CAACkW,iBAAiB,CAACc,uBAAuB,CAACT,OAAO,CAACtF,QAAQ,EAAE,EAAEwE,OAAO,CAAChK,QAAQ,CAAC,CAAC;IAElG,OAAO;MACLmH,QAAQ,EAAEwB,SAAS,CAACC,eAAe,CAACC,YAAY,CAAC;MACjD1U,KAAK,EAAE0S,KAAK,CAAC,CAAC;KACf;;;;;;;;EAGH4D,iBAAA,CAMcwB,qBAAqB,GAA5B,SAAOA,qBAAqBA,CAACpB,QAAkB,EAAEb,OAAuB;IAC7E,IAAMnB,YAAY,GAAa,EAAE;IACjC,IAAMiC,OAAO,GAAG,IAAInF,iBAAiB,EAAE;IAEvC,IAAMS,OAAO,GAAGS,KAAK,CAACmD,OAAO,CAAC5D,OAAO,CAAC;IACtC,IAAMf,SAAS,GAAGgG,+BAAuB,CAACrB,OAAO,CAAC3E,SAAS,CAAC;;;;;;IAQ5DyF,OAAO,CAACzE,WAAW,CAACD,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE4D,OAAO,CAACrI,QAAQ,CAAC;IAE7DmJ,OAAO,CAACpE,WAAW,CAACmE,QAAQ,CAAChY,IAAI,CAACxF,SAAS,EAAEwd,QAAQ,CAAChY,IAAI,CAACvF,SAAS,EAAE+X,SAAS,CAAC;IAEhFwD,YAAY,CAACtU,IAAI,CAACkW,iBAAiB,CAACc,uBAAuB,CAACT,OAAO,CAACtF,QAAQ,EAAE,EAAEwE,OAAO,CAAChK,QAAQ,CAAC,CAAC;IAElG,OAAO;MACLmH,QAAQ,EAAEwB,SAAS,CAACC,eAAe,CAACC,YAAY,CAAC;MACjD1U,KAAK,EAAE0S,KAAK,CAAC,CAAC;KACf;;;;EAGH4D,iBAAA,CACeE,oBAAoB,GAA3B,SAAOA,oBAAoBA,CAAChd,OAAgB,EAAE4c,YAAuB;IAC3E,OAAOE,iBAAiB,CAAC3B,SAAS,CAACC,kBAAkB,CAACtd,iBAAiB,CAACygB,eAAe,EAAE,CACvFve,OAAO,EACP4c,YAAY,CAAC7F,QAAQ,EAAE,CACxB,CAAC;;;;EAGJ+F,iBAAA,CACcc,uBAAuB,GAA9B,SAAOA,uBAAuBA,CAACY,UAAkB,EAAEnM,QAAmB;IAC3E,OAAOyK,iBAAiB,CAAC3B,SAAS,CAACC,kBAAkB,CAACtd,iBAAiB,CAAC2gB,kBAAkB,EAAE,CAACD,UAAU,EAAEnM,QAAQ,CAAC,CAAC;;;;EAGrHyK,iBAAA,CACcS,iBAAiB,GAAxB,SAAOA,iBAAiBA,CAACjF,KAAa,EAAEkF,WAAyC,EAAEC,SAAiB;IACzG,OAAOX,iBAAiB,CAAC3B,SAAS,CAACC,kBAAkB,CAACtd,iBAAiB,CAAC4gB,YAAY,EAAE,CACpFpG,KAAK,EACLkF,WAAW,EACXC,SAAS,CACV,CAAC;;;;EAGJX,iBAAA,CACcmB,kBAAkB,GAAzB,SAAOA,kBAAkBA,CAC9B9L,OAAe,EACfsG,OAAkB,EAClBpG,QAAmB,EACnBD,KAAgB,EAChBqL,SAAiB;IAEjB,OAAOX,iBAAiB,CAAC3B,SAAS,CAACC,kBAAkB,CAACtd,iBAAiB,CAAC6gB,mBAAmB,EAAE,CAC3FxM,OAAO,EACPsG,OAAO,EACPpG,QAAQ,EACRD,KAAK,EACLqL,SAAS,CACV,CAAC;;;;EAGJX,iBAAA,CACc8B,aAAa,GAApB,SAAOA,aAAaA,CAACZ,MAAuB,EAAEa,sBAA8B,EAAE9Z,OAAe;IAClG,OAAO;MACL+Z,MAAM,EAAE;QACNlK,IAAI,EAAE,0BAA0B;QAChC7P,OAAO,EAAPA,OAAO;QACPga,iBAAiB,EAAEF;OACpB;MACDG,KAAK,EAAE9C,gBAAgB;MACvB+C,MAAM,EAAEjB;KACT;GACF;EAAA,OAAAlB,iBAAA;AAAA;AAjRaA,2BAAS,gBAAc,IAAItB,aAAS,CAACG,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;"}