/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IProtocolFeeControllerInterface extends ethers.utils.Interface {
  functions: {
    "protocolFeeForPool(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "protocolFeeForPool",
    values: [
      {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "protocolFeeForPool",
    data: BytesLike
  ): Result;

  events: {};
}

export class IProtocolFeeController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IProtocolFeeControllerInterface;

  functions: {
    protocolFeeForPool(
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      overrides?: CallOverrides
    ): Promise<{
      protocolFee: number;
      0: number;
    }>;

    "protocolFeeForPool((address,address,uint24,int24,address))"(
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      overrides?: CallOverrides
    ): Promise<{
      protocolFee: number;
      0: number;
    }>;
  };

  protocolFeeForPool(
    poolKey: {
      currency0: string;
      currency1: string;
      fee: BigNumberish;
      tickSpacing: BigNumberish;
      hooks: string;
    },
    overrides?: CallOverrides
  ): Promise<number>;

  "protocolFeeForPool((address,address,uint24,int24,address))"(
    poolKey: {
      currency0: string;
      currency1: string;
      fee: BigNumberish;
      tickSpacing: BigNumberish;
      hooks: string;
    },
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    protocolFeeForPool(
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      overrides?: CallOverrides
    ): Promise<number>;

    "protocolFeeForPool((address,address,uint24,int24,address))"(
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    protocolFeeForPool(
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "protocolFeeForPool((address,address,uint24,int24,address))"(
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    protocolFeeForPool(
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "protocolFeeForPool((address,address,uint24,int24,address))"(
      poolKey: {
        currency0: string;
        currency1: string;
        fee: BigNumberish;
        tickSpacing: BigNumberish;
        hooks: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
