/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Permit2Forwarder } from "../Permit2Forwarder";

export class Permit2Forwarder__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_permit2: string, overrides?: Overrides): Promise<Permit2Forwarder> {
    return super.deploy(_permit2, overrides || {}) as Promise<Permit2Forwarder>;
  }
  getDeployTransaction(
    _permit2: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_permit2, overrides || {});
  }
  attach(address: string): Permit2Forwarder {
    return super.attach(address) as Permit2Forwarder;
  }
  connect(signer: Signer): Permit2Forwarder__factory {
    return super.connect(signer) as Permit2Forwarder__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Permit2Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Permit2Forwarder;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAllowanceTransfer",
        name: "_permit2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint160",
                name: "amount",
                type: "uint160",
              },
              {
                internalType: "uint48",
                name: "expiration",
                type: "uint48",
              },
              {
                internalType: "uint48",
                name: "nonce",
                type: "uint48",
              },
            ],
            internalType: "struct IAllowanceTransfer.PermitDetails",
            name: "details",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sigDeadline",
            type: "uint256",
          },
        ],
        internalType: "struct IAllowanceTransfer.PermitSingle",
        name: "permitSingle",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permit",
    outputs: [
      {
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "contract IAllowanceTransfer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint160",
                name: "amount",
                type: "uint160",
              },
              {
                internalType: "uint48",
                name: "expiration",
                type: "uint48",
              },
              {
                internalType: "uint48",
                name: "nonce",
                type: "uint48",
              },
            ],
            internalType: "struct IAllowanceTransfer.PermitDetails[]",
            name: "details",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sigDeadline",
            type: "uint256",
          },
        ],
        internalType: "struct IAllowanceTransfer.PermitBatch",
        name: "_permitBatch",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "permitBatch",
    outputs: [
      {
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a034607357601f61080938819003918201601f19168301916001600160401b03831184841017607757808492602094604052833981010312607357516001600160a01b038116810360735760805260405161077d908161008c823960805181818160c1015281816102b201526103840152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081622a3e3a146102d65750806312261ee71461026757632b67b5701461003e575f80fd5b6101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102545761007161059a565b60c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126102635760e43567ffffffffffffffff811161025f576100bb9036906004016105de565b606093917f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691823b1561025b5773ffffffffffffffffffffffffffffffffffffffff604051957f2b67b57000000000000000000000000000000000000000000000000000000000875216600486015260243573ffffffffffffffffffffffffffffffffffffffff811680910361025757602486015260443573ffffffffffffffffffffffffffffffffffffffff811680910361025757604486015260643565ffffffffffff811680910361025757606486015260843565ffffffffffff811680910361025757608486015260a43573ffffffffffffffffffffffffffffffffffffffff81168091036102575784866102098195839795839560a485015260c43560c485015261010060e48501526101048401916106d5565b03925af1918261023f575b50506102365750610232610226610713565b6040519182918261060c565b0390f35b61023290610226565b61024a828092610654565b6102545780610214565b80fd5b8480fd5b8380fd5b8280fd5b5080fd5b503461025457807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261025457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b60607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105965761030861059a565b906024359167ffffffffffffffff83116105965782360360607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126105965760443567ffffffffffffffff8111610596576103699036906004016105de565b9060609573ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001694853b156105965773ffffffffffffffffffffffffffffffffffffffff907f2a2d80d100000000000000000000000000000000000000000000000000000000885216600487015286602487015260c48601937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd826004013591018112156105965781016024600482013591019467ffffffffffffffff8211610596578160071b360386136105965760648801899052819052869460e48601949392915f5b818110610503575050506104d75f96948694889460448573ffffffffffffffffffffffffffffffffffffffff61049b60248b99016105bd565b166084880152013560a48601527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8584030160448601526106d5565b03925af190816104f3575b506102365750610232610226610713565b5f6104fd91610654565b5f6104e2565b9196509192939473ffffffffffffffffffffffffffffffffffffffff610528886105bd565b16815260208701359073ffffffffffffffffffffffffffffffffffffffff82168092036105965760808165ffffffffffff6105808e8261057360408f60019a60208a9b0152016106c2565b1660408501528c016106c2565b168d820152019701910191889695949392610462565b5f80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361059657565b359073ffffffffffffffffffffffffffffffffffffffff8216820361059657565b9181601f840112156105965782359167ffffffffffffffff8311610596576020838186019501011161059657565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761069557604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b359065ffffffffffff8216820361059657565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b3d1561076b573d9067ffffffffffffffff8211610695576040519161076060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610654565b82523d5f602084013e565b60609056fea164736f6c634300081a000a";
