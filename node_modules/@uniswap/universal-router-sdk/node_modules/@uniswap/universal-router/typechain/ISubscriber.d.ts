/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ISubscriberInterface extends ethers.utils.Interface {
  functions: {
    "notifyModifyLiquidity(uint256,int256,int256)": FunctionFragment;
    "notifySubscribe(uint256,bytes)": FunctionFragment;
    "notifyTransfer(uint256,address,address)": FunctionFragment;
    "notifyUnsubscribe(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "notifyModifyLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifySubscribe",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyTransfer",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyUnsubscribe",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "notifyModifyLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifySubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyUnsubscribe",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISubscriber extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ISubscriberInterface;

  functions: {
    notifyModifyLiquidity(
      tokenId: BigNumberish,
      liquidityChange: BigNumberish,
      feesAccrued: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifyModifyLiquidity(uint256,int256,int256)"(
      tokenId: BigNumberish,
      liquidityChange: BigNumberish,
      feesAccrued: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    notifySubscribe(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifySubscribe(uint256,bytes)"(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    notifyTransfer(
      tokenId: BigNumberish,
      previousOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifyTransfer(uint256,address,address)"(
      tokenId: BigNumberish,
      previousOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    notifyUnsubscribe(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifyUnsubscribe(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  notifyModifyLiquidity(
    tokenId: BigNumberish,
    liquidityChange: BigNumberish,
    feesAccrued: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifyModifyLiquidity(uint256,int256,int256)"(
    tokenId: BigNumberish,
    liquidityChange: BigNumberish,
    feesAccrued: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  notifySubscribe(
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifySubscribe(uint256,bytes)"(
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  notifyTransfer(
    tokenId: BigNumberish,
    previousOwner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifyTransfer(uint256,address,address)"(
    tokenId: BigNumberish,
    previousOwner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  notifyUnsubscribe(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifyUnsubscribe(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    notifyModifyLiquidity(
      tokenId: BigNumberish,
      liquidityChange: BigNumberish,
      feesAccrued: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyModifyLiquidity(uint256,int256,int256)"(
      tokenId: BigNumberish,
      liquidityChange: BigNumberish,
      feesAccrued: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    notifySubscribe(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifySubscribe(uint256,bytes)"(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyTransfer(
      tokenId: BigNumberish,
      previousOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyTransfer(uint256,address,address)"(
      tokenId: BigNumberish,
      previousOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyUnsubscribe(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyUnsubscribe(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    notifyModifyLiquidity(
      tokenId: BigNumberish,
      liquidityChange: BigNumberish,
      feesAccrued: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifyModifyLiquidity(uint256,int256,int256)"(
      tokenId: BigNumberish,
      liquidityChange: BigNumberish,
      feesAccrued: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    notifySubscribe(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifySubscribe(uint256,bytes)"(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    notifyTransfer(
      tokenId: BigNumberish,
      previousOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifyTransfer(uint256,address,address)"(
      tokenId: BigNumberish,
      previousOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    notifyUnsubscribe(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifyUnsubscribe(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    notifyModifyLiquidity(
      tokenId: BigNumberish,
      liquidityChange: BigNumberish,
      feesAccrued: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifyModifyLiquidity(uint256,int256,int256)"(
      tokenId: BigNumberish,
      liquidityChange: BigNumberish,
      feesAccrued: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    notifySubscribe(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifySubscribe(uint256,bytes)"(
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    notifyTransfer(
      tokenId: BigNumberish,
      previousOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifyTransfer(uint256,address,address)"(
      tokenId: BigNumberish,
      previousOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    notifyUnsubscribe(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifyUnsubscribe(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
