{
  "version": 3,
  "sources": ["../../@uniswap/v3-periphery/artifacts/contracts/interfaces/IMulticall.sol/IMulticall.json", "../../@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json", "../../@uniswap/v3-periphery/artifacts/contracts/interfaces/ISelfPermit.sol/ISelfPermit.json", "../../@uniswap/v3-periphery/artifacts/contracts/interfaces/IPeripheryPaymentsWithFee.sol/IPeripheryPaymentsWithFee.json", "../../@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json", "../../@uniswap/swap-router-contracts/artifacts/contracts/lens/QuoterV2.sol/QuoterV2.json", "../../@uniswap/v3-staker/artifacts/contracts/UniswapV3Staker.sol/UniswapV3Staker.json", "../../@uniswap/v3-periphery/artifacts/contracts/SwapRouter.sol/SwapRouter.json", "../../@uniswap/v3-sdk/src/constants.ts", "../../@uniswap/v3-sdk/src/internalConstants.ts", "../../@uniswap/v3-sdk/src/utils/computePoolAddress.ts", "../../@uniswap/v3-sdk/src/utils/fullMath.ts", "../../@uniswap/v3-sdk/src/utils/sqrtPriceMath.ts", "../../@uniswap/v3-sdk/src/utils/swapMath.ts", "../../@uniswap/v3-sdk/src/utils/liquidityMath.ts", "../../@uniswap/v3-sdk/src/utils/mostSignificantBit.ts", "../../@uniswap/v3-sdk/src/utils/tickMath.ts", "../../@uniswap/v3-sdk/src/utils/v3swap.ts", "../../@uniswap/v3-sdk/src/entities/tickDataProvider.ts", "../../@uniswap/v3-sdk/src/utils/isSorted.ts", "../../@uniswap/v3-sdk/src/utils/tickList.ts", "../../@uniswap/v3-sdk/src/utils/calldata.ts", "../../@uniswap/v3-sdk/src/utils/encodeRouteToPath.ts", "../../@uniswap/v3-sdk/src/utils/encodeSqrtRatioX96.ts", "../../@uniswap/v3-sdk/src/utils/maxLiquidityForAmounts.ts", "../../@uniswap/v3-sdk/src/utils/nearestUsableTick.ts", "../../@uniswap/v3-sdk/src/utils/position.ts", "../../@uniswap/v3-sdk/src/utils/priceTickConversions.ts", "../../@uniswap/v3-sdk/src/utils/tickLibrary.ts", "../../@uniswap/v3-sdk/src/entities/tick.ts", "../../@uniswap/v3-sdk/src/entities/tickListDataProvider.ts", "../../@uniswap/v3-sdk/src/entities/pool.ts", "../../@uniswap/v3-sdk/src/entities/position.ts", "../../@uniswap/v3-sdk/src/entities/route.ts", "../../@uniswap/v3-sdk/src/entities/trade.ts", "../../@uniswap/v3-sdk/src/multicall.ts", "../../@uniswap/v3-sdk/src/selfPermit.ts", "../../@uniswap/v3-sdk/src/payments.ts", "../../@uniswap/v3-sdk/src/nonfungiblePositionManager.ts", "../../@uniswap/v3-sdk/src/quoter.ts", "../../@uniswap/v3-sdk/src/staker.ts", "../../@uniswap/v3-sdk/src/swapRouter.ts"],
  "sourcesContent": ["{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IMulticall\",\n  \"sourceName\": \"contracts/interfaces/IMulticall.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"NonfungiblePositionManager\",\n  \"sourceName\": \"contracts/NonfungiblePositionManager.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_WETH9\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_tokenDescriptor_\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"ApprovalForAll\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Collect\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"DecreaseLiquidity\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"IncreaseLiquidity\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DOMAIN_SEPARATOR\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"PERMIT_TYPEHASH\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH9\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"baseURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"pure\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"tokenId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint128\",\n              \"name\": \"amount0Max\",\n              \"type\": \"uint128\"\n            },\n            {\n              \"internalType\": \"uint128\",\n              \"name\": \"amount1Max\",\n              \"type\": \"uint128\"\n            }\n          ],\n          \"internalType\": \"struct INonfungiblePositionManager.CollectParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"collect\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token0\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token1\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint24\",\n          \"name\": \"fee\",\n          \"type\": \"uint24\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96\",\n          \"type\": \"uint160\"\n        }\n      ],\n      \"name\": \"createAndInitializePoolIfNecessary\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"pool\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"tokenId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint128\",\n              \"name\": \"liquidity\",\n              \"type\": \"uint128\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"decreaseLiquidity\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getApproved\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"tokenId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Desired\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Desired\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"increaseLiquidity\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"isApprovedForAll\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"token0\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"token1\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"int24\",\n              \"name\": \"tickLower\",\n              \"type\": \"int24\"\n            },\n            {\n              \"internalType\": \"int24\",\n              \"name\": \"tickUpper\",\n              \"type\": \"int24\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Desired\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Desired\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount0Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount1Min\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct INonfungiblePositionManager.MintParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"mint\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"ownerOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"permit\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"positions\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint96\",\n          \"name\": \"nonce\",\n          \"type\": \"uint96\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token0\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token1\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint24\",\n          \"name\": \"fee\",\n          \"type\": \"uint24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeGrowthInside0LastX128\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeGrowthInside1LastX128\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"tokensOwed0\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"tokensOwed1\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"refundETH\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"_data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"safeTransferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermit\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowed\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowedIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"setApprovalForAll\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"name\": \"supportsInterface\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenByIndex\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenOfOwnerByIndex\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"tokenURI\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0Owed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1Owed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"uniswapV3MintCallback\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x610120604052600d80546001600160b01b0319166001176001600160b01b0316600160b01b1790553480156200003457600080fd5b50604051620062e9380380620062e98339810160408190526200005791620002db565b82826040518060400160405280601b81526020017f556e697377617020563320506f736974696f6e73204e46542d563100000000008152506040518060400160405280600a815260200169554e492d56332d504f5360b01b815250604051806040016040528060018152602001603160f81b8152508282620000e66301ffc9a760e01b6200018d60201b60201c565b8151620000fb90600690602085019062000212565b5080516200011190600790602084019062000212565b50620001246380ac58cd60e01b6200018d565b62000136635b5e139f60e01b6200018d565b6200014863780e9d6360e01b6200018d565b50508251602093840120608052805192019190912060a052506001600160601b0319606092831b811660c05290821b811660e05291901b166101005250620003249050565b6001600160e01b03198082161415620001ed576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200024a576000855562000295565b82601f106200026557805160ff191683800117855562000295565b8280016001018555821562000295579182015b828111156200029557825182559160200191906001019062000278565b50620002a3929150620002a7565b5090565b5b80821115620002a35760008155600101620002a8565b80516001600160a01b0381168114620002d657600080fd5b919050565b600080600060608486031215620002f0578283fd5b620002fb84620002be565b92506200030b60208501620002be565b91506200031b60408501620002be565b90509250925092565b60805160a05160c05160601c60e05160601c6101005160601c615f40620003a960003980612a835250806102995280611718528061180e52806118965280613e5d5280613ea35280613f17525080610aa75280610dde5280610ea55280612a1d5280612b235280612e4452806136e15250806114ff5250806114de5250615f406000f3fe6080604052600436106102895760003560e01c80636352211e11610153578063ac9650d8116100cb578063d34879971161007f578063e985e9c511610064578063e985e9c5146106f5578063f3995c6714610715578063fc6f7865146107285761030d565b8063d3487997146106c2578063df2ab5bb146106e25761030d565b8063c2e3140a116100b0578063c2e3140a1461067a578063c45a01551461068d578063c87b56dd146106a25761030d565b8063ac9650d81461063a578063b88d4fde1461065a5761030d565b8063883164561161012257806399fbab881161010757806399fbab88146105cf578063a22cb46514610607578063a4a78f0c146106275761030d565b8063883164561461059757806395d89b41146105ba5761030d565b80636352211e1461052f5780636c0360eb1461054f57806370a08231146105645780637ac2ff7b146105845761030d565b806323b872dd1161020157806342966c68116101b557806349404b7c1161019a57806349404b7c146104e75780634aa4a4fc146104fa5780634f6ccce71461050f5761030d565b806342966c68146104c15780634659a494146104d45761030d565b806330adf81f116101e657806330adf81f146104775780633644e5151461048c57806342842e0e146104a15761030d565b806323b872dd146104375780632f745c59146104575761030d565b80630c49ccbe1161025857806313ead5621161023d57806313ead562146103e057806318160ddd146103f3578063219f5d17146104155761030d565b80630c49ccbe146103b757806312210e8a146103d85761030d565b806301ffc9a71461031257806306fdde0314610348578063081812fc1461036a578063095ea7b3146103975761030d565b3661030d57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461030b576040805162461bcd60e51b815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561031e57600080fd5b5061033261032d3660046153a6565b61073b565b60405161033f919061591e565b60405180910390f35b34801561035457600080fd5b5061035d610776565b60405161033f9190615971565b34801561037657600080fd5b5061038a6103853660046156b8565b61080c565b60405161033f91906157e2565b3480156103a357600080fd5b5061030b6103b2366004615270565b610868565b6103ca6103c5366004615483565b61093e565b60405161033f929190615b42565b61030b610daa565b61038a6103ee366004615103565b610dbc565b3480156103ff57600080fd5b506104086110c9565b60405161033f9190615929565b610428610423366004615494565b6110da565b60405161033f93929190615afd565b34801561044357600080fd5b5061030b61045236600461515c565b611413565b34801561046357600080fd5b50610408610472366004615270565b61146a565b34801561048357600080fd5b50610408611495565b34801561049857600080fd5b506104086114b9565b3480156104ad57600080fd5b5061030b6104bc36600461515c565b611577565b61030b6104cf3660046156b8565b611592565b61030b6104e23660046152dc565b611661565b61030b6104f53660046156d0565b611714565b34801561050657600080fd5b5061038a611894565b34801561051b57600080fd5b5061040861052a3660046156b8565b6118b8565b34801561053b57600080fd5b5061038a61054a3660046156b8565b6118ce565b34801561055b57600080fd5b5061035d6118f6565b34801561057057600080fd5b5061040861057f3660046150af565b6118fb565b61030b6105923660046152dc565b611963565b6105aa6105a5366004615550565b611e0f565b60405161033f9493929190615b1e565b3480156105c657600080fd5b5061035d612370565b3480156105db57600080fd5b506105ef6105ea3660046156b8565b6123d1565b60405161033f9c9b9a99989796959493929190615b50565b34801561061357600080fd5b5061030b610622366004615243565b612600565b61030b6106353660046152dc565b612723565b61064d610648366004615337565b6127d5565b60405161033f91906158a0565b34801561066657600080fd5b5061030b61067536600461519c565b612915565b61030b6106883660046152dc565b612973565b34801561069957600080fd5b5061038a612a1b565b3480156106ae57600080fd5b5061035d6106bd3660046156b8565b612a3f565b3480156106ce57600080fd5b5061030b6106dd366004615717565b612b0e565b61030b6106f036600461529b565b612b8c565b34801561070157600080fd5b506103326107103660046150cb565b612c6f565b61030b6107233660046152dc565b612c9d565b6103ca61073636600461546c565b612d28565b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b820191906000526020600020905b8154815290600101906020018083116107e557829003601f168201915b5050505050905090565b600061081782613246565b61083c5760405162461bcd60e51b8152600401610833906159bb565b60405180910390fd5b506000908152600c60205260409020546c0100000000000000000000000090046001600160a01b031690565b6000610873826118ce565b9050806001600160a01b0316836001600160a01b031614156108c65760405162461bcd60e51b8152600401808060200182810382526021815260200180615ee26021913960400191505060405180910390fd5b806001600160a01b03166108d8613253565b6001600160a01b031614806108f457506108f481610710613253565b61092f5760405162461bcd60e51b8152600401808060200182810382526038815260200180615e0c6038913960400191505060405180910390fd5b6109398383613257565b505050565b600080823561094d33826132db565b6109695760405162461bcd60e51b815260040161083390615984565b836080013580610977613377565b11156109ca576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b60006109dc6040870160208801615562565b6001600160801b0316116109ef57600080fd5b84356000908152600c602090815260409182902060018101549092600160801b9091046001600160801b031691610a2a918901908901615562565b6001600160801b0316816001600160801b03161015610a4857600080fd5b60018281015469ffffffffffffffffffff166000908152600b60209081526040808320815160608101835281546001600160a01b039081168252919095015490811692850192909252600160a01b90910462ffffff1690830152610acc7f00000000000000000000000000000000000000000000000000000000000000008361337b565b60018501549091506001600160a01b0382169063a34123a7906a01000000000000000000008104600290810b91600160681b9004900b610b1260408e0160208f01615562565b6040518463ffffffff1660e01b8152600401610b309392919061594b565b6040805180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8191906156f4565b909850965060408901358810801590610b9e575088606001358710155b610bba5760405162461bcd60e51b815260040161083390615a18565b6001840154600090610bea9030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b8152600401610c1b9190615929565b60a06040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b91906155ac565b50509250925050610c9087600201548303876001600160801b0316600160801b6134d1565b6004880180546fffffffffffffffffffffffffffffffff198116928e016001600160801b039182160181169290921790556003880154610cda91908303908816600160801b6134d1565b6004880180546001600160801b03808216938e01600160801b9283900482160116029190911790556002870182905560038701819055610d2060408d0160208e01615562565b86038760010160106101000a8154816001600160801b0302191690836001600160801b031602179055508b600001357f26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b48d6020016020810190610d839190615562565b8d8d604051610d9493929190615afd565b60405180910390a2505050505050505050915091565b4715610dba57610dba3347613580565b565b6000836001600160a01b0316856001600160a01b031610610ddc57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631698ee828686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff168152602001935050505060206040518083038186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d6020811015610e9157600080fd5b505190506001600160a01b038116610fe0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a16712958686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff1681526020019350505050602060405180830381600087803b158015610f3057600080fd5b505af1158015610f44573d6000803e3d6000fd5b505050506040513d6020811015610f5a57600080fd5b5051604080517ff637731d0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519293509083169163f637731d9160248082019260009290919082900301818387803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050506110c1565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d60e081101561104557600080fd5b505190506001600160a01b0381166110bf57816001600160a01b031663f637731d846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b505050505b505b949350505050565b60006110d56002613689565b905090565b60008060008360a00135806110ed613377565b1115611140576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b84356000908152600c6020908152604080832060018082015469ffffffffffffffffffff81168652600b855283862084516060808201875282546001600160a01b039081168352929094015480831682890190815262ffffff600160a01b9092048216838901908152885161014081018a528451861681529151909416818a01529251168287015230828501526a01000000000000000000008304600290810b810b608080850191909152600160681b909404810b900b60a0830152958c013560c0820152938b013560e0850152908a0135610100840152890135610120830152929061122c90613694565b6001870154939a50919850965091506000906112669030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016112979190615929565b60a06040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e791906155ac565b50509250925050611323866002015483038760010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b6004870180546001600160801b0380821690930183166fffffffffffffffffffffffffffffffff19909116179055600387015460018801546113739291840391600160801b9182900416906134d1565b6004870180546001600160801b03600160801b80830482169094018116840291811691909117909155600288018490556003880183905560018801805483810483168e018316909302929091169190911790556040518b35907f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f906113fd908d908d908d90615afd565b60405180910390a2505050505050509193909250565b61142461141e613253565b826132db565b61145f5760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b6109398383836138cf565b6001600160a01b038216600090815260016020526040812061148c9083613a1b565b90505b92915050565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611526613a27565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b61093983838360405180602001604052806000815250612915565b8061159d33826132db565b6115b95760405162461bcd60e51b815260040161083390615984565b6000828152600c602052604090206001810154600160801b90046001600160801b03161580156115f4575060048101546001600160801b0316155b801561161257506004810154600160801b90046001600160801b0316155b61162e5760405162461bcd60e51b815260040161083390615a86565b6000838152600c602052604081208181556001810182905560028101829055600381018290556004015561093983613a2b565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e4810183905290516001600160a01b03881691638fcbaf0c9161010480830192600092919082900301818387803b1580156116f457600080fd5b505af1158015611708573d6000803e3d6000fd5b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d60208110156117ad57600080fd5b5051905082811015611806576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610939577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561187257600080fd5b505af1158015611886573d6000803e3d6000fd5b505050506109398282613580565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806118c6600284613af8565b509392505050565b600061148f82604051806060016040528060298152602001615e6e6029913960029190613b16565b606090565b60006001600160a01b0382166119425760405162461bcd60e51b815260040180806020018281038252602a815260200180615e44602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061148f90613689565b8361196c613377565b11156119bf576040805162461bcd60e51b815260206004820152600e60248201527f5065726d69742065787069726564000000000000000000000000000000000000604482015290519081900360640190fd5b60006119c96114b9565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad88886119f581613b23565b604080516020808201969096526001600160a01b03909416848201526060840192909252608083015260a08083018a90528151808403909101815260c0830182528051908401207f190100000000000000000000000000000000000000000000000000000000000060e084015260e283019490945261010280830194909452805180830390940184526101229091019052815191012090506000611a98876118ce565b9050806001600160a01b0316886001600160a01b03161415611aeb5760405162461bcd60e51b8152600401808060200182810382526027815260200180615d6f6027913960400191505060405180910390fd5b611af481613b62565b15611ccf576040805160208082018790528183018690527fff0000000000000000000000000000000000000000000000000000000000000060f889901b16606083015282516041818403018152606183018085527f1626ba7e0000000000000000000000000000000000000000000000000000000090526065830186815260858401948552815160a585015281516001600160a01b03871695631626ba7e958995919260c59091019185019080838360005b83811015611bbe578181015183820152602001611ba6565b50505050905090810190601f168015611beb5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611c0957600080fd5b505afa158015611c1d573d6000803e3d6000fd5b505050506040513d6020811015611c3357600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f1626ba7e0000000000000000000000000000000000000000000000000000000014611cca576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b611dfb565b600060018387878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611d2b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d93576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316816001600160a01b031614611df9576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b505b611e058888613257565b5050505050505050565b60008060008084610140013580611e24613377565b1115611e77576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b604080516101408101909152600090611f439080611e9860208b018b6150af565b6001600160a01b03168152602001896020016020810190611eb991906150af565b6001600160a01b03168152602001611ed760608b0160408c0161569e565b62ffffff168152306020820152604001611ef760808b0160608c016153e6565b60020b8152602001611f0f60a08b0160808c016153e6565b60020b81526020018960a0013581526020018960c0013581526020018960e001358152602001896101000135815250613694565b92975090955093509050611fb7611f6261014089016101208a016150af565b600d80547fffffffffffffffffffff000000000000000000000000000000000000000000008116600175ffffffffffffffffffffffffffffffffffffffffffff92831690810190921617909155975087613b68565b6000611fe230611fcd60808b0160608c016153e6565b611fdd60a08c0160808d016153e6565b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016120139190615929565b60a06040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206391906155ac565b5050925092505060006120dc8560405180606001604052808e600001602081019061208e91906150af565b6001600160a01b031681526020018e60200160208101906120af91906150af565b6001600160a01b031681526020018e60400160208101906120d0919061569e565b62ffffff169052613c96565b905060405180610140016040528060006bffffffffffffffffffffffff16815260200160006001600160a01b031681526020018269ffffffffffffffffffff1681526020018c606001602081019061213491906153e6565b60020b815260200161214c60a08e0160808f016153e6565b60020b81526020018a6001600160801b0316815260200184815260200183815260200160006001600160801b0316815260200160006001600160801b0316815250600c60008c815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550606082015181600101600a6101000a81548162ffffff021916908360020b62ffffff160217905550608082015181600101600d6101000a81548162ffffff021916908360020b62ffffff16021790555060a08201518160010160106101000a8154816001600160801b0302191690836001600160801b0316021790555060c0820151816002015560e082015181600301556101008201518160040160006101000a8154816001600160801b0302191690836001600160801b031602179055506101208201518160040160106101000a8154816001600160801b0302191690836001600160801b03160217905550905050897f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f8a8a8a60405161235b93929190615afd565b60405180910390a25050505050509193509193565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b6000818152600c6020908152604080832081516101408101835281546bffffffffffffffffffffffff811682526001600160a01b036c010000000000000000000000009091041693810193909352600181015469ffffffffffffffffffff81169284018390526a01000000000000000000008104600290810b810b810b6060860152600160681b8204810b810b810b60808601526001600160801b03600160801b92839004811660a08701529083015460c0860152600383015460e0860152600490920154808316610100860152041661012083015282918291829182918291829182918291829182918291906124da5760405162461bcd60e51b815260040161083390615a4f565b6000600b6000836040015169ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905081600001518260200151826000015183602001518460400151866060015187608001518860a001518960c001518a60e001518b61010001518c61012001519d509d509d509d509d509d509d509d509d509d509d509d50505091939597999b5091939597999b565b612608613253565b6001600160a01b0316826001600160a01b0316141561266e576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806005600061267b613253565b6001600160a01b0390811682526020808301939093526040918201600090812091871680825291909352912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091556126dd613253565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051600019916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b15801561278d57600080fd5b505afa1580156127a1573d6000803e3d6000fd5b505050506040513d60208110156127b757600080fd5b505110156127cd576127cd868686868686611661565b505050505050565b60608167ffffffffffffffff811180156127ee57600080fd5b5060405190808252806020026020018201604052801561282257816020015b606081526020019060019003908161280d5790505b50905060005b8281101561290e576000803086868581811061284057fe5b90506020028101906128529190615bef565b6040516128609291906157d2565b600060405180830381855af49150503d806000811461289b576040519150601f19603f3d011682016040523d82523d6000602084013e6128a0565b606091505b5091509150816128ec576044815110156128b957600080fd5b600481019050808060200190518101906128d39190615402565b60405162461bcd60e51b81526004016108339190615971565b808484815181106128f957fe5b60209081029190910101525050600101612828565b5092915050565b612926612920613253565b836132db565b6129615760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b61296d84848484613de6565b50505050565b604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152905186916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b1580156129db57600080fd5b505afa1580156129ef573d6000803e3d6000fd5b505050506040513d6020811015612a0557600080fd5b505110156127cd576127cd868686868686612c9d565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060612a4a82613246565b612a5357600080fd5b6040517fe9dc63750000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e9dc637590612aba9030908690600401615932565b60006040518083038186803b158015612ad257600080fd5b505afa158015612ae6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261148f9190810190615402565b6000612b1c828401846154a5565b9050612b4c7f00000000000000000000000000000000000000000000000000000000000000008260000151613e38565b508415612b67578051516020820151612b6791903388613e5b565b8315612b8557612b8581600001516020015182602001513387613e5b565b5050505050565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612bdb57600080fd5b505afa158015612bef573d6000803e3d6000fd5b505050506040513d6020811015612c0557600080fd5b5051905082811015612c5e576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561296d5761296d848383613feb565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c4810183905290516001600160a01b0388169163d505accf9160e480830192600092919082900301818387803b1580156116f457600080fd5b6000808235612d3733826132db565b612d535760405162461bcd60e51b815260040161083390615984565b6000612d656060860160408701615562565b6001600160801b03161180612d9257506000612d876080860160608701615562565b6001600160801b0316115b612d9b57600080fd5b600080612dae60408701602088016150af565b6001600160a01b031614612dd157612dcc60408601602087016150af565b612dd3565b305b85356000908152600c6020908152604080832060018082015469ffffffffffffffffffff168552600b8452828520835160608101855281546001600160a01b039081168252919092015490811694820194909452600160a01b90930462ffffff169183019190915292935090612e697f00000000000000000000000000000000000000000000000000000000000000008361337b565b600484015460018501549192506001600160801b0380821692600160801b92839004821692900416156130865760018501546040517fa34123a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385169163a34123a791612f00916a01000000000000000000008104600290810b92600160681b909204900b9060009060040161594b565b6040805180830381600087803b158015612f1957600080fd5b505af1158015612f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5191906156f4565b5050600185015460009081906001600160a01b0386169063514ea4bf90612f969030906a01000000000000000000008104600290810b91600160681b9004900b613477565b6040518263ffffffff1660e01b8152600401612fb29190615929565b60a06040518083038186803b158015612fca57600080fd5b505afa158015612fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300291906155ac565b5050925092505061303e876002015483038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b84019350613077876003015482038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b60028801929092556003870155015b6000806001600160801b0384166130a360608e0160408f01615562565b6001600160801b0316116130c6576130c160608d0160408e01615562565b6130c8565b835b836001600160801b03168d60600160208101906130e59190615562565b6001600160801b0316116131085761310360808e0160608f01615562565b61310a565b835b60018901546040517f4f1eb3d80000000000000000000000000000000000000000000000000000000081529294509092506001600160a01b03871691634f1eb3d89161317d918c916a01000000000000000000008104600290810b92600160681b909204900b9088908890600401615839565b6040805180830381600087803b15801561319657600080fd5b505af11580156131aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ce919061557e565b6004890180546fffffffffffffffffffffffffffffffff196001600160801b03918216600160801b878a0384160217168689038216179091556040519281169d50169a508c35907f40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f0190610d94908b9086908690615876565b600061148f60028361417b565b3390565b6000818152600c6020526040902080546bffffffffffffffffffffffff166c010000000000000000000000006001600160a01b0385169081029190911790915581906132a2826118ce565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006132e682613246565b6133215760405162461bcd60e51b815260040180806020018281038252602c815260200180615de0602c913960400191505060405180910390fd5b600061332c836118ce565b9050806001600160a01b0316846001600160a01b031614806133675750836001600160a01b031661335c8461080c565b6001600160a01b0316145b806110c157506110c18185612c6f565b4290565b600081602001516001600160a01b031682600001516001600160a01b0316106133a357600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516bffffffffffffffffffffffff19606086901b16602080830191909152600285810b60e890811b60348501529085900b901b60378301528251601a818403018152603a90920190925280519101205b9392505050565b600080806000198587098686029250828110908390030390508061350757600084116134fc57600080fd5b5082900490506134ca565b80841161351357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106135cc5780518252601f1990920191602091820191016135ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461362e576040519150601f19603f3d011682016040523d82523d6000602084013e613633565b606091505b5050905080610939576040805162461bcd60e51b815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148f82614187565b6000806000806000604051806060016040528087600001516001600160a01b0316815260200187602001516001600160a01b03168152602001876040015162ffffff1681525090506137067f00000000000000000000000000000000000000000000000000000000000000008261337b565b91506000826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561374357600080fd5b505afa158015613757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377b919061560d565b50505050505090506000613792886080015161418b565b905060006137a38960a0015161418b565b90506137ba8383838c60c001518d60e001516144d9565b9750505050816001600160a01b0316633c8a7d8d876060015188608001518960a00151896040518060400160405280888152602001336001600160a01b031681525060405160200161380c9190615abd565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161383b9594939291906157f6565b6040805180830381600087803b15801561385457600080fd5b505af1158015613868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388c91906156f4565b610100880151919550935084108015906138ab57508561012001518310155b6138c75760405162461bcd60e51b815260040161083390615a18565b509193509193565b826001600160a01b03166138e2826118ce565b6001600160a01b0316146139275760405162461bcd60e51b8152600401808060200182810382526029815260200180615eb96029913960400191505060405180910390fd5b6001600160a01b03821661396c5760405162461bcd60e51b8152600401808060200182810382526024815260200180615d966024913960400191505060405180910390fd5b613977838383610939565b613982600082613257565b6001600160a01b03831660009081526001602052604090206139a4908261459d565b506001600160a01b03821660009081526001602052604090206139c790826145a9565b506139d4600282846145b5565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061148c83836145cb565b4690565b6000613a36826118ce565b9050613a4481600084610939565b613a4f600083613257565b6000828152600860205260409020546002600019610100600184161502019091160415613a8d576000828152600860205260408120613a8d9161501f565b6001600160a01b0381166000908152600160205260409020613aaf908361459d565b50613abb60028361462f565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000808080613b07868661463b565b909450925050505b9250929050565b60006110c18484846146b6565b6000908152600c6020526040902080546bffffffffffffffffffffffff19811660016bffffffffffffffffffffffff9283169081019092161790915590565b3b151590565b6001600160a01b038216613bc3576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b613bcc81613246565b15613c1e576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b613c2a60008383610939565b6001600160a01b0382166000908152600160205260409020613c4c90826145a9565b50613c59600282846145b5565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0382166000908152600a602052604090205469ffffffffffffffffffff168061148f5750600d8054600169ffffffffffffffffffff76010000000000000000000000000000000000000000000080840482168381019092160275ffffffffffffffffffffffffffffffffffffffffffff909316929092179092556001600160a01b038085166000908152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001686179055848352600b825291829020865181549085167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825591870151950180549287015162ffffff16600160a01b027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff969094169290911691909117939093161790915592915050565b613df18484846138cf565b613dfd84848484614780565b61296d5760405162461bcd60e51b8152600401808060200182810382526032815260200180615d3d6032913960400191505060405180910390fd5b6000613e44838361337b565b9050336001600160a01b0382161461148f57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148015613e9c5750804710155b15613fbe577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613efc57600080fd5b505af1158015613f10573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613f8c57600080fd5b505af1158015613fa0573d6000803e3d6000fd5b505050506040513d6020811015613fb657600080fd5b5061296d9050565b6001600160a01b038316301415613fdf57613fda848383613feb565b61296d565b61296d8484848461495c565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b602083106140955780518252601f199092019160209182019101614076565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146140f7576040519150601f19603f3d011682016040523d82523d6000602084013e6140fc565b606091505b509150915081801561412a57508051158061412a575080806020019051602081101561412757600080fd5b50515b612b85576040805162461bcd60e51b815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148c8383614af4565b5490565b60008060008360020b126141a2578260020b6141aa565b8260020b6000035b9050620d89e8811115614204576040805162461bcd60e51b815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001821661421857600160801b61422a565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600282161561425e576ffff97272373d413259a46990580e213a0260801c5b600482161561427d576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561429c576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156142bb576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156142da576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156142f9576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615614318576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615614338576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615614358576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615614378576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615614398576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156143b8576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156143d8576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156143f8576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615614418576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615614439576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615614459576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615614478576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615614495576b048a170391f7dc42444e8fa20260801c5b60008460020b13156144b05780600019816144ac57fe5b0490505b6401000000008106156144c45760016144c7565b60005b60ff16602082901c0192505050919050565b6000836001600160a01b0316856001600160a01b031611156144f9579293925b846001600160a01b0316866001600160a01b0316116145245761451d858585614b0c565b9050614594565b836001600160a01b0316866001600160a01b0316101561458657600061454b878686614b0c565b9050600061455a878986614b78565b9050806001600160801b0316826001600160801b03161061457b578061457d565b815b92505050614594565b614591858584614b78565b90505b95945050505050565b600061148c8383614bbe565b600061148c8383614c84565b60006110c184846001600160a01b038516614cce565b8154600090821061460d5760405162461bcd60e51b8152600401808060200182810382526022815260200180615d1b6022913960400191505060405180910390fd5b82600001828154811061461c57fe5b9060005260206000200154905092915050565b600061148c8383614d65565b81546000908190831061467f5760405162461bcd60e51b8152600401808060200182810382526022815260200180615e976022913960400191505060405180910390fd5b600084600001848154811061469057fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816147515760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156147165781810151838201526020016146fe565b50505050905090810190601f1680156147435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061476457fe5b9060005260206000209060020201600101549150509392505050565b6000614794846001600160a01b0316613b62565b6147a0575060016110c1565b60006148f17f150b7a02000000000000000000000000000000000000000000000000000000006147ce613253565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561483557818101518382015260200161481d565b50505050905090810190601f1680156148625780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001615d3d603291396001600160a01b0388169190614e39565b9050600081806020019051602081101561490a57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001492505050949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b60208310614a0e5780518252601f1990920191602091820191016149ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614a70576040519150601f19603f3d011682016040523d82523d6000602084013e614a75565b606091505b5091509150818015614aa3575080511580614aa35750808060200190516020811015614aa057600080fd5b50515b6127cd576040805162461bcd60e51b815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60009081526001919091016020526040902054151590565b6000826001600160a01b0316846001600160a01b03161115614b2c579192915b6000614b58856001600160a01b0316856001600160a01b03166c010000000000000000000000006134d1565b9050614594614b7384838888036001600160a01b03166134d1565b614e48565b6000826001600160a01b0316846001600160a01b03161115614b98579192915b6110c1614b73836c010000000000000000000000008787036001600160a01b03166134d1565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614bf157fe5b9060005260206000200154905080876000018481548110614c0e57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080614c3e57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061148f565b600091505061148f565b6000614c908383614af4565b614cc65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561148f565b50600061148f565b600082815260018401602052604081205480614d335750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556134ca565b82856000016001830381548110614d4657fe5b90600052602060002090600202016001018190555060009150506134ca565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614d9857fe5b9060005260206000209060020201905080876000018481548110614db857fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080614df757fe5b600082815260208082206002600019909401938402018281556001908101839055929093558881528982019092526040822091909155945061148f9350505050565b60606110c18484600085614e5e565b806001600160801b038116811461077157600080fd5b606082471015614e9f5760405162461bcd60e51b8152600401808060200182810382526026815260200180615dba6026913960400191505060405180910390fd5b614ea885613b62565b614ef9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310614f375780518252601f199092019160209182019101614f18565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614f99576040519150601f19603f3d011682016040523d82523d6000602084013e614f9e565b606091505b5091509150614fae828286614fb9565b979650505050505050565b60608315614fc85750816134ca565b825115614fd85782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156147165781810151838201526020016146fe565b50805460018160011615610100020316600290046000825580601f106150455750615063565b601f0160209004906000526020600020908101906150639190615066565b50565b5b8082111561507b5760008155600101615067565b5090565b803561077181615cc4565b805161ffff8116811461077157600080fd5b803562ffffff8116811461077157600080fd5b6000602082840312156150c0578081fd5b81356134ca81615cc4565b600080604083850312156150dd578081fd5b82356150e881615cc4565b915060208301356150f881615cc4565b809150509250929050565b60008060008060808587031215615118578182fd5b843561512381615cc4565b9350602085013561513381615cc4565b92506151416040860161509c565b9150606085013561515181615cc4565b939692955090935050565b600080600060608486031215615170578081fd5b833561517b81615cc4565b9250602084013561518b81615cc4565b929592945050506040919091013590565b600080600080608085870312156151b1578182fd5b84356151bc81615cc4565b935060208501356151cc81615cc4565b925060408501359150606085013567ffffffffffffffff8111156151ee578182fd5b8501601f810187136151fe578182fd5b803561521161520c82615c76565b615c52565b818152886020838501011115615225578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215615255578182fd5b823561526081615cc4565b915060208301356150f881615cd9565b60008060408385031215615282578182fd5b823561528d81615cc4565b946020939093013593505050565b6000806000606084860312156152af578081fd5b83356152ba81615cc4565b92506020840135915060408401356152d181615cc4565b809150509250925092565b60008060008060008060c087890312156152f4578384fd5b86356152ff81615cc4565b95506020870135945060408701359350606087013561531d81615d0b565b9598949750929560808101359460a0909101359350915050565b60008060208385031215615349578182fd5b823567ffffffffffffffff80821115615360578384fd5b818501915085601f830112615373578384fd5b813581811115615381578485fd5b8660208083028501011115615394578485fd5b60209290920196919550909350505050565b6000602082840312156153b7578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146134ca578182fd5b6000602082840312156153f7578081fd5b81356134ca81615ce7565b600060208284031215615413578081fd5b815167ffffffffffffffff811115615429578182fd5b8201601f81018413615439578182fd5b805161544761520c82615c76565b81815285602083850101111561545b578384fd5b614594826020830160208601615c98565b60006080828403121561547d578081fd5b50919050565b600060a0828403121561547d578081fd5b600060c0828403121561547d578081fd5b600081830360808112156154b7578182fd5b6040516040810167ffffffffffffffff82821081831117156154d557fe5b8160405260608412156154e6578485fd5b60a08301935081841081851117156154fa57fe5b50826040528435925061550c83615cc4565b91825260208401359161551e83615cc4565b8260608301526155306040860161509c565b608083015281526155436060850161507f565b6020820152949350505050565b6000610160828403121561547d578081fd5b600060208284031215615573578081fd5b81356134ca81615cf6565b60008060408385031215615590578182fd5b825161559b81615cf6565b60208401519092506150f881615cf6565b600080600080600060a086880312156155c3578283fd5b85516155ce81615cf6565b80955050602086015193506040860151925060608601516155ee81615cf6565b60808701519092506155ff81615cf6565b809150509295509295909350565b600080600080600080600060e0888a031215615627578485fd5b875161563281615cc4565b602089015190975061564381615ce7565b95506156516040890161508a565b945061565f6060890161508a565b935061566d6080890161508a565b925060a088015161567d81615d0b565b60c089015190925061568e81615cd9565b8091505092959891949750929550565b6000602082840312156156af578081fd5b61148c8261509c565b6000602082840312156156c9578081fd5b5035919050565b600080604083850312156156e2578182fd5b8235915060208301356150f881615cc4565b60008060408385031215615706578182fd5b505080516020909101519092909150565b6000806000806060858703121561572c578182fd5b8435935060208501359250604085013567ffffffffffffffff80821115615751578384fd5b818701915087601f830112615764578384fd5b813581811115615772578485fd5b886020828501011115615783578485fd5b95989497505060200194505050565b600081518084526157aa816020860160208601615c98565b601f01601f19169290920160200192915050565b60020b9052565b6001600160801b03169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b60006001600160a01b03871682528560020b60208301528460020b60408301526001600160801b038416606083015260a06080830152614fae60a0830184615792565b6001600160a01b03959095168552600293840b60208601529190920b60408401526001600160801b03918216606084015216608082015260a00190565b6001600160a01b039390931683526001600160801b03918216602084015216604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015615911577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526158ff858351615792565b945092850192908501906001016158c5565b5092979650505050505050565b901515815260200190565b90815260200190565b6001600160a01b03929092168252602082015260400190565b600293840b81529190920b60208201526001600160801b03909116604082015260600190565b60006020825261148c6020830184615792565b6020808252600c908201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f507269636520736c69707061676520636865636b000000000000000000000000604082015260600190565b60208082526010908201527f496e76616c696420746f6b656e20494400000000000000000000000000000000604082015260600190565b6020808252600b908201527f4e6f7420636c6561726564000000000000000000000000000000000000000000604082015260600190565b815180516001600160a01b03908116835260208083015182168185015260409283015162ffffff1692840192909252920151909116606082015260800190565b6001600160801b039390931683526020830191909152604082015260600190565b9384526001600160801b039290921660208401526040830152606082015260800190565b918252602082015260400190565b6bffffffffffffffffffffffff8d1681526001600160a01b038c811660208301528b811660408301528a16606082015262ffffff89166080820152600288900b60a08201526101808101615ba760c08301896157be565b615bb460e08301886157c5565b8561010083015284610120830152615bd06101408301856157c5565b615bde6101608301846157c5565b9d9c50505050505050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112615c23578283fd5b83018035915067ffffffffffffffff821115615c3d578283fd5b602001915036819003821315613b0f57600080fd5b60405181810167ffffffffffffffff81118282101715615c6e57fe5b604052919050565b600067ffffffffffffffff821115615c8a57fe5b50601f01601f191660200190565b60005b83811015615cb3578181015183820152602001615c9b565b8381111561296d5750506000910152565b6001600160a01b038116811461506357600080fd5b801515811461506357600080fd5b8060020b811461506357600080fd5b6001600160801b038116811461506357600080fd5b60ff8116811461506357600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732315065726d69743a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a164736f6c6343000706000a\",\n  \"deployedBytecode\": \"0x6080604052600436106102895760003560e01c80636352211e11610153578063ac9650d8116100cb578063d34879971161007f578063e985e9c511610064578063e985e9c5146106f5578063f3995c6714610715578063fc6f7865146107285761030d565b8063d3487997146106c2578063df2ab5bb146106e25761030d565b8063c2e3140a116100b0578063c2e3140a1461067a578063c45a01551461068d578063c87b56dd146106a25761030d565b8063ac9650d81461063a578063b88d4fde1461065a5761030d565b8063883164561161012257806399fbab881161010757806399fbab88146105cf578063a22cb46514610607578063a4a78f0c146106275761030d565b8063883164561461059757806395d89b41146105ba5761030d565b80636352211e1461052f5780636c0360eb1461054f57806370a08231146105645780637ac2ff7b146105845761030d565b806323b872dd1161020157806342966c68116101b557806349404b7c1161019a57806349404b7c146104e75780634aa4a4fc146104fa5780634f6ccce71461050f5761030d565b806342966c68146104c15780634659a494146104d45761030d565b806330adf81f116101e657806330adf81f146104775780633644e5151461048c57806342842e0e146104a15761030d565b806323b872dd146104375780632f745c59146104575761030d565b80630c49ccbe1161025857806313ead5621161023d57806313ead562146103e057806318160ddd146103f3578063219f5d17146104155761030d565b80630c49ccbe146103b757806312210e8a146103d85761030d565b806301ffc9a71461031257806306fdde0314610348578063081812fc1461036a578063095ea7b3146103975761030d565b3661030d57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461030b576040805162461bcd60e51b815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561031e57600080fd5b5061033261032d3660046153a6565b61073b565b60405161033f919061591e565b60405180910390f35b34801561035457600080fd5b5061035d610776565b60405161033f9190615971565b34801561037657600080fd5b5061038a6103853660046156b8565b61080c565b60405161033f91906157e2565b3480156103a357600080fd5b5061030b6103b2366004615270565b610868565b6103ca6103c5366004615483565b61093e565b60405161033f929190615b42565b61030b610daa565b61038a6103ee366004615103565b610dbc565b3480156103ff57600080fd5b506104086110c9565b60405161033f9190615929565b610428610423366004615494565b6110da565b60405161033f93929190615afd565b34801561044357600080fd5b5061030b61045236600461515c565b611413565b34801561046357600080fd5b50610408610472366004615270565b61146a565b34801561048357600080fd5b50610408611495565b34801561049857600080fd5b506104086114b9565b3480156104ad57600080fd5b5061030b6104bc36600461515c565b611577565b61030b6104cf3660046156b8565b611592565b61030b6104e23660046152dc565b611661565b61030b6104f53660046156d0565b611714565b34801561050657600080fd5b5061038a611894565b34801561051b57600080fd5b5061040861052a3660046156b8565b6118b8565b34801561053b57600080fd5b5061038a61054a3660046156b8565b6118ce565b34801561055b57600080fd5b5061035d6118f6565b34801561057057600080fd5b5061040861057f3660046150af565b6118fb565b61030b6105923660046152dc565b611963565b6105aa6105a5366004615550565b611e0f565b60405161033f9493929190615b1e565b3480156105c657600080fd5b5061035d612370565b3480156105db57600080fd5b506105ef6105ea3660046156b8565b6123d1565b60405161033f9c9b9a99989796959493929190615b50565b34801561061357600080fd5b5061030b610622366004615243565b612600565b61030b6106353660046152dc565b612723565b61064d610648366004615337565b6127d5565b60405161033f91906158a0565b34801561066657600080fd5b5061030b61067536600461519c565b612915565b61030b6106883660046152dc565b612973565b34801561069957600080fd5b5061038a612a1b565b3480156106ae57600080fd5b5061035d6106bd3660046156b8565b612a3f565b3480156106ce57600080fd5b5061030b6106dd366004615717565b612b0e565b61030b6106f036600461529b565b612b8c565b34801561070157600080fd5b506103326107103660046150cb565b612c6f565b61030b6107233660046152dc565b612c9d565b6103ca61073636600461546c565b612d28565b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b820191906000526020600020905b8154815290600101906020018083116107e557829003601f168201915b5050505050905090565b600061081782613246565b61083c5760405162461bcd60e51b8152600401610833906159bb565b60405180910390fd5b506000908152600c60205260409020546c0100000000000000000000000090046001600160a01b031690565b6000610873826118ce565b9050806001600160a01b0316836001600160a01b031614156108c65760405162461bcd60e51b8152600401808060200182810382526021815260200180615ee26021913960400191505060405180910390fd5b806001600160a01b03166108d8613253565b6001600160a01b031614806108f457506108f481610710613253565b61092f5760405162461bcd60e51b8152600401808060200182810382526038815260200180615e0c6038913960400191505060405180910390fd5b6109398383613257565b505050565b600080823561094d33826132db565b6109695760405162461bcd60e51b815260040161083390615984565b836080013580610977613377565b11156109ca576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b60006109dc6040870160208801615562565b6001600160801b0316116109ef57600080fd5b84356000908152600c602090815260409182902060018101549092600160801b9091046001600160801b031691610a2a918901908901615562565b6001600160801b0316816001600160801b03161015610a4857600080fd5b60018281015469ffffffffffffffffffff166000908152600b60209081526040808320815160608101835281546001600160a01b039081168252919095015490811692850192909252600160a01b90910462ffffff1690830152610acc7f00000000000000000000000000000000000000000000000000000000000000008361337b565b60018501549091506001600160a01b0382169063a34123a7906a01000000000000000000008104600290810b91600160681b9004900b610b1260408e0160208f01615562565b6040518463ffffffff1660e01b8152600401610b309392919061594b565b6040805180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8191906156f4565b909850965060408901358810801590610b9e575088606001358710155b610bba5760405162461bcd60e51b815260040161083390615a18565b6001840154600090610bea9030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b8152600401610c1b9190615929565b60a06040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b91906155ac565b50509250925050610c9087600201548303876001600160801b0316600160801b6134d1565b6004880180546fffffffffffffffffffffffffffffffff198116928e016001600160801b039182160181169290921790556003880154610cda91908303908816600160801b6134d1565b6004880180546001600160801b03808216938e01600160801b9283900482160116029190911790556002870182905560038701819055610d2060408d0160208e01615562565b86038760010160106101000a8154816001600160801b0302191690836001600160801b031602179055508b600001357f26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b48d6020016020810190610d839190615562565b8d8d604051610d9493929190615afd565b60405180910390a2505050505050505050915091565b4715610dba57610dba3347613580565b565b6000836001600160a01b0316856001600160a01b031610610ddc57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631698ee828686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff168152602001935050505060206040518083038186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d6020811015610e9157600080fd5b505190506001600160a01b038116610fe0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a16712958686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff1681526020019350505050602060405180830381600087803b158015610f3057600080fd5b505af1158015610f44573d6000803e3d6000fd5b505050506040513d6020811015610f5a57600080fd5b5051604080517ff637731d0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519293509083169163f637731d9160248082019260009290919082900301818387803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050506110c1565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d60e081101561104557600080fd5b505190506001600160a01b0381166110bf57816001600160a01b031663f637731d846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b505050505b505b949350505050565b60006110d56002613689565b905090565b60008060008360a00135806110ed613377565b1115611140576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b84356000908152600c6020908152604080832060018082015469ffffffffffffffffffff81168652600b855283862084516060808201875282546001600160a01b039081168352929094015480831682890190815262ffffff600160a01b9092048216838901908152885161014081018a528451861681529151909416818a01529251168287015230828501526a01000000000000000000008304600290810b810b608080850191909152600160681b909404810b900b60a0830152958c013560c0820152938b013560e0850152908a0135610100840152890135610120830152929061122c90613694565b6001870154939a50919850965091506000906112669030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016112979190615929565b60a06040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e791906155ac565b50509250925050611323866002015483038760010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b6004870180546001600160801b0380821690930183166fffffffffffffffffffffffffffffffff19909116179055600387015460018801546113739291840391600160801b9182900416906134d1565b6004870180546001600160801b03600160801b80830482169094018116840291811691909117909155600288018490556003880183905560018801805483810483168e018316909302929091169190911790556040518b35907f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f906113fd908d908d908d90615afd565b60405180910390a2505050505050509193909250565b61142461141e613253565b826132db565b61145f5760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b6109398383836138cf565b6001600160a01b038216600090815260016020526040812061148c9083613a1b565b90505b92915050565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611526613a27565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b61093983838360405180602001604052806000815250612915565b8061159d33826132db565b6115b95760405162461bcd60e51b815260040161083390615984565b6000828152600c602052604090206001810154600160801b90046001600160801b03161580156115f4575060048101546001600160801b0316155b801561161257506004810154600160801b90046001600160801b0316155b61162e5760405162461bcd60e51b815260040161083390615a86565b6000838152600c602052604081208181556001810182905560028101829055600381018290556004015561093983613a2b565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e4810183905290516001600160a01b03881691638fcbaf0c9161010480830192600092919082900301818387803b1580156116f457600080fd5b505af1158015611708573d6000803e3d6000fd5b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d60208110156117ad57600080fd5b5051905082811015611806576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610939577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561187257600080fd5b505af1158015611886573d6000803e3d6000fd5b505050506109398282613580565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806118c6600284613af8565b509392505050565b600061148f82604051806060016040528060298152602001615e6e6029913960029190613b16565b606090565b60006001600160a01b0382166119425760405162461bcd60e51b815260040180806020018281038252602a815260200180615e44602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061148f90613689565b8361196c613377565b11156119bf576040805162461bcd60e51b815260206004820152600e60248201527f5065726d69742065787069726564000000000000000000000000000000000000604482015290519081900360640190fd5b60006119c96114b9565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad88886119f581613b23565b604080516020808201969096526001600160a01b03909416848201526060840192909252608083015260a08083018a90528151808403909101815260c0830182528051908401207f190100000000000000000000000000000000000000000000000000000000000060e084015260e283019490945261010280830194909452805180830390940184526101229091019052815191012090506000611a98876118ce565b9050806001600160a01b0316886001600160a01b03161415611aeb5760405162461bcd60e51b8152600401808060200182810382526027815260200180615d6f6027913960400191505060405180910390fd5b611af481613b62565b15611ccf576040805160208082018790528183018690527fff0000000000000000000000000000000000000000000000000000000000000060f889901b16606083015282516041818403018152606183018085527f1626ba7e0000000000000000000000000000000000000000000000000000000090526065830186815260858401948552815160a585015281516001600160a01b03871695631626ba7e958995919260c59091019185019080838360005b83811015611bbe578181015183820152602001611ba6565b50505050905090810190601f168015611beb5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611c0957600080fd5b505afa158015611c1d573d6000803e3d6000fd5b505050506040513d6020811015611c3357600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f1626ba7e0000000000000000000000000000000000000000000000000000000014611cca576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b611dfb565b600060018387878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611d2b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d93576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316816001600160a01b031614611df9576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b505b611e058888613257565b5050505050505050565b60008060008084610140013580611e24613377565b1115611e77576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b604080516101408101909152600090611f439080611e9860208b018b6150af565b6001600160a01b03168152602001896020016020810190611eb991906150af565b6001600160a01b03168152602001611ed760608b0160408c0161569e565b62ffffff168152306020820152604001611ef760808b0160608c016153e6565b60020b8152602001611f0f60a08b0160808c016153e6565b60020b81526020018960a0013581526020018960c0013581526020018960e001358152602001896101000135815250613694565b92975090955093509050611fb7611f6261014089016101208a016150af565b600d80547fffffffffffffffffffff000000000000000000000000000000000000000000008116600175ffffffffffffffffffffffffffffffffffffffffffff92831690810190921617909155975087613b68565b6000611fe230611fcd60808b0160608c016153e6565b611fdd60a08c0160808d016153e6565b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016120139190615929565b60a06040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206391906155ac565b5050925092505060006120dc8560405180606001604052808e600001602081019061208e91906150af565b6001600160a01b031681526020018e60200160208101906120af91906150af565b6001600160a01b031681526020018e60400160208101906120d0919061569e565b62ffffff169052613c96565b905060405180610140016040528060006bffffffffffffffffffffffff16815260200160006001600160a01b031681526020018269ffffffffffffffffffff1681526020018c606001602081019061213491906153e6565b60020b815260200161214c60a08e0160808f016153e6565b60020b81526020018a6001600160801b0316815260200184815260200183815260200160006001600160801b0316815260200160006001600160801b0316815250600c60008c815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550606082015181600101600a6101000a81548162ffffff021916908360020b62ffffff160217905550608082015181600101600d6101000a81548162ffffff021916908360020b62ffffff16021790555060a08201518160010160106101000a8154816001600160801b0302191690836001600160801b0316021790555060c0820151816002015560e082015181600301556101008201518160040160006101000a8154816001600160801b0302191690836001600160801b031602179055506101208201518160040160106101000a8154816001600160801b0302191690836001600160801b03160217905550905050897f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f8a8a8a60405161235b93929190615afd565b60405180910390a25050505050509193509193565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b6000818152600c6020908152604080832081516101408101835281546bffffffffffffffffffffffff811682526001600160a01b036c010000000000000000000000009091041693810193909352600181015469ffffffffffffffffffff81169284018390526a01000000000000000000008104600290810b810b810b6060860152600160681b8204810b810b810b60808601526001600160801b03600160801b92839004811660a08701529083015460c0860152600383015460e0860152600490920154808316610100860152041661012083015282918291829182918291829182918291829182918291906124da5760405162461bcd60e51b815260040161083390615a4f565b6000600b6000836040015169ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905081600001518260200151826000015183602001518460400151866060015187608001518860a001518960c001518a60e001518b61010001518c61012001519d509d509d509d509d509d509d509d509d509d509d509d50505091939597999b5091939597999b565b612608613253565b6001600160a01b0316826001600160a01b0316141561266e576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806005600061267b613253565b6001600160a01b0390811682526020808301939093526040918201600090812091871680825291909352912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091556126dd613253565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051600019916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b15801561278d57600080fd5b505afa1580156127a1573d6000803e3d6000fd5b505050506040513d60208110156127b757600080fd5b505110156127cd576127cd868686868686611661565b505050505050565b60608167ffffffffffffffff811180156127ee57600080fd5b5060405190808252806020026020018201604052801561282257816020015b606081526020019060019003908161280d5790505b50905060005b8281101561290e576000803086868581811061284057fe5b90506020028101906128529190615bef565b6040516128609291906157d2565b600060405180830381855af49150503d806000811461289b576040519150601f19603f3d011682016040523d82523d6000602084013e6128a0565b606091505b5091509150816128ec576044815110156128b957600080fd5b600481019050808060200190518101906128d39190615402565b60405162461bcd60e51b81526004016108339190615971565b808484815181106128f957fe5b60209081029190910101525050600101612828565b5092915050565b612926612920613253565b836132db565b6129615760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b61296d84848484613de6565b50505050565b604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152905186916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b1580156129db57600080fd5b505afa1580156129ef573d6000803e3d6000fd5b505050506040513d6020811015612a0557600080fd5b505110156127cd576127cd868686868686612c9d565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060612a4a82613246565b612a5357600080fd5b6040517fe9dc63750000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e9dc637590612aba9030908690600401615932565b60006040518083038186803b158015612ad257600080fd5b505afa158015612ae6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261148f9190810190615402565b6000612b1c828401846154a5565b9050612b4c7f00000000000000000000000000000000000000000000000000000000000000008260000151613e38565b508415612b67578051516020820151612b6791903388613e5b565b8315612b8557612b8581600001516020015182602001513387613e5b565b5050505050565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612bdb57600080fd5b505afa158015612bef573d6000803e3d6000fd5b505050506040513d6020811015612c0557600080fd5b5051905082811015612c5e576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561296d5761296d848383613feb565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c4810183905290516001600160a01b0388169163d505accf9160e480830192600092919082900301818387803b1580156116f457600080fd5b6000808235612d3733826132db565b612d535760405162461bcd60e51b815260040161083390615984565b6000612d656060860160408701615562565b6001600160801b03161180612d9257506000612d876080860160608701615562565b6001600160801b0316115b612d9b57600080fd5b600080612dae60408701602088016150af565b6001600160a01b031614612dd157612dcc60408601602087016150af565b612dd3565b305b85356000908152600c6020908152604080832060018082015469ffffffffffffffffffff168552600b8452828520835160608101855281546001600160a01b039081168252919092015490811694820194909452600160a01b90930462ffffff169183019190915292935090612e697f00000000000000000000000000000000000000000000000000000000000000008361337b565b600484015460018501549192506001600160801b0380821692600160801b92839004821692900416156130865760018501546040517fa34123a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385169163a34123a791612f00916a01000000000000000000008104600290810b92600160681b909204900b9060009060040161594b565b6040805180830381600087803b158015612f1957600080fd5b505af1158015612f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5191906156f4565b5050600185015460009081906001600160a01b0386169063514ea4bf90612f969030906a01000000000000000000008104600290810b91600160681b9004900b613477565b6040518263ffffffff1660e01b8152600401612fb29190615929565b60a06040518083038186803b158015612fca57600080fd5b505afa158015612fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300291906155ac565b5050925092505061303e876002015483038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b84019350613077876003015482038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b60028801929092556003870155015b6000806001600160801b0384166130a360608e0160408f01615562565b6001600160801b0316116130c6576130c160608d0160408e01615562565b6130c8565b835b836001600160801b03168d60600160208101906130e59190615562565b6001600160801b0316116131085761310360808e0160608f01615562565b61310a565b835b60018901546040517f4f1eb3d80000000000000000000000000000000000000000000000000000000081529294509092506001600160a01b03871691634f1eb3d89161317d918c916a01000000000000000000008104600290810b92600160681b909204900b9088908890600401615839565b6040805180830381600087803b15801561319657600080fd5b505af11580156131aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ce919061557e565b6004890180546fffffffffffffffffffffffffffffffff196001600160801b03918216600160801b878a0384160217168689038216179091556040519281169d50169a508c35907f40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f0190610d94908b9086908690615876565b600061148f60028361417b565b3390565b6000818152600c6020526040902080546bffffffffffffffffffffffff166c010000000000000000000000006001600160a01b0385169081029190911790915581906132a2826118ce565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006132e682613246565b6133215760405162461bcd60e51b815260040180806020018281038252602c815260200180615de0602c913960400191505060405180910390fd5b600061332c836118ce565b9050806001600160a01b0316846001600160a01b031614806133675750836001600160a01b031661335c8461080c565b6001600160a01b0316145b806110c157506110c18185612c6f565b4290565b600081602001516001600160a01b031682600001516001600160a01b0316106133a357600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516bffffffffffffffffffffffff19606086901b16602080830191909152600285810b60e890811b60348501529085900b901b60378301528251601a818403018152603a90920190925280519101205b9392505050565b600080806000198587098686029250828110908390030390508061350757600084116134fc57600080fd5b5082900490506134ca565b80841161351357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106135cc5780518252601f1990920191602091820191016135ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461362e576040519150601f19603f3d011682016040523d82523d6000602084013e613633565b606091505b5050905080610939576040805162461bcd60e51b815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148f82614187565b6000806000806000604051806060016040528087600001516001600160a01b0316815260200187602001516001600160a01b03168152602001876040015162ffffff1681525090506137067f00000000000000000000000000000000000000000000000000000000000000008261337b565b91506000826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561374357600080fd5b505afa158015613757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377b919061560d565b50505050505090506000613792886080015161418b565b905060006137a38960a0015161418b565b90506137ba8383838c60c001518d60e001516144d9565b9750505050816001600160a01b0316633c8a7d8d876060015188608001518960a00151896040518060400160405280888152602001336001600160a01b031681525060405160200161380c9190615abd565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161383b9594939291906157f6565b6040805180830381600087803b15801561385457600080fd5b505af1158015613868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388c91906156f4565b610100880151919550935084108015906138ab57508561012001518310155b6138c75760405162461bcd60e51b815260040161083390615a18565b509193509193565b826001600160a01b03166138e2826118ce565b6001600160a01b0316146139275760405162461bcd60e51b8152600401808060200182810382526029815260200180615eb96029913960400191505060405180910390fd5b6001600160a01b03821661396c5760405162461bcd60e51b8152600401808060200182810382526024815260200180615d966024913960400191505060405180910390fd5b613977838383610939565b613982600082613257565b6001600160a01b03831660009081526001602052604090206139a4908261459d565b506001600160a01b03821660009081526001602052604090206139c790826145a9565b506139d4600282846145b5565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061148c83836145cb565b4690565b6000613a36826118ce565b9050613a4481600084610939565b613a4f600083613257565b6000828152600860205260409020546002600019610100600184161502019091160415613a8d576000828152600860205260408120613a8d9161501f565b6001600160a01b0381166000908152600160205260409020613aaf908361459d565b50613abb60028361462f565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000808080613b07868661463b565b909450925050505b9250929050565b60006110c18484846146b6565b6000908152600c6020526040902080546bffffffffffffffffffffffff19811660016bffffffffffffffffffffffff9283169081019092161790915590565b3b151590565b6001600160a01b038216613bc3576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b613bcc81613246565b15613c1e576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b613c2a60008383610939565b6001600160a01b0382166000908152600160205260409020613c4c90826145a9565b50613c59600282846145b5565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0382166000908152600a602052604090205469ffffffffffffffffffff168061148f5750600d8054600169ffffffffffffffffffff76010000000000000000000000000000000000000000000080840482168381019092160275ffffffffffffffffffffffffffffffffffffffffffff909316929092179092556001600160a01b038085166000908152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001686179055848352600b825291829020865181549085167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825591870151950180549287015162ffffff16600160a01b027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff969094169290911691909117939093161790915592915050565b613df18484846138cf565b613dfd84848484614780565b61296d5760405162461bcd60e51b8152600401808060200182810382526032815260200180615d3d6032913960400191505060405180910390fd5b6000613e44838361337b565b9050336001600160a01b0382161461148f57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148015613e9c5750804710155b15613fbe577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613efc57600080fd5b505af1158015613f10573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613f8c57600080fd5b505af1158015613fa0573d6000803e3d6000fd5b505050506040513d6020811015613fb657600080fd5b5061296d9050565b6001600160a01b038316301415613fdf57613fda848383613feb565b61296d565b61296d8484848461495c565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b602083106140955780518252601f199092019160209182019101614076565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146140f7576040519150601f19603f3d011682016040523d82523d6000602084013e6140fc565b606091505b509150915081801561412a57508051158061412a575080806020019051602081101561412757600080fd5b50515b612b85576040805162461bcd60e51b815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148c8383614af4565b5490565b60008060008360020b126141a2578260020b6141aa565b8260020b6000035b9050620d89e8811115614204576040805162461bcd60e51b815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001821661421857600160801b61422a565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600282161561425e576ffff97272373d413259a46990580e213a0260801c5b600482161561427d576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561429c576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156142bb576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156142da576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156142f9576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615614318576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615614338576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615614358576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615614378576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615614398576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156143b8576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156143d8576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156143f8576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615614418576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615614439576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615614459576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615614478576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615614495576b048a170391f7dc42444e8fa20260801c5b60008460020b13156144b05780600019816144ac57fe5b0490505b6401000000008106156144c45760016144c7565b60005b60ff16602082901c0192505050919050565b6000836001600160a01b0316856001600160a01b031611156144f9579293925b846001600160a01b0316866001600160a01b0316116145245761451d858585614b0c565b9050614594565b836001600160a01b0316866001600160a01b0316101561458657600061454b878686614b0c565b9050600061455a878986614b78565b9050806001600160801b0316826001600160801b03161061457b578061457d565b815b92505050614594565b614591858584614b78565b90505b95945050505050565b600061148c8383614bbe565b600061148c8383614c84565b60006110c184846001600160a01b038516614cce565b8154600090821061460d5760405162461bcd60e51b8152600401808060200182810382526022815260200180615d1b6022913960400191505060405180910390fd5b82600001828154811061461c57fe5b9060005260206000200154905092915050565b600061148c8383614d65565b81546000908190831061467f5760405162461bcd60e51b8152600401808060200182810382526022815260200180615e976022913960400191505060405180910390fd5b600084600001848154811061469057fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816147515760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156147165781810151838201526020016146fe565b50505050905090810190601f1680156147435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061476457fe5b9060005260206000209060020201600101549150509392505050565b6000614794846001600160a01b0316613b62565b6147a0575060016110c1565b60006148f17f150b7a02000000000000000000000000000000000000000000000000000000006147ce613253565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561483557818101518382015260200161481d565b50505050905090810190601f1680156148625780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001615d3d603291396001600160a01b0388169190614e39565b9050600081806020019051602081101561490a57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001492505050949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b60208310614a0e5780518252601f1990920191602091820191016149ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614a70576040519150601f19603f3d011682016040523d82523d6000602084013e614a75565b606091505b5091509150818015614aa3575080511580614aa35750808060200190516020811015614aa057600080fd5b50515b6127cd576040805162461bcd60e51b815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60009081526001919091016020526040902054151590565b6000826001600160a01b0316846001600160a01b03161115614b2c579192915b6000614b58856001600160a01b0316856001600160a01b03166c010000000000000000000000006134d1565b9050614594614b7384838888036001600160a01b03166134d1565b614e48565b6000826001600160a01b0316846001600160a01b03161115614b98579192915b6110c1614b73836c010000000000000000000000008787036001600160a01b03166134d1565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614bf157fe5b9060005260206000200154905080876000018481548110614c0e57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080614c3e57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061148f565b600091505061148f565b6000614c908383614af4565b614cc65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561148f565b50600061148f565b600082815260018401602052604081205480614d335750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556134ca565b82856000016001830381548110614d4657fe5b90600052602060002090600202016001018190555060009150506134ca565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614d9857fe5b9060005260206000209060020201905080876000018481548110614db857fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080614df757fe5b600082815260208082206002600019909401938402018281556001908101839055929093558881528982019092526040822091909155945061148f9350505050565b60606110c18484600085614e5e565b806001600160801b038116811461077157600080fd5b606082471015614e9f5760405162461bcd60e51b8152600401808060200182810382526026815260200180615dba6026913960400191505060405180910390fd5b614ea885613b62565b614ef9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310614f375780518252601f199092019160209182019101614f18565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614f99576040519150601f19603f3d011682016040523d82523d6000602084013e614f9e565b606091505b5091509150614fae828286614fb9565b979650505050505050565b60608315614fc85750816134ca565b825115614fd85782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156147165781810151838201526020016146fe565b50805460018160011615610100020316600290046000825580601f106150455750615063565b601f0160209004906000526020600020908101906150639190615066565b50565b5b8082111561507b5760008155600101615067565b5090565b803561077181615cc4565b805161ffff8116811461077157600080fd5b803562ffffff8116811461077157600080fd5b6000602082840312156150c0578081fd5b81356134ca81615cc4565b600080604083850312156150dd578081fd5b82356150e881615cc4565b915060208301356150f881615cc4565b809150509250929050565b60008060008060808587031215615118578182fd5b843561512381615cc4565b9350602085013561513381615cc4565b92506151416040860161509c565b9150606085013561515181615cc4565b939692955090935050565b600080600060608486031215615170578081fd5b833561517b81615cc4565b9250602084013561518b81615cc4565b929592945050506040919091013590565b600080600080608085870312156151b1578182fd5b84356151bc81615cc4565b935060208501356151cc81615cc4565b925060408501359150606085013567ffffffffffffffff8111156151ee578182fd5b8501601f810187136151fe578182fd5b803561521161520c82615c76565b615c52565b818152886020838501011115615225578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215615255578182fd5b823561526081615cc4565b915060208301356150f881615cd9565b60008060408385031215615282578182fd5b823561528d81615cc4565b946020939093013593505050565b6000806000606084860312156152af578081fd5b83356152ba81615cc4565b92506020840135915060408401356152d181615cc4565b809150509250925092565b60008060008060008060c087890312156152f4578384fd5b86356152ff81615cc4565b95506020870135945060408701359350606087013561531d81615d0b565b9598949750929560808101359460a0909101359350915050565b60008060208385031215615349578182fd5b823567ffffffffffffffff80821115615360578384fd5b818501915085601f830112615373578384fd5b813581811115615381578485fd5b8660208083028501011115615394578485fd5b60209290920196919550909350505050565b6000602082840312156153b7578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146134ca578182fd5b6000602082840312156153f7578081fd5b81356134ca81615ce7565b600060208284031215615413578081fd5b815167ffffffffffffffff811115615429578182fd5b8201601f81018413615439578182fd5b805161544761520c82615c76565b81815285602083850101111561545b578384fd5b614594826020830160208601615c98565b60006080828403121561547d578081fd5b50919050565b600060a0828403121561547d578081fd5b600060c0828403121561547d578081fd5b600081830360808112156154b7578182fd5b6040516040810167ffffffffffffffff82821081831117156154d557fe5b8160405260608412156154e6578485fd5b60a08301935081841081851117156154fa57fe5b50826040528435925061550c83615cc4565b91825260208401359161551e83615cc4565b8260608301526155306040860161509c565b608083015281526155436060850161507f565b6020820152949350505050565b6000610160828403121561547d578081fd5b600060208284031215615573578081fd5b81356134ca81615cf6565b60008060408385031215615590578182fd5b825161559b81615cf6565b60208401519092506150f881615cf6565b600080600080600060a086880312156155c3578283fd5b85516155ce81615cf6565b80955050602086015193506040860151925060608601516155ee81615cf6565b60808701519092506155ff81615cf6565b809150509295509295909350565b600080600080600080600060e0888a031215615627578485fd5b875161563281615cc4565b602089015190975061564381615ce7565b95506156516040890161508a565b945061565f6060890161508a565b935061566d6080890161508a565b925060a088015161567d81615d0b565b60c089015190925061568e81615cd9565b8091505092959891949750929550565b6000602082840312156156af578081fd5b61148c8261509c565b6000602082840312156156c9578081fd5b5035919050565b600080604083850312156156e2578182fd5b8235915060208301356150f881615cc4565b60008060408385031215615706578182fd5b505080516020909101519092909150565b6000806000806060858703121561572c578182fd5b8435935060208501359250604085013567ffffffffffffffff80821115615751578384fd5b818701915087601f830112615764578384fd5b813581811115615772578485fd5b886020828501011115615783578485fd5b95989497505060200194505050565b600081518084526157aa816020860160208601615c98565b601f01601f19169290920160200192915050565b60020b9052565b6001600160801b03169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b60006001600160a01b03871682528560020b60208301528460020b60408301526001600160801b038416606083015260a06080830152614fae60a0830184615792565b6001600160a01b03959095168552600293840b60208601529190920b60408401526001600160801b03918216606084015216608082015260a00190565b6001600160a01b039390931683526001600160801b03918216602084015216604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015615911577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526158ff858351615792565b945092850192908501906001016158c5565b5092979650505050505050565b901515815260200190565b90815260200190565b6001600160a01b03929092168252602082015260400190565b600293840b81529190920b60208201526001600160801b03909116604082015260600190565b60006020825261148c6020830184615792565b6020808252600c908201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f507269636520736c69707061676520636865636b000000000000000000000000604082015260600190565b60208082526010908201527f496e76616c696420746f6b656e20494400000000000000000000000000000000604082015260600190565b6020808252600b908201527f4e6f7420636c6561726564000000000000000000000000000000000000000000604082015260600190565b815180516001600160a01b03908116835260208083015182168185015260409283015162ffffff1692840192909252920151909116606082015260800190565b6001600160801b039390931683526020830191909152604082015260600190565b9384526001600160801b039290921660208401526040830152606082015260800190565b918252602082015260400190565b6bffffffffffffffffffffffff8d1681526001600160a01b038c811660208301528b811660408301528a16606082015262ffffff89166080820152600288900b60a08201526101808101615ba760c08301896157be565b615bb460e08301886157c5565b8561010083015284610120830152615bd06101408301856157c5565b615bde6101608301846157c5565b9d9c50505050505050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112615c23578283fd5b83018035915067ffffffffffffffff821115615c3d578283fd5b602001915036819003821315613b0f57600080fd5b60405181810167ffffffffffffffff81118282101715615c6e57fe5b604052919050565b600067ffffffffffffffff821115615c8a57fe5b50601f01601f191660200190565b60005b83811015615cb3578181015183820152602001615c9b565b8381111561296d5750506000910152565b6001600160a01b038116811461506357600080fd5b801515811461506357600080fd5b8060020b811461506357600080fd5b6001600160801b038116811461506357600080fd5b60ff8116811461506357600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732315065726d69743a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a164736f6c6343000706000a\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"ISelfPermit\",\n  \"sourceName\": \"contracts/interfaces/ISelfPermit.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermit\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowed\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowedIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IPeripheryPaymentsWithFee\",\n  \"sourceName\": \"contracts/interfaces/IPeripheryPaymentsWithFee.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [],\n      \"name\": \"refundETH\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeBips\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"feeRecipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepTokenWithFee\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeBips\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"feeRecipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9WithFee\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"Quoter\",\n  \"sourceName\": \"contracts/lens/Quoter.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_WETH9\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH9\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quoteExactInput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenIn\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenOut\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint24\",\n          \"name\": \"fee\",\n          \"type\": \"uint24\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceLimitX96\",\n          \"type\": \"uint160\"\n        }\n      ],\n      \"name\": \"quoteExactInputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quoteExactOutput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenIn\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenOut\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint24\",\n          \"name\": \"fee\",\n          \"type\": \"uint24\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceLimitX96\",\n          \"type\": \"uint160\"\n        }\n      ],\n      \"name\": \"quoteExactOutputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount0Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount1Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"uniswapV3SwapCallback\",\n      \"outputs\": [],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x60c060405234801561001057600080fd5b506040516112e53803806112e583398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c6112176100ce60003980610342525080610366528061058652806106d552506112176000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100d3578063cdca1753146100db578063f7729d43146100ee578063fa461e33146101015761007d565b80632f80bb1d1461008257806330d07f21146100ab5780634aa4a4fc146100be575b600080fd5b610095610090366004610e9e565b610116565b6040516100a29190611148565b60405180910390f35b6100956100b9366004610e30565b61017b565b6100c6610340565b6040516100a29190611084565b6100c6610364565b6100956100e9366004610e9e565b610388565b6100956100fc366004610e30565b6103d6565b61011461010f366004610f04565b610555565b005b60005b600061012484610660565b9050600080600061013487610668565b92509250925061014882848389600061017b565b955083156101605761015987610699565b965061016c565b85945050505050610175565b50505050610119565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff808616878216109083166101a65760008490555b6101b18787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836101d78861070c565b60000373ffffffffffffffffffffffffffffffffffffffff8816156101fc5787610222565b8561021b5773fffd8963efd1fc6a506488495d951d5263988d25610222565b6401000276a45b8b8b8e6040516020016102379392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102669594939291906110a5565b6040805180830381600087803b15801561027f57600080fd5b505af19250505080156102cd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102ca91810190610ee1565b60015b610333573d8080156102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5073ffffffffffffffffffffffffffffffffffffffff841661032157600080555b61032a8161073e565b92505050610337565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b600061039684610660565b905060008060006103a687610668565b9250925092506103ba8383838960006103d6565b95508315610160576103cb87610699565b96505050505061038b565b600073ffffffffffffffffffffffffffffffffffffffff808616908716106103ff8787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836104258861070c565b73ffffffffffffffffffffffffffffffffffffffff881615610447578761046d565b856104665773fffd8963efd1fc6a506488495d951d5263988d2561046d565b6401000276a45b8c8b8d6040516020016104829392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016104b19594939291906110a5565b6040805180830381600087803b1580156104ca57600080fd5b505af1925050508015610518575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261051591810190610ee1565b60015b610333573d808015610546576040519150601f19603f3d011682016040523d82523d6000602084013e61054b565b606091505b5061032a8161073e565b60008313806105645750600082135b61056d57600080fd5b600080600061057b84610668565b9250925092506105ad7f00000000000000000000000000000000000000000000000000000000000000008484846107ef565b5060008060008089136105f3578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a600003610628565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b925092509250821561063f57604051818152602081fd5b6000541561065557600054811461065557600080fd5b604051828152602081fd5b516042111590565b600080806106768482610805565b9250610683846014610905565b9050610690846017610805565b91509193909250565b80516060906101759083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9016109f5565b60006107047f00000000000000000000000000000000000000000000000000000000000000006106ff868686610bdc565b610c59565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061073a57600080fd5b5090565b600081516020146107db5760448251101561078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611111565b60405180910390fd5b600482019150818060200190518101906107a89190610f52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078591906110f7565b818060200190518101906101759190610fbc565b600061033785610800868686610bdc565b610d8f565b60008182601401101561087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60008182600301101561097957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b81600301835110156109ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610a6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610ada57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610b6b5760405191506000825260208201604052610bd3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ba4578051835260209283019201610b8c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b610be4610dbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c1c579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c9b57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000610d9b8383610c59565b90503373ffffffffffffffffffffffffffffffffffffffff82161461017557600080fd5b604080516060810182526000808252602082018190529181019190915290565b600082601f830112610def578081fd5b8135610e02610dfd82611175565b611151565b818152846020838601011115610e16578283fd5b816020850160208301379081016020019190915292915050565b600080600080600060a08688031215610e47578081fd5b8535610e52816111e5565b94506020860135610e62816111e5565b9350604086013562ffffff81168114610e79578182fd5b9250606086013591506080860135610e90816111e5565b809150509295509295909350565b60008060408385031215610eb0578182fd5b823567ffffffffffffffff811115610ec6578283fd5b610ed285828601610ddf565b95602094909401359450505050565b60008060408385031215610ef3578182fd5b505080516020909101519092909150565b600080600060608486031215610f18578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610f3c578182fd5b610f4886828701610ddf565b9150509250925092565b600060208284031215610f63578081fd5b815167ffffffffffffffff811115610f79578182fd5b8201601f81018413610f89578182fd5b8051610f97610dfd82611175565b818152856020838501011115610fab578384fd5b6103378260208301602086016111b5565b600060208284031215610fcd578081fd5b5051919050565b60008151808452610fec8160208601602086016111b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526110ec60a0830184610fd4565b979650505050505050565b60006020825261110a6020830184610fd4565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156111d05781810151838201526020016111b8565b838111156111df576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461120757600080fd5b5056fea164736f6c6343000706000a\",\n  \"deployedBytecode\": \"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100d3578063cdca1753146100db578063f7729d43146100ee578063fa461e33146101015761007d565b80632f80bb1d1461008257806330d07f21146100ab5780634aa4a4fc146100be575b600080fd5b610095610090366004610e9e565b610116565b6040516100a29190611148565b60405180910390f35b6100956100b9366004610e30565b61017b565b6100c6610340565b6040516100a29190611084565b6100c6610364565b6100956100e9366004610e9e565b610388565b6100956100fc366004610e30565b6103d6565b61011461010f366004610f04565b610555565b005b60005b600061012484610660565b9050600080600061013487610668565b92509250925061014882848389600061017b565b955083156101605761015987610699565b965061016c565b85945050505050610175565b50505050610119565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff808616878216109083166101a65760008490555b6101b18787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836101d78861070c565b60000373ffffffffffffffffffffffffffffffffffffffff8816156101fc5787610222565b8561021b5773fffd8963efd1fc6a506488495d951d5263988d25610222565b6401000276a45b8b8b8e6040516020016102379392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102669594939291906110a5565b6040805180830381600087803b15801561027f57600080fd5b505af19250505080156102cd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102ca91810190610ee1565b60015b610333573d8080156102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5073ffffffffffffffffffffffffffffffffffffffff841661032157600080555b61032a8161073e565b92505050610337565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b600061039684610660565b905060008060006103a687610668565b9250925092506103ba8383838960006103d6565b95508315610160576103cb87610699565b96505050505061038b565b600073ffffffffffffffffffffffffffffffffffffffff808616908716106103ff8787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836104258861070c565b73ffffffffffffffffffffffffffffffffffffffff881615610447578761046d565b856104665773fffd8963efd1fc6a506488495d951d5263988d2561046d565b6401000276a45b8c8b8d6040516020016104829392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016104b19594939291906110a5565b6040805180830381600087803b1580156104ca57600080fd5b505af1925050508015610518575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261051591810190610ee1565b60015b610333573d808015610546576040519150601f19603f3d011682016040523d82523d6000602084013e61054b565b606091505b5061032a8161073e565b60008313806105645750600082135b61056d57600080fd5b600080600061057b84610668565b9250925092506105ad7f00000000000000000000000000000000000000000000000000000000000000008484846107ef565b5060008060008089136105f3578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a600003610628565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b925092509250821561063f57604051818152602081fd5b6000541561065557600054811461065557600080fd5b604051828152602081fd5b516042111590565b600080806106768482610805565b9250610683846014610905565b9050610690846017610805565b91509193909250565b80516060906101759083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9016109f5565b60006107047f00000000000000000000000000000000000000000000000000000000000000006106ff868686610bdc565b610c59565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061073a57600080fd5b5090565b600081516020146107db5760448251101561078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611111565b60405180910390fd5b600482019150818060200190518101906107a89190610f52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078591906110f7565b818060200190518101906101759190610fbc565b600061033785610800868686610bdc565b610d8f565b60008182601401101561087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60008182600301101561097957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b81600301835110156109ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610a6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610ada57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610b6b5760405191506000825260208201604052610bd3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ba4578051835260209283019201610b8c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b610be4610dbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c1c579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c9b57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000610d9b8383610c59565b90503373ffffffffffffffffffffffffffffffffffffffff82161461017557600080fd5b604080516060810182526000808252602082018190529181019190915290565b600082601f830112610def578081fd5b8135610e02610dfd82611175565b611151565b818152846020838601011115610e16578283fd5b816020850160208301379081016020019190915292915050565b600080600080600060a08688031215610e47578081fd5b8535610e52816111e5565b94506020860135610e62816111e5565b9350604086013562ffffff81168114610e79578182fd5b9250606086013591506080860135610e90816111e5565b809150509295509295909350565b60008060408385031215610eb0578182fd5b823567ffffffffffffffff811115610ec6578283fd5b610ed285828601610ddf565b95602094909401359450505050565b60008060408385031215610ef3578182fd5b505080516020909101519092909150565b600080600060608486031215610f18578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610f3c578182fd5b610f4886828701610ddf565b9150509250925092565b600060208284031215610f63578081fd5b815167ffffffffffffffff811115610f79578182fd5b8201601f81018413610f89578182fd5b8051610f97610dfd82611175565b818152856020838501011115610fab578384fd5b6103378260208301602086016111b5565b600060208284031215610fcd578081fd5b5051919050565b60008151808452610fec8160208601602086016111b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526110ec60a0830184610fd4565b979650505050505050565b60006020825261110a6020830184610fd4565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156111d05781810151838201526020016111b8565b838111156111df576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461120757600080fd5b5056fea164736f6c6343000706000a\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"QuoterV2\",\n  \"sourceName\": \"contracts/lens/QuoterV2.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_WETH9\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH9\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quoteExactInput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160[]\",\n          \"name\": \"sqrtPriceX96AfterList\",\n          \"type\": \"uint160[]\"\n        },\n        {\n          \"internalType\": \"uint32[]\",\n          \"name\": \"initializedTicksCrossedList\",\n          \"type\": \"uint32[]\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"gasEstimate\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenIn\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenOut\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountIn\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"uint160\",\n              \"name\": \"sqrtPriceLimitX96\",\n              \"type\": \"uint160\"\n            }\n          ],\n          \"internalType\": \"struct IQuoterV2.QuoteExactInputSingleParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"quoteExactInputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96After\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"initializedTicksCrossed\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"gasEstimate\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"quoteExactOutput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160[]\",\n          \"name\": \"sqrtPriceX96AfterList\",\n          \"type\": \"uint160[]\"\n        },\n        {\n          \"internalType\": \"uint32[]\",\n          \"name\": \"initializedTicksCrossedList\",\n          \"type\": \"uint32[]\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"gasEstimate\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenIn\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenOut\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amount\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"uint160\",\n              \"name\": \"sqrtPriceLimitX96\",\n              \"type\": \"uint160\"\n            }\n          ],\n          \"internalType\": \"struct IQuoterV2.QuoteExactOutputSingleParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"quoteExactOutputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96After\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"initializedTicksCrossed\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"gasEstimate\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount0Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount1Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"path\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"uniswapV3SwapCallback\",\n      \"outputs\": [],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x60c06040523480156200001157600080fd5b506040516200212c3803806200212c833981016040819052620000349162000070565b6001600160601b0319606092831b8116608052911b1660a052620000a7565b80516001600160a01b03811681146200006b57600080fd5b919050565b6000806040838503121562000083578182fd5b6200008e8362000053565b91506200009e6020840162000053565b90509250929050565b60805160601c60a05160601c612051620000db60003980610321525080610577528061095d5280610b9252506120516000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100e6578063c6a5026a146100ee578063cdca175314610101578063fa461e33146101145761007d565b80632f80bb1d146100825780634aa4a4fc146100ae578063bd21704a146100c3575b600080fd5b610095610090366004611b2b565b610129565b6040516100a59493929190611eac565b60405180910390f35b6100b661031f565b6040516100a59190611def565b6100d66100d1366004611c49565b610343565b6040516100a59493929190611f54565b6100b6610575565b6100d66100fc366004611c49565b610599565b61009561010f366004611b2b565b610754565b610127610122366004611b91565b61092c565b005b6000606080600061013986610ae8565b67ffffffffffffffff8111801561014f57600080fd5b50604051908082528060200260200182016040528015610179578160200160208202803683370190505b50925061018586610ae8565b67ffffffffffffffff8111801561019b57600080fd5b506040519080825280602002602001820160405280156101c5578160200160208202803683370190505b50915060005b60008060006101d98a610b17565b92509250925060008060008061025c6040518060a001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610343565b9350935093509350828b898151811061027157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106102b857fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926102e58e610b48565b156102fa576102f38e610b50565b9d5061030a565b8c9b505050505050505050610316565b505050505050506101cb565b92959194509250565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926103819290610b8b565b9050866080015173ffffffffffffffffffffffffffffffffffffffff16600014156103af5760408701516000555b60005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856103df8c60400151610bc9565b6000038c6080015173ffffffffffffffffffffffffffffffffffffffff1660001461040e578c60800151610434565b8761042d5773fffd8963efd1fc6a506488495d951d5263988d25610434565b6401000276a45b8d602001518e606001518f6000015160405160200161045593929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610484959493929190611e10565b6040805180830381600087803b15801561049d57600080fd5b505af19250505080156104eb575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526104e891810190611b6e565b60015b610568573d808015610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b505a82039450886080015173ffffffffffffffffffffffffffffffffffffffff166000141561054c57600080555b610557818487610bfb565b97509750975097505050505061056e565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926105d79290610b8b565b905060005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856106098c60400151610bc9565b60808d015173ffffffffffffffffffffffffffffffffffffffff1615610633578c60800151610659565b876106525773fffd8963efd1fc6a506488495d951d5263988d25610659565b6401000276a45b8d600001518e606001518f6020015160405160200161067a93929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016106a9959493929190611e10565b6040805180830381600087803b1580156106c257600080fd5b505af1925050508015610710575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261070d91810190611b6e565b60015b610568573d80801561073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b505a82039450610557818487610bfb565b6000606080600061076486610ae8565b67ffffffffffffffff8111801561077a57600080fd5b506040519080825280602002602001820160405280156107a4578160200160208202803683370190505b5092506107b086610ae8565b67ffffffffffffffff811180156107c657600080fd5b506040519080825280602002602001820160405280156107f0578160200160208202803683370190505b50915060005b60008060006108048a610b17565b9250925092506000806000806108876040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610599565b9350935093509350828b898151811061089c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106108e357fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926109108e610b48565b156102fa5761091e8e610b50565b9d50505050505050506107f6565b600083138061093b5750600082135b61094457600080fd5b600080600061095284610b17565b9250925092506109847f0000000000000000000000000000000000000000000000000000000000000000848484610ccf565b5060008060008089136109ca578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a6000036109ff565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b9250925092506000610a12878787610b8b565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190611c6b565b5050505050915091508515610abb57604051848152826020820152816040820152606081fd5b60005415610ad1576000548414610ad157600080fd5b604051858152826020820152816040820152606081fd5b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b60008080610b258482610cee565b9250610b32846014610dee565b9050610b3f846017610cee565b91509193909250565b516042111590565b8051606090610b859083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901610ede565b92915050565b6000610bc17f0000000000000000000000000000000000000000000000000000000000000000610bbc8686866110c5565b611142565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210610bf757600080fd5b5090565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190611c6b565b50939650610c9794508d935061127892505050565b91975095509050610cbf73ffffffffffffffffffffffffffffffffffffffff89168383611339565b9350869250505093509350935093565b6000610ce585610ce08686866110c5565b611991565b95945050505050565b600081826014011015610d6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610dd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610e6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610ed557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610f5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610fc357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8183018451101561103557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561105457604051915060008252602082016040526110bc565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561108d578051835260209283019201611075565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6110cd6119fa565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611105579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061118457600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014611318576044845110156112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290611e75565b60405180910390fd5b600484019350838060200190518101906112e59190611bdf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190611e62565b8380602001905181019061132c9190611d02565b9250925092509193909250565b60008060008060008060008060088b73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b5051600290810b908c900b816113c957fe5b0560020b901d905060006101008c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b5051600290810b908d900b8161145857fe5b0560020b8161146357fe5b079050600060088d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b5051600290810b908d900b816114ec57fe5b0560020b901d905060006101008e73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153f57600080fd5b505afa158015611553573d6000803e3d6000fd5b505050506040513d602081101561156957600080fd5b5051600290810b908e900b8161157b57fe5b0560020b8161158657fe5b07905060008160ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d602081101561161157600080fd5b5051161180156116a457508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b5051600290810b908d900b8161169e57fe5b0760020b155b80156116b557508b60020b8d60020b135b945060008360ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b5051161180156117d257508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d60208110156117ba57600080fd5b5051600290810b908e900b816117cc57fe5b0760020b155b80156117e357508b60020b8d60020b125b95508160010b8460010b128061180f57508160010b8460010b14801561180f57508060ff168360ff1611155b1561182557839950829750819850809650611832565b8199508097508398508296505b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff87161b9150505b8560010b8760010b13611969578560010b8760010b14156118a3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff858103161c165b6000818c73ffffffffffffffffffffffffffffffffffffffff16635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b5051169050611932816119c1565b61ffff16989098019750506001909501947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61185e565b8115611976576001880397505b8215611983576001880397505b505050505050509392505050565b600061199d8383611142565b90503373ffffffffffffffffffffffffffffffffffffffff821614610b8557600080fd5b6000805b8215610b85577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301909216916001016119c5565b604080516060810182526000808252602082018190529181019190915290565b600082601f830112611a2a578081fd5b8135611a3d611a3882611faf565b611f8b565b818152846020838601011115611a51578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b8114610b1257600080fd5b600060a08284031215611a8e578081fd5b60405160a0810181811067ffffffffffffffff82111715611aab57fe5b6040529050808235611abc8161201f565b81526020830135611acc8161201f565b602082015260408381013590820152606083013562ffffff81168114611af157600080fd5b6060820152611b0260808401611b0e565b60808201525092915050565b8035610b128161201f565b805161ffff81168114610b1257600080fd5b60008060408385031215611b3d578182fd5b823567ffffffffffffffff811115611b53578283fd5b611b5f85828601611a1a565b95602094909401359450505050565b60008060408385031215611b80578182fd5b505080516020909101519092909150565b600080600060608486031215611ba5578081fd5b8335925060208401359150604084013567ffffffffffffffff811115611bc9578182fd5b611bd586828701611a1a565b9150509250925092565b600060208284031215611bf0578081fd5b815167ffffffffffffffff811115611c06578182fd5b8201601f81018413611c16578182fd5b8051611c24611a3882611faf565b818152856020838501011115611c38578384fd5b610ce5826020830160208601611fef565b600060a08284031215611c5a578081fd5b611c648383611a7d565b9392505050565b600080600080600080600060e0888a031215611c85578283fd5b8751611c908161201f565b9650611c9e60208901611a6b565b9550611cac60408901611b19565b9450611cba60608901611b19565b9350611cc860808901611b19565b925060a088015160ff81168114611cdd578283fd5b60c08901519092508015158114611cf2578182fd5b8091505092959891949750929550565b600080600060608486031215611d16578081fd5b835192506020840151611d288161201f565b9150611d3660408501611a6b565b90509250925092565b60008151808452611d57816020860160208601611fef565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152611e5760a0830184611d3f565b979650505050505050565b600060208252611c646020830184611d3f565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611f0257845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101611ed0565b505084810360408601528651808252908201925081870190845b81811015611f3e57825163ffffffff1685529383019391830191600101611f1c565b5050505060609290920192909252949350505050565b93845273ffffffffffffffffffffffffffffffffffffffff92909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611fa757fe5b604052919050565b600067ffffffffffffffff821115611fc357fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561200a578181015183820152602001611ff2565b83811115612019576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461204157600080fd5b5056fea164736f6c6343000706000a\",\n  \"deployedBytecode\": \"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100e6578063c6a5026a146100ee578063cdca175314610101578063fa461e33146101145761007d565b80632f80bb1d146100825780634aa4a4fc146100ae578063bd21704a146100c3575b600080fd5b610095610090366004611b2b565b610129565b6040516100a59493929190611eac565b60405180910390f35b6100b661031f565b6040516100a59190611def565b6100d66100d1366004611c49565b610343565b6040516100a59493929190611f54565b6100b6610575565b6100d66100fc366004611c49565b610599565b61009561010f366004611b2b565b610754565b610127610122366004611b91565b61092c565b005b6000606080600061013986610ae8565b67ffffffffffffffff8111801561014f57600080fd5b50604051908082528060200260200182016040528015610179578160200160208202803683370190505b50925061018586610ae8565b67ffffffffffffffff8111801561019b57600080fd5b506040519080825280602002602001820160405280156101c5578160200160208202803683370190505b50915060005b60008060006101d98a610b17565b92509250925060008060008061025c6040518060a001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610343565b9350935093509350828b898151811061027157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106102b857fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926102e58e610b48565b156102fa576102f38e610b50565b9d5061030a565b8c9b505050505050505050610316565b505050505050506101cb565b92959194509250565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926103819290610b8b565b9050866080015173ffffffffffffffffffffffffffffffffffffffff16600014156103af5760408701516000555b60005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856103df8c60400151610bc9565b6000038c6080015173ffffffffffffffffffffffffffffffffffffffff1660001461040e578c60800151610434565b8761042d5773fffd8963efd1fc6a506488495d951d5263988d25610434565b6401000276a45b8d602001518e606001518f6000015160405160200161045593929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610484959493929190611e10565b6040805180830381600087803b15801561049d57600080fd5b505af19250505080156104eb575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526104e891810190611b6e565b60015b610568573d808015610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b505a82039450886080015173ffffffffffffffffffffffffffffffffffffffff166000141561054c57600080555b610557818487610bfb565b97509750975097505050505061056e565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926105d79290610b8b565b905060005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856106098c60400151610bc9565b60808d015173ffffffffffffffffffffffffffffffffffffffff1615610633578c60800151610659565b876106525773fffd8963efd1fc6a506488495d951d5263988d25610659565b6401000276a45b8d600001518e606001518f6020015160405160200161067a93929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016106a9959493929190611e10565b6040805180830381600087803b1580156106c257600080fd5b505af1925050508015610710575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261070d91810190611b6e565b60015b610568573d80801561073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b505a82039450610557818487610bfb565b6000606080600061076486610ae8565b67ffffffffffffffff8111801561077a57600080fd5b506040519080825280602002602001820160405280156107a4578160200160208202803683370190505b5092506107b086610ae8565b67ffffffffffffffff811180156107c657600080fd5b506040519080825280602002602001820160405280156107f0578160200160208202803683370190505b50915060005b60008060006108048a610b17565b9250925092506000806000806108876040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610599565b9350935093509350828b898151811061089c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106108e357fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926109108e610b48565b156102fa5761091e8e610b50565b9d50505050505050506107f6565b600083138061093b5750600082135b61094457600080fd5b600080600061095284610b17565b9250925092506109847f0000000000000000000000000000000000000000000000000000000000000000848484610ccf565b5060008060008089136109ca578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a6000036109ff565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b9250925092506000610a12878787610b8b565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190611c6b565b5050505050915091508515610abb57604051848152826020820152816040820152606081fd5b60005415610ad1576000548414610ad157600080fd5b604051858152826020820152816040820152606081fd5b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b60008080610b258482610cee565b9250610b32846014610dee565b9050610b3f846017610cee565b91509193909250565b516042111590565b8051606090610b859083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901610ede565b92915050565b6000610bc17f0000000000000000000000000000000000000000000000000000000000000000610bbc8686866110c5565b611142565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210610bf757600080fd5b5090565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190611c6b565b50939650610c9794508d935061127892505050565b91975095509050610cbf73ffffffffffffffffffffffffffffffffffffffff89168383611339565b9350869250505093509350935093565b6000610ce585610ce08686866110c5565b611991565b95945050505050565b600081826014011015610d6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610dd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610e6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610ed557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610f5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610fc357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8183018451101561103557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561105457604051915060008252602082016040526110bc565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561108d578051835260209283019201611075565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6110cd6119fa565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611105579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061118457600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014611318576044845110156112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290611e75565b60405180910390fd5b600484019350838060200190518101906112e59190611bdf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190611e62565b8380602001905181019061132c9190611d02565b9250925092509193909250565b60008060008060008060008060088b73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b5051600290810b908c900b816113c957fe5b0560020b901d905060006101008c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b5051600290810b908d900b8161145857fe5b0560020b8161146357fe5b079050600060088d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b5051600290810b908d900b816114ec57fe5b0560020b901d905060006101008e73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153f57600080fd5b505afa158015611553573d6000803e3d6000fd5b505050506040513d602081101561156957600080fd5b5051600290810b908e900b8161157b57fe5b0560020b8161158657fe5b07905060008160ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d602081101561161157600080fd5b5051161180156116a457508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b5051600290810b908d900b8161169e57fe5b0760020b155b80156116b557508b60020b8d60020b135b945060008360ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b5051161180156117d257508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d60208110156117ba57600080fd5b5051600290810b908e900b816117cc57fe5b0760020b155b80156117e357508b60020b8d60020b125b95508160010b8460010b128061180f57508160010b8460010b14801561180f57508060ff168360ff1611155b1561182557839950829750819850809650611832565b8199508097508398508296505b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff87161b9150505b8560010b8760010b13611969578560010b8760010b14156118a3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff858103161c165b6000818c73ffffffffffffffffffffffffffffffffffffffff16635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b5051169050611932816119c1565b61ffff16989098019750506001909501947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61185e565b8115611976576001880397505b8215611983576001880397505b505050505050509392505050565b600061199d8383611142565b90503373ffffffffffffffffffffffffffffffffffffffff821614610b8557600080fd5b6000805b8215610b85577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301909216916001016119c5565b604080516060810182526000808252602082018190529181019190915290565b600082601f830112611a2a578081fd5b8135611a3d611a3882611faf565b611f8b565b818152846020838601011115611a51578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b8114610b1257600080fd5b600060a08284031215611a8e578081fd5b60405160a0810181811067ffffffffffffffff82111715611aab57fe5b6040529050808235611abc8161201f565b81526020830135611acc8161201f565b602082015260408381013590820152606083013562ffffff81168114611af157600080fd5b6060820152611b0260808401611b0e565b60808201525092915050565b8035610b128161201f565b805161ffff81168114610b1257600080fd5b60008060408385031215611b3d578182fd5b823567ffffffffffffffff811115611b53578283fd5b611b5f85828601611a1a565b95602094909401359450505050565b60008060408385031215611b80578182fd5b505080516020909101519092909150565b600080600060608486031215611ba5578081fd5b8335925060208401359150604084013567ffffffffffffffff811115611bc9578182fd5b611bd586828701611a1a565b9150509250925092565b600060208284031215611bf0578081fd5b815167ffffffffffffffff811115611c06578182fd5b8201601f81018413611c16578182fd5b8051611c24611a3882611faf565b818152856020838501011115611c38578384fd5b610ce5826020830160208601611fef565b600060a08284031215611c5a578081fd5b611c648383611a7d565b9392505050565b600080600080600080600060e0888a031215611c85578283fd5b8751611c908161201f565b9650611c9e60208901611a6b565b9550611cac60408901611b19565b9450611cba60608901611b19565b9350611cc860808901611b19565b925060a088015160ff81168114611cdd578283fd5b60c08901519092508015158114611cf2578182fd5b8091505092959891949750929550565b600080600060608486031215611d16578081fd5b835192506020840151611d288161201f565b9150611d3660408501611a6b565b90509250925092565b60008151808452611d57816020860160208601611fef565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152611e5760a0830184611d3f565b979650505050505050565b600060208252611c646020830184611d3f565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611f0257845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101611ed0565b505084810360408601528651808252908201925081870190845b81811015611f3e57825163ffffffff1685529383019391830191600101611f1c565b5050505060609290920192909252949350505050565b93845273ffffffffffffffffffffffffffffffffffffffff92909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611fa757fe5b604052919050565b600067ffffffffffffffff821115611fc357fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561200a578181015183820152602001611ff2565b83811115612019576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461204157600080fd5b5056fea164736f6c6343000706000a\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"UniswapV3Staker\",\n  \"sourceName\": \"contracts/UniswapV3Staker.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IUniswapV3Factory\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"contract INonfungiblePositionManager\",\n          \"name\": \"_nonfungiblePositionManager\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"_maxIncentiveStartLeadTime\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"_maxIncentiveDuration\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"oldOwner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"newOwner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"DepositTransferred\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"contract IERC20Minimal\",\n          \"name\": \"rewardToken\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"contract IUniswapV3Pool\",\n          \"name\": \"pool\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"startTime\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"endTime\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"refundee\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"IncentiveCreated\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"incentiveId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"refund\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"IncentiveEnded\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"RewardClaimed\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"incentiveId\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"name\": \"TokenStaked\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"incentiveId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"TokenUnstaked\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IERC20Minimal\",\n          \"name\": \"rewardToken\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountRequested\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"claimReward\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"createIncentive\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"deposits\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint48\",\n          \"name\": \"numberOfStakes\",\n          \"type\": \"uint48\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"endIncentive\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"refund\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract IUniswapV3Factory\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getRewardInfo\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"reward\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"secondsInsideX128\",\n          \"type\": \"uint160\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"incentives\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"totalRewardUnclaimed\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"totalSecondsClaimedX128\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint96\",\n          \"name\": \"numberOfStakes\",\n          \"type\": \"uint96\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"maxIncentiveDuration\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"maxIncentiveStartLeadTime\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"nonfungiblePositionManager\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract INonfungiblePositionManager\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"onERC721Received\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes4\",\n          \"name\": \"\",\n          \"type\": \"bytes4\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IERC20Minimal\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"rewards\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"stakeToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"incentiveId\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"stakes\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"secondsPerLiquidityInsideInitialX128\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"transferDeposit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"contract IERC20Minimal\",\n              \"name\": \"rewardToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"contract IUniswapV3Pool\",\n              \"name\": \"pool\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"startTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"endTime\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"refundee\",\n              \"type\": \"address\"\n            }\n          ],\n          \"internalType\": \"struct IUniswapV3Staker.IncentiveKey\",\n          \"name\": \"key\",\n          \"type\": \"tuple\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"unstakeToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"withdrawToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"\",\n  \"deployedBytecode\": \"\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"SwapRouter\",\n  \"sourceName\": \"contracts/SwapRouter.sol\",\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_factory\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_WETH9\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH9\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"path\",\n              \"type\": \"bytes\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountIn\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountOutMinimum\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct ISwapRouter.ExactInputParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"exactInput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenIn\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenOut\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountIn\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountOutMinimum\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint160\",\n              \"name\": \"sqrtPriceLimitX96\",\n              \"type\": \"uint160\"\n            }\n          ],\n          \"internalType\": \"struct ISwapRouter.ExactInputSingleParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"exactInputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountOut\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"bytes\",\n              \"name\": \"path\",\n              \"type\": \"bytes\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountOut\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountInMaximum\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"internalType\": \"struct ISwapRouter.ExactOutputParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"exactOutput\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"components\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenIn\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"tokenOut\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint24\",\n              \"name\": \"fee\",\n              \"type\": \"uint24\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"recipient\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"deadline\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountOut\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"amountInMaximum\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"internalType\": \"uint160\",\n              \"name\": \"sqrtPriceLimitX96\",\n              \"type\": \"uint160\"\n            }\n          ],\n          \"internalType\": \"struct ISwapRouter.ExactOutputSingleParams\",\n          \"name\": \"params\",\n          \"type\": \"tuple\"\n        }\n      ],\n      \"name\": \"exactOutputSingle\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountIn\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"data\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"name\": \"multicall\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes[]\",\n          \"name\": \"results\",\n          \"type\": \"bytes[]\"\n        }\n      ],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"refundETH\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermit\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowed\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"nonce\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"expiry\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitAllowedIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"selfPermitIfNecessary\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepToken\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeBips\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"feeRecipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"sweepTokenWithFee\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount0Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount1Delta\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"_data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"uniswapV3SwapCallback\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amountMinimum\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeBips\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"feeRecipient\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"unwrapWETH9WithFee\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"bytecode\": \"0x60c06040526000196000553480156200001757600080fd5b506040516200302f3803806200302f8339810160408190526200003a9162000076565b6001600160601b0319606092831b8116608052911b1660a052620000ad565b80516001600160a01b03811681146200007157600080fd5b919050565b6000806040838503121562000089578182fd5b620000948362000059565b9150620000a46020840162000059565b90509250929050565b60805160601c60a05160601c612f26620001096000398061012f528061058352806106ad5280610747528061078752806108b15280611c435280611ca35280611d24525080610dc6528061140c5280611e265250612f266000f3fe6080604052600436106101125760003560e01c8063c04b8d59116100a5578063df2ab5bb11610074578063f28c049811610059578063f28c0498146102f5578063f3995c6714610308578063fa461e331461031b576101bd565b8063df2ab5bb146102cf578063e0e189a0146102e2576101bd565b8063c04b8d5914610281578063c2e3140a14610294578063c45a0155146102a7578063db3e2198146102bc576101bd565b80634aa4a4fc116100e15780634aa4a4fc146102195780639b2c0a371461023b578063a4a78f0c1461024e578063ac9650d814610261576101bd565b806312210e8a146101c2578063414bf389146101ca5780634659a494146101f357806349404b7c14610206576101bd565b366101bd573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b6101bb61033b565b6101dd6101d83660046129f8565b61034d565b6040516101ea9190612df1565b60405180910390f35b6101bb610201366004612776565b6104bf565b6101bb610214366004612aff565b61057f565b34801561022557600080fd5b5061022e610745565b6040516101ea9190612c37565b6101bb610249366004612b2e565b610769565b6101bb61025c366004612776565b610981565b61027461026f3660046127d6565b610a56565b6040516101ea9190612caa565b6101dd61028f36600461294d565b610bb0565b6101bb6102a2366004612776565b610d0f565b3480156102b357600080fd5b5061022e610dc4565b6101dd6102ca3660046129f8565b610de8565b6101bb6102dd3660046126d7565b610f78565b6101bb6102f0366004612718565b611095565b6101dd610303366004612a14565b6111fb565b6101bb610316366004612776565b61132f565b34801561032757600080fd5b506101bb610336366004612868565b6113c7565b471561034b5761034b334761150e565b565b600081608001358061035d61165c565b11156103ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b61047060a08401356103e260808601606087016126b4565b6103f3610100870160e088016126b4565b604080518082019091528061040b60208a018a6126b4565b61041b60608b0160408c01612adc565b61042b60408c0160208d016126b4565b60405160200161043d93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611660565b91508260c001358210156104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b60405180910390fd5b50919050565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e48101839052905173ffffffffffffffffffffffffffffffffffffffff881691638fcbaf0c9161010480830192600092919082900301818387803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b50505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d602081101561063257600080fd5b50519050828110156106a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610740577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b50505050610740828261150e565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008211801561077a575060648211155b61078357600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d602081101561083657600080fd5b50519050848110156108a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b801561097a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b50505050600061271061095285846117e690919063ffffffff16565b8161095957fe5b049050801561096c5761096c838261150e565b6109788582840361150e565b505b5050505050565b604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d6020811015610a4057600080fd5b50511015610978576109788686868686866104bf565b60608167ffffffffffffffff81118015610a6f57600080fd5b50604051908082528060200260200182016040528015610aa357816020015b6060815260200190600190039081610a8e5790505b50905060005b82811015610ba95760008030868685818110610ac157fe5b9050602002810190610ad39190612dfa565b604051610ae1929190612c27565b600060405180830381855af49150503d8060008114610b1c576040519150601f19603f3d011682016040523d82523d6000602084013e610b21565b606091505b509150915081610b8757604481511015610b3a57600080fd5b60048101905080806020019051810190610b5491906128e3565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b09190612d28565b80848481518110610b9457fe5b60209081029190910101525050600101610aa9565b5092915050565b6000816040015180610bc061165c565b1115610c2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b335b6000610c3e8560000151611810565b9050610c97856060015182610c57578660200151610c59565b305b60006040518060400160405280610c738b6000015161181c565b81526020018773ffffffffffffffffffffffffffffffffffffffff16815250611660565b60608601528015610cb7578451309250610cb09061182b565b8552610cc4565b8460600151935050610cca565b50610c2f565b8360800151831015610d08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b5050919050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051869173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b505110156109785761097886868686868661132f565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816080013580610df861165c565b1115610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b610f0e60a0840135610e7d60808601606087016126b4565b610e8e610100870160e088016126b4565b6040518060400160405280886020016020810190610eac91906126b4565b610ebc60608b0160408c01612adc565b610ec960208c018c6126b4565b604051602001610edb93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611860565b91508260c00135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600055919050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b505190508281101561107e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561108f5761108f848383611a1c565b50505050565b6000821180156110a6575060648211155b6110af57600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b50519050848110156111b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b80156109785760006127106111ca83866117e6565b816111d157fe5b04905080156111e5576111e5878483611a1c565b6111f28786838503611a1c565b50505050505050565b600081604001358061120b61165c565b111561127857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b6112eb606084013561129060408601602087016126b4565b60408051808201909152600090806112a88980612dfa565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602090910152611860565b5060005491508260800135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c48101839052905173ffffffffffffffffffffffffffffffffffffffff88169163d505accf9160e480830192600092919082900301818387803b15801561055f57600080fd5b60008413806113d65750600083135b6113df57600080fd5b60006113ed82840184612a4c565b905060008060006114018460000151611bf1565b9250925092506114337f0000000000000000000000000000000000000000000000000000000000000000848484611c22565b5060008060008a13611474578473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610896114a5565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16108a5b9150915081156114c4576114bf8587602001513384611c41565b610573565b85516114cf90611810565b156114f45785516114df9061182b565b86526114ee8133600089611860565b50610573565b806000819055508394506105738587602001513384611c41565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061158557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611548565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146115e7576040519150601f19603f3d011682016040523d82523d6000602084013e6115ec565b606091505b505090508061074057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b4290565b600073ffffffffffffffffffffffffffffffffffffffff8416611681573093505b60008060006116938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808316908416106000806116c4868686611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856116ea8f611e5d565b73ffffffffffffffffffffffffffffffffffffffff8e161561170c578d611732565b8761172b5773fffd8963efd1fc6a506488495d951d5263988d25611732565b6401000276a45b8d6040516020016117439190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611772959493929190612c58565b6040805180830381600087803b15801561178b57600080fd5b505af115801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c39190612845565b91509150826117d257816117d4565b805b6000039b9a5050505050505050505050565b6000821580611801575050818102818382816117fe57fe5b04145b61180a57600080fd5b92915050565b8051604211155b919050565b606061180a826000602b611e8f565b805160609061180a9083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901611e8f565b600073ffffffffffffffffffffffffffffffffffffffff8416611881573093505b60008060006118938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808416908316106000806118c4858786611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856118ea8f611e5d565b60000373ffffffffffffffffffffffffffffffffffffffff8e161561190f578d611935565b8761192e5773fffd8963efd1fc6a506488495d951d5263988d25611935565b6401000276a45b8d6040516020016119469190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611975959493929190612c58565b6040805180830381600087803b15801561198e57600080fd5b505af11580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c69190612845565b915091506000836119db5781836000036119e1565b82826000035b909850905073ffffffffffffffffffffffffffffffffffffffff8a16611a0d578b8114611a0d57600080fd5b50505050505050949350505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310611af157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611ab4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b53576040519150601f19603f3d011682016040523d82523d6000602084013e611b58565b606091505b5091509150818015611b86575080511580611b865750808060200190516020811015611b8357600080fd5b50515b61097a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008080611bff8482612076565b9250611c0c846014612176565b9050611c19846017612076565b91509193909250565b6000611c3885611c33868686612266565b6122e3565b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015611c9c5750804710155b15611de5577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d0957600080fd5b505af1158015611d1d573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611db357600080fd5b505af1158015611dc7573d6000803e3d6000fd5b505050506040513d6020811015611ddd57600080fd5b5061108f9050565b73ffffffffffffffffffffffffffffffffffffffff8316301415611e1357611e0e848383611a1c565b61108f565b61108f84848484612313565b6000611e557f0000000000000000000000000000000000000000000000000000000000000000611e50868686612266565b6124f0565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210611e8b57600080fd5b5090565b60608182601f011015611f0357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015611f7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015611fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015612005576040519150600082526020820160405261206d565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561203e578051835260209283019201612026565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6000818260140110156120ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b816014018351101561215d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b6000818260030110156121ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b816003018351101561225d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b61226e612626565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156122a6579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b60006122ef83836124f0565b90503373ffffffffffffffffffffffffffffffffffffffff82161461180a57600080fd5b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106123f057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123b3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612452576040519150601f19603f3d011682016040523d82523d6000602084013e612457565b606091505b5091509150818015612485575080511580612485575080806020019051602081101561248257600080fd5b50515b61097857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061253257600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516060810182526000808252602082018190529181019190915290565b803561181781612ef4565b600082601f830112612661578081fd5b813561267461266f82612e88565b612e64565b818152846020838601011115612688578283fd5b816020850160208301379081016020019190915292915050565b600061010082840312156104b9578081fd5b6000602082840312156126c5578081fd5b81356126d081612ef4565b9392505050565b6000806000606084860312156126eb578182fd5b83356126f681612ef4565b925060208401359150604084013561270d81612ef4565b809150509250925092565b600080600080600060a0868803121561272f578081fd5b853561273a81612ef4565b945060208601359350604086013561275181612ef4565b925060608601359150608086013561276881612ef4565b809150509295509295909350565b60008060008060008060c0878903121561278e578081fd5b863561279981612ef4565b95506020870135945060408701359350606087013560ff811681146127bc578182fd5b9598949750929560808101359460a0909101359350915050565b600080602083850312156127e8578182fd5b823567ffffffffffffffff808211156127ff578384fd5b818501915085601f830112612812578384fd5b813581811115612820578485fd5b8660208083028501011115612833578485fd5b60209290920196919550909350505050565b60008060408385031215612857578182fd5b505080516020909101519092909150565b6000806000806060858703121561287d578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156128a2578384fd5b818701915087601f8301126128b5578384fd5b8135818111156128c3578485fd5b8860208285010111156128d4578485fd5b95989497505060200194505050565b6000602082840312156128f4578081fd5b815167ffffffffffffffff81111561290a578182fd5b8201601f8101841361291a578182fd5b805161292861266f82612e88565b81815285602083850101111561293c578384fd5b611c38826020830160208601612ec8565b60006020828403121561295e578081fd5b813567ffffffffffffffff80821115612975578283fd5b9083019060a08286031215612988578283fd5b60405160a08101818110838211171561299d57fe5b6040528235828111156129ae578485fd5b6129ba87828601612651565b8252506129c960208401612646565b602082015260408301356040820152606083013560608201526080830135608082015280935050505092915050565b60006101008284031215612a0a578081fd5b6126d083836126a2565b600060208284031215612a25578081fd5b813567ffffffffffffffff811115612a3b578182fd5b820160a081850312156126d0578182fd5b600060208284031215612a5d578081fd5b813567ffffffffffffffff80821115612a74578283fd5b9083019060408286031215612a87578283fd5b604051604081018181108382111715612a9c57fe5b604052823582811115612aad578485fd5b612ab987828601612651565b82525060208301359250612acc83612ef4565b6020810192909252509392505050565b600060208284031215612aed578081fd5b813562ffffff811681146126d0578182fd5b60008060408385031215612b11578182fd5b823591506020830135612b2381612ef4565b809150509250929050565b60008060008060808587031215612b43578182fd5b843593506020850135612b5581612ef4565b9250604085013591506060850135612b6c81612ef4565b939692955090935050565b60008151808452612b8f816020860160208601612ec8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152612c9f60a0830184612b77565b979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612d1b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612d09858351612b77565b94509285019290850190600101612ccf565b5092979650505050505050565b6000602082526126d06020830184612b77565b60208082526012908201527f546f6f206d756368207265717565737465640000000000000000000000000000604082015260600190565b60208082526013908201527f546f6f206c6974746c6520726563656976656400000000000000000000000000604082015260600190565b600060208252825160406020840152612dc56060840182612b77565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401528091505092915050565b90815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e2e578283fd5b83018035915067ffffffffffffffff821115612e48578283fd5b602001915036819003821315612e5d57600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715612e8057fe5b604052919050565b600067ffffffffffffffff821115612e9c57fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015612ee3578181015183820152602001612ecb565b8381111561108f5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114612f1657600080fd5b5056fea164736f6c6343000706000a\",\n  \"deployedBytecode\": \"0x6080604052600436106101125760003560e01c8063c04b8d59116100a5578063df2ab5bb11610074578063f28c049811610059578063f28c0498146102f5578063f3995c6714610308578063fa461e331461031b576101bd565b8063df2ab5bb146102cf578063e0e189a0146102e2576101bd565b8063c04b8d5914610281578063c2e3140a14610294578063c45a0155146102a7578063db3e2198146102bc576101bd565b80634aa4a4fc116100e15780634aa4a4fc146102195780639b2c0a371461023b578063a4a78f0c1461024e578063ac9650d814610261576101bd565b806312210e8a146101c2578063414bf389146101ca5780634659a494146101f357806349404b7c14610206576101bd565b366101bd573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b6101bb61033b565b6101dd6101d83660046129f8565b61034d565b6040516101ea9190612df1565b60405180910390f35b6101bb610201366004612776565b6104bf565b6101bb610214366004612aff565b61057f565b34801561022557600080fd5b5061022e610745565b6040516101ea9190612c37565b6101bb610249366004612b2e565b610769565b6101bb61025c366004612776565b610981565b61027461026f3660046127d6565b610a56565b6040516101ea9190612caa565b6101dd61028f36600461294d565b610bb0565b6101bb6102a2366004612776565b610d0f565b3480156102b357600080fd5b5061022e610dc4565b6101dd6102ca3660046129f8565b610de8565b6101bb6102dd3660046126d7565b610f78565b6101bb6102f0366004612718565b611095565b6101dd610303366004612a14565b6111fb565b6101bb610316366004612776565b61132f565b34801561032757600080fd5b506101bb610336366004612868565b6113c7565b471561034b5761034b334761150e565b565b600081608001358061035d61165c565b11156103ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b61047060a08401356103e260808601606087016126b4565b6103f3610100870160e088016126b4565b604080518082019091528061040b60208a018a6126b4565b61041b60608b0160408c01612adc565b61042b60408c0160208d016126b4565b60405160200161043d93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611660565b91508260c001358210156104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b60405180910390fd5b50919050565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e48101839052905173ffffffffffffffffffffffffffffffffffffffff881691638fcbaf0c9161010480830192600092919082900301818387803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b50505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d602081101561063257600080fd5b50519050828110156106a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610740577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b50505050610740828261150e565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008211801561077a575060648211155b61078357600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d602081101561083657600080fd5b50519050848110156108a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b801561097a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b50505050600061271061095285846117e690919063ffffffff16565b8161095957fe5b049050801561096c5761096c838261150e565b6109788582840361150e565b505b5050505050565b604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d6020811015610a4057600080fd5b50511015610978576109788686868686866104bf565b60608167ffffffffffffffff81118015610a6f57600080fd5b50604051908082528060200260200182016040528015610aa357816020015b6060815260200190600190039081610a8e5790505b50905060005b82811015610ba95760008030868685818110610ac157fe5b9050602002810190610ad39190612dfa565b604051610ae1929190612c27565b600060405180830381855af49150503d8060008114610b1c576040519150601f19603f3d011682016040523d82523d6000602084013e610b21565b606091505b509150915081610b8757604481511015610b3a57600080fd5b60048101905080806020019051810190610b5491906128e3565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b09190612d28565b80848481518110610b9457fe5b60209081029190910101525050600101610aa9565b5092915050565b6000816040015180610bc061165c565b1115610c2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b335b6000610c3e8560000151611810565b9050610c97856060015182610c57578660200151610c59565b305b60006040518060400160405280610c738b6000015161181c565b81526020018773ffffffffffffffffffffffffffffffffffffffff16815250611660565b60608601528015610cb7578451309250610cb09061182b565b8552610cc4565b8460600151935050610cca565b50610c2f565b8360800151831015610d08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b5050919050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051869173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b505110156109785761097886868686868661132f565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816080013580610df861165c565b1115610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b610f0e60a0840135610e7d60808601606087016126b4565b610e8e610100870160e088016126b4565b6040518060400160405280886020016020810190610eac91906126b4565b610ebc60608b0160408c01612adc565b610ec960208c018c6126b4565b604051602001610edb93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611860565b91508260c00135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600055919050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b505190508281101561107e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561108f5761108f848383611a1c565b50505050565b6000821180156110a6575060648211155b6110af57600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b50519050848110156111b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b80156109785760006127106111ca83866117e6565b816111d157fe5b04905080156111e5576111e5878483611a1c565b6111f28786838503611a1c565b50505050505050565b600081604001358061120b61165c565b111561127857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b6112eb606084013561129060408601602087016126b4565b60408051808201909152600090806112a88980612dfa565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602090910152611860565b5060005491508260800135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c48101839052905173ffffffffffffffffffffffffffffffffffffffff88169163d505accf9160e480830192600092919082900301818387803b15801561055f57600080fd5b60008413806113d65750600083135b6113df57600080fd5b60006113ed82840184612a4c565b905060008060006114018460000151611bf1565b9250925092506114337f0000000000000000000000000000000000000000000000000000000000000000848484611c22565b5060008060008a13611474578473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610896114a5565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16108a5b9150915081156114c4576114bf8587602001513384611c41565b610573565b85516114cf90611810565b156114f45785516114df9061182b565b86526114ee8133600089611860565b50610573565b806000819055508394506105738587602001513384611c41565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061158557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611548565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146115e7576040519150601f19603f3d011682016040523d82523d6000602084013e6115ec565b606091505b505090508061074057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b4290565b600073ffffffffffffffffffffffffffffffffffffffff8416611681573093505b60008060006116938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808316908416106000806116c4868686611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856116ea8f611e5d565b73ffffffffffffffffffffffffffffffffffffffff8e161561170c578d611732565b8761172b5773fffd8963efd1fc6a506488495d951d5263988d25611732565b6401000276a45b8d6040516020016117439190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611772959493929190612c58565b6040805180830381600087803b15801561178b57600080fd5b505af115801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c39190612845565b91509150826117d257816117d4565b805b6000039b9a5050505050505050505050565b6000821580611801575050818102818382816117fe57fe5b04145b61180a57600080fd5b92915050565b8051604211155b919050565b606061180a826000602b611e8f565b805160609061180a9083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901611e8f565b600073ffffffffffffffffffffffffffffffffffffffff8416611881573093505b60008060006118938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808416908316106000806118c4858786611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856118ea8f611e5d565b60000373ffffffffffffffffffffffffffffffffffffffff8e161561190f578d611935565b8761192e5773fffd8963efd1fc6a506488495d951d5263988d25611935565b6401000276a45b8d6040516020016119469190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611975959493929190612c58565b6040805180830381600087803b15801561198e57600080fd5b505af11580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c69190612845565b915091506000836119db5781836000036119e1565b82826000035b909850905073ffffffffffffffffffffffffffffffffffffffff8a16611a0d578b8114611a0d57600080fd5b50505050505050949350505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310611af157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611ab4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b53576040519150601f19603f3d011682016040523d82523d6000602084013e611b58565b606091505b5091509150818015611b86575080511580611b865750808060200190516020811015611b8357600080fd5b50515b61097a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008080611bff8482612076565b9250611c0c846014612176565b9050611c19846017612076565b91509193909250565b6000611c3885611c33868686612266565b6122e3565b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015611c9c5750804710155b15611de5577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d0957600080fd5b505af1158015611d1d573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611db357600080fd5b505af1158015611dc7573d6000803e3d6000fd5b505050506040513d6020811015611ddd57600080fd5b5061108f9050565b73ffffffffffffffffffffffffffffffffffffffff8316301415611e1357611e0e848383611a1c565b61108f565b61108f84848484612313565b6000611e557f0000000000000000000000000000000000000000000000000000000000000000611e50868686612266565b6124f0565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210611e8b57600080fd5b5090565b60608182601f011015611f0357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015611f7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015611fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015612005576040519150600082526020820160405261206d565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561203e578051835260209283019201612026565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6000818260140110156120ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b816014018351101561215d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b6000818260030110156121ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b816003018351101561225d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b61226e612626565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156122a6579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b60006122ef83836124f0565b90503373ffffffffffffffffffffffffffffffffffffffff82161461180a57600080fd5b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106123f057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123b3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612452576040519150601f19603f3d011682016040523d82523d6000602084013e612457565b606091505b5091509150818015612485575080511580612485575080806020019051602081101561248257600080fd5b50515b61097857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061253257600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516060810182526000808252602082018190529181019190915290565b803561181781612ef4565b600082601f830112612661578081fd5b813561267461266f82612e88565b612e64565b818152846020838601011115612688578283fd5b816020850160208301379081016020019190915292915050565b600061010082840312156104b9578081fd5b6000602082840312156126c5578081fd5b81356126d081612ef4565b9392505050565b6000806000606084860312156126eb578182fd5b83356126f681612ef4565b925060208401359150604084013561270d81612ef4565b809150509250925092565b600080600080600060a0868803121561272f578081fd5b853561273a81612ef4565b945060208601359350604086013561275181612ef4565b925060608601359150608086013561276881612ef4565b809150509295509295909350565b60008060008060008060c0878903121561278e578081fd5b863561279981612ef4565b95506020870135945060408701359350606087013560ff811681146127bc578182fd5b9598949750929560808101359460a0909101359350915050565b600080602083850312156127e8578182fd5b823567ffffffffffffffff808211156127ff578384fd5b818501915085601f830112612812578384fd5b813581811115612820578485fd5b8660208083028501011115612833578485fd5b60209290920196919550909350505050565b60008060408385031215612857578182fd5b505080516020909101519092909150565b6000806000806060858703121561287d578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156128a2578384fd5b818701915087601f8301126128b5578384fd5b8135818111156128c3578485fd5b8860208285010111156128d4578485fd5b95989497505060200194505050565b6000602082840312156128f4578081fd5b815167ffffffffffffffff81111561290a578182fd5b8201601f8101841361291a578182fd5b805161292861266f82612e88565b81815285602083850101111561293c578384fd5b611c38826020830160208601612ec8565b60006020828403121561295e578081fd5b813567ffffffffffffffff80821115612975578283fd5b9083019060a08286031215612988578283fd5b60405160a08101818110838211171561299d57fe5b6040528235828111156129ae578485fd5b6129ba87828601612651565b8252506129c960208401612646565b602082015260408301356040820152606083013560608201526080830135608082015280935050505092915050565b60006101008284031215612a0a578081fd5b6126d083836126a2565b600060208284031215612a25578081fd5b813567ffffffffffffffff811115612a3b578182fd5b820160a081850312156126d0578182fd5b600060208284031215612a5d578081fd5b813567ffffffffffffffff80821115612a74578283fd5b9083019060408286031215612a87578283fd5b604051604081018181108382111715612a9c57fe5b604052823582811115612aad578485fd5b612ab987828601612651565b82525060208301359250612acc83612ef4565b6020810192909252509392505050565b600060208284031215612aed578081fd5b813562ffffff811681146126d0578182fd5b60008060408385031215612b11578182fd5b823591506020830135612b2381612ef4565b809150509250929050565b60008060008060808587031215612b43578182fd5b843593506020850135612b5581612ef4565b9250604085013591506060850135612b6c81612ef4565b939692955090935050565b60008151808452612b8f816020860160208601612ec8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152612c9f60a0830184612b77565b979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612d1b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612d09858351612b77565b94509285019290850190600101612ccf565b5092979650505050505050565b6000602082526126d06020830184612b77565b60208082526012908201527f546f6f206d756368207265717565737465640000000000000000000000000000604082015260600190565b60208082526013908201527f546f6f206c6974746c6520726563656976656400000000000000000000000000604082015260600190565b600060208252825160406020840152612dc56060840182612b77565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401528091505092915050565b90815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e2e578283fd5b83018035915067ffffffffffffffff821115612e48578283fd5b602001915036819003821315612e5d57600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715612e8057fe5b604052919050565b600067ffffffffffffffff821115612e9c57fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015612ee3578181015183820152602001612ecb565b8381111561108f5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114612f1657600080fd5b5056fea164736f6c6343000706000a\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n", "import { ChainId } from '@uniswap/sdk-core'\n\nexport const FACTORY_ADDRESS = '0x1F98431c8aD98523631AE4a59f267346ea31F984'\n\nexport const ADDRESS_ZERO = '0x0000000000000000000000000000000000000000'\n\n// @deprecated please use poolInitCodeHash(chainId: ChainId)\nexport const POOL_INIT_CODE_HASH = '0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54'\n\nexport function poolInitCodeHash(chainId?: ChainId): string {\n  switch (chainId) {\n    case ChainId.ZKSYNC:\n      return '0x010013f177ea1fcbc4520f9a3ca7cd2d1d77959e05aa66484027cb38e712aeed'\n    default:\n      return POOL_INIT_CODE_HASH\n  }\n}\n\n/**\n * The default factory enabled fee amounts, denominated in hundredths of bips.\n */\nexport enum FeeAmount {\n  LOWEST = 100,\n  LOW_200 = 200,\n  LOW_300 = 300,\n  LOW_400 = 400,\n  LOW = 500,\n  MEDIUM = 3000,\n  HIGH = 10000,\n}\n\n/**\n * The default factory tick spacings by fee amount.\n */\nexport const TICK_SPACINGS: { [amount in FeeAmount]: number } = {\n  [FeeAmount.LOWEST]: 1,\n  [FeeAmount.LOW_200]: 4,\n  [FeeAmount.LOW_300]: 6,\n  [FeeAmount.LOW_400]: 8,\n  [FeeAmount.LOW]: 10,\n  [FeeAmount.MEDIUM]: 60,\n  [FeeAmount.HIGH]: 200,\n}\n", "import JSBI from 'jsbi'\n\n// constants used internally but not expected to be used externally\nexport const NEGATIVE_ONE = JSBI.BigInt(-1)\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// used in liquidity amount math\nexport const Q96 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(96))\nexport const Q192 = JSBI.exponentiate(Q96, JSBI.BigInt(2))\n", "import { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { ChainId, computeZksyncCreate2Address, Token } from '@uniswap/sdk-core'\nimport { FeeAmount, poolInitCodeHash } from '../constants'\n\n/**\n * Computes a pool address\n * @param factoryAddress The Uniswap V3 factory address\n * @param tokenA The first token of the pair, irrespective of sort order\n * @param tokenB The second token of the pair, irrespective of sort order\n * @param fee The fee tier of the pool\n * @param initCodeHashManualOverride Override the init code hash used to compute the pool address if necessary\n * @param chainId\n * @returns The pool address\n */\nexport function computePoolAddress({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  initCodeHashManualOverride,\n  chainId,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: FeeAmount\n  initCodeHashManualOverride?: string\n  chainId?: ChainId\n}): string {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  const salt = keccak256(\n    ['bytes'],\n    [defaultAbiCoder.encode(['address', 'address', 'uint24'], [token0.address, token1.address, fee])]\n  )\n  const initCodeHash = initCodeHashManualOverride ?? poolInitCodeHash(chainId)\n\n  // ZKSync uses a different create2 address computation\n  // Most likely all ZKEVM chains will use the different computation from standard create2\n  switch (chainId) {\n    case ChainId.ZKSYNC:\n      return computeZksyncCreate2Address(factoryAddress, initCodeHash, salt)\n    default:\n      return getCreate2Address(factoryAddress, salt, initCodeHash)\n  }\n}\n", "import JSBI from 'jsbi'\nimport { ONE, ZERO } from '../internalConstants'\n\nexport abstract class FullMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static mulDivRoundingUp(a: JSBI, b: JSBI, denominator: JSBI): JSBI {\n    const product = JSBI.multiply(a, b)\n    let result = JSBI.divide(product, denominator)\n    if (JSBI.notEqual(JSBI.remainder(product, denominator), ZERO)) result = JSBI.add(result, ONE)\n    return result\n  }\n}\n", "import { MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO, Q96 } from '../internalConstants'\nimport { FullMath } from './fullMath'\n\nconst MaxUint160 = JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(160)), ONE)\n\nfunction multiplyIn256(x: JSBI, y: JSBI): JSBI {\n  const product = JSBI.multiply(x, y)\n  return JSBI.bitwiseAnd(product, MaxUint256)\n}\n\nfunction addIn256(x: JSBI, y: JSBI): JSBI {\n  const sum = JSBI.add(x, y)\n  return JSBI.bitwiseAnd(sum, MaxUint256)\n}\n\nexport abstract class SqrtPriceMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getAmount0Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n    const numerator2 = JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), ONE, sqrtRatioAX96)\n      : JSBI.divide(JSBI.divide(JSBI.multiply(numerator1, numerator2), sqrtRatioBX96), sqrtRatioAX96)\n  }\n\n  public static getAmount1Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96), Q96)\n      : JSBI.divide(JSBI.multiply(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)), Q96)\n  }\n\n  public static getNextSqrtPriceFromInput(sqrtPX96: JSBI, liquidity: JSBI, amountIn: JSBI, zeroForOne: boolean): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n      : this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true)\n  }\n\n  public static getNextSqrtPriceFromOutput(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amountOut: JSBI,\n    zeroForOne: boolean\n  ): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n      : this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false)\n  }\n\n  private static getNextSqrtPriceFromAmount0RoundingUp(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (JSBI.equal(amount, ZERO)) return sqrtPX96\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n\n    if (add) {\n      let product = multiplyIn256(amount, sqrtPX96)\n      if (JSBI.equal(JSBI.divide(product, amount), sqrtPX96)) {\n        const denominator = addIn256(numerator1, product)\n        if (JSBI.greaterThanOrEqual(denominator, numerator1)) {\n          return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n        }\n      }\n\n      return FullMath.mulDivRoundingUp(numerator1, ONE, JSBI.add(JSBI.divide(numerator1, sqrtPX96), amount))\n    } else {\n      let product = multiplyIn256(amount, sqrtPX96)\n\n      invariant(JSBI.equal(JSBI.divide(product, amount), sqrtPX96))\n      invariant(JSBI.greaterThan(numerator1, product))\n      const denominator = JSBI.subtract(numerator1, product)\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n    }\n  }\n\n  private static getNextSqrtPriceFromAmount1RoundingDown(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (add) {\n      const quotient = JSBI.lessThanOrEqual(amount, MaxUint160)\n        ? JSBI.divide(JSBI.leftShift(amount, JSBI.BigInt(96)), liquidity)\n        : JSBI.divide(JSBI.multiply(amount, Q96), liquidity)\n\n      return JSBI.add(sqrtPX96, quotient)\n    } else {\n      const quotient = FullMath.mulDivRoundingUp(amount, Q96, liquidity)\n\n      invariant(JSBI.greaterThan(sqrtPX96, quotient))\n      return JSBI.subtract(sqrtPX96, quotient)\n    }\n  }\n}\n", "import JSBI from 'jsbi'\nimport { FeeAmount } from '../constants'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\nimport { FullMath } from './fullMath'\nimport { SqrtPriceMath } from './sqrtPriceMath'\n\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6))\n\nexport abstract class SwapMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static computeSwapStep(\n    sqrtRatioCurrentX96: JSBI,\n    sqrtRatioTargetX96: JSBI,\n    liquidity: JSBI,\n    amountRemaining: JSBI,\n    feePips: JSBI | FeeAmount\n  ): [JSBI, JSBI, JSBI, JSBI] {\n    const returnValues: Partial<{\n      sqrtRatioNextX96: JSBI\n      amountIn: JSBI\n      amountOut: JSBI\n      feeAmount: JSBI\n    }> = {}\n\n    feePips = JSBI.BigInt(feePips)\n    const zeroForOne = JSBI.greaterThanOrEqual(sqrtRatioCurrentX96, sqrtRatioTargetX96)\n    const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO)\n\n    if (exactIn) {\n      const amountRemainingLessFee = JSBI.divide(\n        JSBI.multiply(amountRemaining, JSBI.subtract(MAX_FEE, feePips)),\n        MAX_FEE\n      )\n      returnValues.amountIn = zeroForOne\n        ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true)\n      if (JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn!)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          amountRemainingLessFee,\n          zeroForOne\n        )\n      }\n    } else {\n      returnValues.amountOut = zeroForOne\n        ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false)\n      if (JSBI.greaterThanOrEqual(JSBI.multiply(amountRemaining, NEGATIVE_ONE), returnValues.amountOut)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          JSBI.multiply(amountRemaining, NEGATIVE_ONE),\n          zeroForOne\n        )\n      }\n    }\n\n    const max = JSBI.equal(sqrtRatioTargetX96, returnValues.sqrtRatioNextX96)\n\n    if (zeroForOne) {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount0Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount1Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false)\n    } else {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, false)\n    }\n\n    if (!exactIn && JSBI.greaterThan(returnValues.amountOut!, JSBI.multiply(amountRemaining, NEGATIVE_ONE))) {\n      returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE)\n    }\n\n    if (exactIn && JSBI.notEqual(returnValues.sqrtRatioNextX96, sqrtRatioTargetX96)) {\n      // we didn't reach the target, so take the remainder of the maximum input as fee\n      returnValues.feeAmount = JSBI.subtract(amountRemaining, returnValues.amountIn!)\n    } else {\n      returnValues.feeAmount = FullMath.mulDivRoundingUp(\n        returnValues.amountIn!,\n        feePips,\n        JSBI.subtract(MAX_FEE, feePips)\n      )\n    }\n\n    return [returnValues.sqrtRatioNextX96!, returnValues.amountIn!, returnValues.amountOut!, returnValues.feeAmount!]\n  }\n}\n", "import JSBI from 'jsbi'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\n\nexport abstract class LiquidityMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static addDelta(x: JSBI, y: JSBI): JSBI {\n    if (JSBI.lessThan(y, ZERO)) {\n      return JSBI.subtract(x, JSBI.multiply(y, NEGATIVE_ONE))\n    } else {\n      return JSBI.add(x, y)\n    }\n  }\n}\n", "import { MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\n\nconst TWO = JSBI.BigInt(2)\nconst POWERS_OF_2 = [128, 64, 32, 16, 8, 4, 2, 1].map((pow: number): [number, JSBI] => [\n  pow,\n  JSBI.exponentiate(TWO, JSBI.BigInt(pow)),\n])\n\nexport function mostSignificantBit(x: JSBI): number {\n  invariant(JSBI.greaterThan(x, ZERO), 'ZERO')\n  invariant(JSBI.lessThanOrEqual(x, MaxUint256), 'MAX')\n\n  let msb: number = 0\n  for (const [power, min] of POWERS_OF_2) {\n    if (JSBI.greaterThanOrEqual(x, min)) {\n      x = JSBI.signedRightShift(x, JSBI.BigInt(power))\n      msb += power\n    }\n  }\n  return msb\n}\n", "import { MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { mostSignificantBit } from './mostSignificantBit'\n\nfunction mulShift(val: JSBI, mulBy: string): JSBI {\n  return JSBI.signedRightShift(JSBI.multiply(val, JSBI.BigInt(mulBy)), JSBI.BigInt(128))\n}\n\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32))\n\nexport abstract class TickMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * The minimum tick that can be used on any pool.\n   */\n  public static MIN_TICK: number = -887272\n  /**\n   * The maximum tick that can be used on any pool.\n   */\n  public static MAX_TICK: number = -TickMath.MIN_TICK\n\n  /**\n   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\n   */\n  public static MIN_SQRT_RATIO: JSBI = JSBI.BigInt('4295128739')\n  /**\n   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\n   */\n  public static MAX_SQRT_RATIO: JSBI = JSBI.BigInt('1461446703485210103287273052203988822378723970342')\n\n  /**\n   * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\n   * @param tick the tick for which to compute the sqrt ratio\n   */\n  public static getSqrtRatioAtTick(tick: number): JSBI {\n    invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK && Number.isInteger(tick), 'TICK')\n    const absTick: number = tick < 0 ? tick * -1 : tick\n\n    let ratio: JSBI =\n      (absTick & 0x1) !== 0\n        ? JSBI.BigInt('0xfffcb933bd6fad37aa2d162d1a594001')\n        : JSBI.BigInt('0x100000000000000000000000000000000')\n    if ((absTick & 0x2) !== 0) ratio = mulShift(ratio, '0xfff97272373d413259a46990580e213a')\n    if ((absTick & 0x4) !== 0) ratio = mulShift(ratio, '0xfff2e50f5f656932ef12357cf3c7fdcc')\n    if ((absTick & 0x8) !== 0) ratio = mulShift(ratio, '0xffe5caca7e10e4e61c3624eaa0941cd0')\n    if ((absTick & 0x10) !== 0) ratio = mulShift(ratio, '0xffcb9843d60f6159c9db58835c926644')\n    if ((absTick & 0x20) !== 0) ratio = mulShift(ratio, '0xff973b41fa98c081472e6896dfb254c0')\n    if ((absTick & 0x40) !== 0) ratio = mulShift(ratio, '0xff2ea16466c96a3843ec78b326b52861')\n    if ((absTick & 0x80) !== 0) ratio = mulShift(ratio, '0xfe5dee046a99a2a811c461f1969c3053')\n    if ((absTick & 0x100) !== 0) ratio = mulShift(ratio, '0xfcbe86c7900a88aedcffc83b479aa3a4')\n    if ((absTick & 0x200) !== 0) ratio = mulShift(ratio, '0xf987a7253ac413176f2b074cf7815e54')\n    if ((absTick & 0x400) !== 0) ratio = mulShift(ratio, '0xf3392b0822b70005940c7a398e4b70f3')\n    if ((absTick & 0x800) !== 0) ratio = mulShift(ratio, '0xe7159475a2c29b7443b29c7fa6e889d9')\n    if ((absTick & 0x1000) !== 0) ratio = mulShift(ratio, '0xd097f3bdfd2022b8845ad8f792aa5825')\n    if ((absTick & 0x2000) !== 0) ratio = mulShift(ratio, '0xa9f746462d870fdf8a65dc1f90e061e5')\n    if ((absTick & 0x4000) !== 0) ratio = mulShift(ratio, '0x70d869a156d2a1b890bb3df62baf32f7')\n    if ((absTick & 0x8000) !== 0) ratio = mulShift(ratio, '0x31be135f97d08fd981231505542fcfa6')\n    if ((absTick & 0x10000) !== 0) ratio = mulShift(ratio, '0x9aa508b5b7a84e1c677de54f3e99bc9')\n    if ((absTick & 0x20000) !== 0) ratio = mulShift(ratio, '0x5d6af8dedb81196699c329225ee604')\n    if ((absTick & 0x40000) !== 0) ratio = mulShift(ratio, '0x2216e584f5fa1ea926041bedfe98')\n    if ((absTick & 0x80000) !== 0) ratio = mulShift(ratio, '0x48a170391f7dc42444e8fa2')\n\n    if (tick > 0) ratio = JSBI.divide(MaxUint256, ratio)\n\n    // back to Q96\n    return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\n      ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\n      : JSBI.divide(ratio, Q32)\n  }\n\n  /**\n   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\n   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\n   * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\n   */\n  public static getTickAtSqrtRatio(sqrtRatioX96: JSBI): number {\n    invariant(\n      JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\n        JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO),\n      'SQRT_RATIO'\n    )\n\n    const sqrtRatioX128 = JSBI.leftShift(sqrtRatioX96, JSBI.BigInt(32))\n\n    const msb = mostSignificantBit(sqrtRatioX128)\n\n    let r: JSBI\n    if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(128))) {\n      r = JSBI.signedRightShift(sqrtRatioX128, JSBI.BigInt(msb - 127))\n    } else {\n      r = JSBI.leftShift(sqrtRatioX128, JSBI.BigInt(127 - msb))\n    }\n\n    let log_2: JSBI = JSBI.leftShift(JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(128)), JSBI.BigInt(64))\n\n    for (let i = 0; i < 14; i++) {\n      r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(127))\n      const f = JSBI.signedRightShift(r, JSBI.BigInt(128))\n      log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(63 - i)))\n      r = JSBI.signedRightShift(r, f)\n    }\n\n    const log_sqrt10001 = JSBI.multiply(log_2, JSBI.BigInt('255738958999603826347141'))\n\n    const tickLow = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.subtract(log_sqrt10001, JSBI.BigInt('3402992956809132418596140100660247210')),\n        JSBI.BigInt(128)\n      )\n    )\n    const tickHigh = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.add(log_sqrt10001, JSBI.BigInt('291339464771989622907027621153398088495')),\n        JSBI.BigInt(128)\n      )\n    )\n\n    return tickLow === tickHigh\n      ? tickLow\n      : JSBI.lessThanOrEqual(TickMath.getSqrtRatioAtTick(tickHigh), sqrtRatioX96)\n      ? tickHigh\n      : tickLow\n  }\n}\n", "import { SwapMath } from './swapMath'\nimport { LiquidityMath } from './liquidityMath'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { TickMath } from './tickMath'\nimport { NEGATIVE_ONE, ONE, ZERO } from '../internalConstants'\nimport { TickDataProvider } from '../entities/tickDataProvider'\n\ninterface StepComputations {\n  sqrtPriceStartX96: JSBI\n  tickNext: number\n  initialized: boolean\n  sqrtPriceNextX96: JSBI\n  amountIn: JSBI\n  amountOut: JSBI\n  feeAmount: JSBI\n}\n\nexport async function v3Swap(\n  fee: JSBI,\n  sqrtRatioX96: JSBI,\n  tickCurrent: number,\n  liquidity: JSBI,\n  tickSpacing: number,\n  tickDataProvider: TickDataProvider,\n  zeroForOne: boolean,\n  amountSpecified: JSBI,\n  sqrtPriceLimitX96?: JSBI\n): Promise<{ amountCalculated: JSBI; sqrtRatioX96: JSBI; liquidity: JSBI; tickCurrent: number }> {\n  if (!sqrtPriceLimitX96)\n    sqrtPriceLimitX96 = zeroForOne\n      ? JSBI.add(TickMath.MIN_SQRT_RATIO, ONE)\n      : JSBI.subtract(TickMath.MAX_SQRT_RATIO, ONE)\n\n  if (zeroForOne) {\n    invariant(JSBI.greaterThan(sqrtPriceLimitX96, TickMath.MIN_SQRT_RATIO), 'RATIO_MIN')\n    invariant(JSBI.lessThan(sqrtPriceLimitX96, sqrtRatioX96), 'RATIO_CURRENT')\n  } else {\n    invariant(JSBI.lessThan(sqrtPriceLimitX96, TickMath.MAX_SQRT_RATIO), 'RATIO_MAX')\n    invariant(JSBI.greaterThan(sqrtPriceLimitX96, sqrtRatioX96), 'RATIO_CURRENT')\n  }\n\n  const exactInput = JSBI.greaterThanOrEqual(amountSpecified, ZERO)\n\n  // keep track of swap state\n\n  const state = {\n    amountSpecifiedRemaining: amountSpecified,\n    amountCalculated: ZERO,\n    sqrtPriceX96: sqrtRatioX96,\n    tick: tickCurrent,\n    liquidity: liquidity,\n  }\n\n  // start swap while loop\n  while (JSBI.notEqual(state.amountSpecifiedRemaining, ZERO) && state.sqrtPriceX96 !== sqrtPriceLimitX96) {\n    let step: Partial<StepComputations> = {}\n    step.sqrtPriceStartX96 = state.sqrtPriceX96\n\n    // because each iteration of the while loop rounds, we can't optimize this code (relative to the smart contract)\n    // by simply traversing to the next available tick, we instead need to exactly replicate\n    // tickBitmap.nextInitializedTickWithinOneWord\n    ;[step.tickNext, step.initialized] = await tickDataProvider.nextInitializedTickWithinOneWord(\n      state.tick,\n      zeroForOne,\n      tickSpacing\n    )\n\n    if (step.tickNext < TickMath.MIN_TICK) {\n      step.tickNext = TickMath.MIN_TICK\n    } else if (step.tickNext > TickMath.MAX_TICK) {\n      step.tickNext = TickMath.MAX_TICK\n    }\n\n    step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext)\n    ;[state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.computeSwapStep(\n      state.sqrtPriceX96,\n      (\n        zeroForOne\n          ? JSBI.lessThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\n          : JSBI.greaterThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\n      )\n        ? sqrtPriceLimitX96\n        : step.sqrtPriceNextX96,\n      state.liquidity,\n      state.amountSpecifiedRemaining,\n      fee\n    )\n\n    if (exactInput) {\n      state.amountSpecifiedRemaining = JSBI.subtract(\n        state.amountSpecifiedRemaining,\n        JSBI.add(step.amountIn, step.feeAmount)\n      )\n      state.amountCalculated = JSBI.subtract(state.amountCalculated, step.amountOut)\n    } else {\n      state.amountSpecifiedRemaining = JSBI.add(state.amountSpecifiedRemaining, step.amountOut)\n      state.amountCalculated = JSBI.add(state.amountCalculated, JSBI.add(step.amountIn, step.feeAmount))\n    }\n\n    // TODO\n    if (JSBI.equal(state.sqrtPriceX96, step.sqrtPriceNextX96)) {\n      // if the tick is initialized, run the tick transition\n      if (step.initialized) {\n        let liquidityNet = JSBI.BigInt((await tickDataProvider.getTick(step.tickNext)).liquidityNet)\n        // if we're moving leftward, we interpret liquidityNet as the opposite sign\n        // safe because liquidityNet cannot be type(int128).min\n        if (zeroForOne) liquidityNet = JSBI.multiply(liquidityNet, NEGATIVE_ONE)\n\n        state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet)\n      }\n\n      state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext\n    } else if (JSBI.notEqual(state.sqrtPriceX96, step.sqrtPriceStartX96)) {\n      // updated comparison function\n      // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n      state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96)\n    }\n  }\n\n  return {\n    amountCalculated: state.amountCalculated,\n    sqrtRatioX96: state.sqrtPriceX96,\n    liquidity: state.liquidity,\n    tickCurrent: state.tick,\n  }\n}\n", "import { BigintIsh } from '@uniswap/sdk-core'\n\n/**\n * Provides information about ticks\n */\nexport interface TickDataProvider {\n  /**\n   * Return information corresponding to a specific tick\n   * @param tick the tick to load\n   */\n  getTick(tick: number): Promise<{ liquidityNet: BigintIsh }>\n\n  /**\n   * Return the next tick that is initialized within a single word\n   * @param tick The current tick\n   * @param lte Whether the next tick should be lte the current tick\n   * @param tickSpacing The tick spacing of the pool\n   */\n  nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]>\n}\n\n/**\n * This tick data provider does not know how to fetch any tick data. It throws whenever it is required. Useful if you\n * do not need to load tick data for your use case.\n */\nexport class NoTickDataProvider implements TickDataProvider {\n  private static ERROR_MESSAGE = 'No tick data provider was given'\n  async getTick(_tick: number): Promise<{ liquidityNet: BigintIsh }> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n\n  async nextInitializedTickWithinOneWord(\n    _tick: number,\n    _lte: boolean,\n    _tickSpacing: number\n  ): Promise<[number, boolean]> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n}\n", "/**\n * Determines if a tick list is sorted\n * @param list The tick list\n * @param comparator The comparator\n * @returns true if sorted\n */\nexport function isSorted<T>(list: Array<T>, comparator: (a: T, b: T) => number): boolean {\n  for (let i = 0; i < list.length - 1; i++) {\n    if (comparator(list[i], list[i + 1]) > 0) {\n      return false\n    }\n  }\n  return true\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Tick } from '../entities/tick'\nimport { ZERO } from '../internalConstants'\nimport { isSorted } from './isSorted'\n\nfunction tickComparator(a: Tick, b: Tick) {\n  return a.index - b.index\n}\n\n/**\n * Utility methods for interacting with sorted lists of ticks\n */\nexport abstract class TickList {\n  /**\n   * Cannot be constructed\n   */\n  private constructor() {}\n\n  public static validateList(ticks: Tick[], tickSpacing: number) {\n    invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO')\n    // ensure ticks are spaced appropriately\n    invariant(\n      ticks.every(({ index }) => index % tickSpacing === 0),\n      'TICK_SPACING'\n    )\n\n    // ensure tick liquidity deltas sum to 0\n    invariant(\n      JSBI.equal(\n        ticks.reduce((accumulator, { liquidityNet }) => JSBI.add(accumulator, liquidityNet), ZERO),\n        ZERO\n      ),\n      'ZERO_NET'\n    )\n\n    invariant(isSorted(ticks, tickComparator), 'SORTED')\n  }\n\n  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick < ticks[0].index\n  }\n\n  public static isAtOrAboveLargest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick >= ticks[ticks.length - 1].index\n  }\n\n  public static getTick(ticks: readonly Tick[], index: number): Tick {\n    const tick = ticks[this.binarySearch(ticks, index)]\n    invariant(tick.index === index, 'NOT_CONTAINED')\n    return tick\n  }\n\n  /**\n   * Finds the largest tick in the list of ticks that is less than or equal to tick\n   * @param ticks list of ticks\n   * @param tick tick to find the largest tick that is less than or equal to tick\n   * @private\n   */\n  private static binarySearch(ticks: readonly Tick[], tick: number): number {\n    invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n\n    let l = 0\n    let r = ticks.length - 1\n    let i\n    while (true) {\n      i = Math.floor((l + r) / 2)\n\n      if (ticks[i].index <= tick && (i === ticks.length - 1 || ticks[i + 1].index > tick)) {\n        return i\n      }\n\n      if (ticks[i].index < tick) {\n        l = i + 1\n      } else {\n        r = i - 1\n      }\n    }\n  }\n\n  public static nextInitializedTick(ticks: readonly Tick[], tick: number, lte: boolean): Tick {\n    if (lte) {\n      invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n      if (TickList.isAtOrAboveLargest(ticks, tick)) {\n        return ticks[ticks.length - 1]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index]\n    } else {\n      invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST')\n      if (this.isBelowSmallest(ticks, tick)) {\n        return ticks[0]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index + 1]\n    }\n  }\n\n  public static nextInitializedTickWithinOneWord(\n    ticks: readonly Tick[],\n    tick: number,\n    lte: boolean,\n    tickSpacing: number\n  ): [number, boolean] {\n    const compressed = Math.floor(tick / tickSpacing) // matches rounding in the code\n\n    if (lte) {\n      const wordPos = compressed >> 8\n      const minimum = (wordPos << 8) * tickSpacing\n\n      if (TickList.isBelowSmallest(ticks, tick)) {\n        return [minimum, false]\n      }\n\n      const index = TickList.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.max(minimum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    } else {\n      const wordPos = (compressed + 1) >> 8\n      const maximum = (((wordPos + 1) << 8) - 1) * tickSpacing\n\n      if (this.isAtOrAboveLargest(ticks, tick)) {\n        return [maximum, false]\n      }\n\n      const index = this.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.min(maximum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    }\n  }\n}\n", "import { BigintIsh } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * Generated method parameters for executing a call.\n */\nexport interface MethodParameters {\n  /**\n   * The hex encoded calldata to perform the given operation\n   */\n  calldata: string\n  /**\n   * The amount of ether (wei) to send in hex.\n   */\n  value: string\n}\n\n/**\n * Converts a big int to a hex string\n * @param bigintIsh\n * @returns The hex encoded calldata\n */\nexport function toHex(bigintIsh: BigintIsh) {\n  const bigInt = JSBI.BigInt(bigintIsh)\n  let hex = bigInt.toString(16)\n  if (hex.length % 2 !== 0) {\n    hex = `0${hex}`\n  }\n  return `0x${hex}`\n}\n", "import { pack } from '@ethersproject/solidity'\nimport { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool } from '../entities/pool'\nimport { Route } from '../entities/route'\n\n/**\n * Converts a route to a hex encoded path\n * @param route the v3 path to convert to an encoded path\n * @param exactOutput whether the route should be encoded in reverse, for making exact output swaps\n */\nexport function encodeRouteToPath(route: Route<Currency, Currency>, exactOutput: boolean): string {\n  const firstInputToken: Token = route.input.wrapped\n\n  const { path, types } = route.pools.reduce(\n    (\n      { inputToken, path, types }: { inputToken: Token; path: (string | number)[]; types: string[] },\n      pool: Pool,\n      index\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      if (index === 0) {\n        return {\n          inputToken: outputToken,\n          types: ['address', 'uint24', 'address'],\n          path: [inputToken.address, pool.fee, outputToken.address],\n        }\n      } else {\n        return {\n          inputToken: outputToken,\n          types: [...types, 'uint24', 'address'],\n          path: [...path, pool.fee, outputToken.address],\n        }\n      }\n    },\n    { inputToken: firstInputToken, path: [], types: [] }\n  )\n\n  return exactOutput ? pack(types.reverse(), path.reverse()) : pack(types, path)\n}\n", "import JSBI from 'jsbi'\nimport { BigintIsh, sqrt } from '@uniswap/sdk-core'\n\n/**\n * Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0\n * @param amount1 The numerator amount i.e., the amount of token1\n * @param amount0 The denominator amount i.e., the amount of token0\n * @returns The sqrt ratio\n */\n\nexport function encodeSqrtRatioX96(amount1: BigintIsh, amount0: BigintIsh): JSBI {\n  const numerator = JSBI.leftShift(JSBI.BigInt(amount1), JSBI.BigInt(192))\n  const denominator = JSBI.BigInt(amount0)\n  const ratioX192 = JSBI.divide(numerator, denominator)\n  return sqrt(ratioX192)\n}\n", "import { BigintIsh } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q96 } from '../internalConstants'\n\n/**\n * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.\n * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,\n * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future\n * v3 router contract.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, imprecise\n */\nfunction maxLiquidityForAmount0Imprecise(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  const intermediate = JSBI.divide(JSBI.multiply(sqrtRatioAX96, sqrtRatioBX96), Q96)\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount0), intermediate), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\n/**\n * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, precise\n */\nfunction maxLiquidityForAmount0Precise(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n\n  const numerator = JSBI.multiply(JSBI.multiply(JSBI.BigInt(amount0), sqrtRatioAX96), sqrtRatioBX96)\n  const denominator = JSBI.multiply(Q96, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n\n  return JSBI.divide(numerator, denominator)\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token1\n * @param sqrtRatioAX96 The price at the lower tick boundary\n * @param sqrtRatioBX96 The price at the upper tick boundary\n * @param amount1 The token1 amount\n * @returns liquidity for amount1\n */\nfunction maxLiquidityForAmount1(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount1: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount1), Q96), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n * and the prices at the tick boundaries.\n * @param sqrtRatioCurrentX96 the current price\n * @param sqrtRatioAX96 price at lower boundary\n * @param sqrtRatioBX96 price at upper boundary\n * @param amount0 token0 amount\n * @param amount1 token1 amount\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\n * not what core can theoretically support\n */\nexport function maxLiquidityForAmounts(\n  sqrtRatioCurrentX96: JSBI,\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigintIsh,\n  amount1: BigintIsh,\n  useFullPrecision: boolean\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n\n  const maxLiquidityForAmount0 = useFullPrecision ? maxLiquidityForAmount0Precise : maxLiquidityForAmount0Imprecise\n\n  if (JSBI.lessThanOrEqual(sqrtRatioCurrentX96, sqrtRatioAX96)) {\n    return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0)\n  } else if (JSBI.lessThan(sqrtRatioCurrentX96, sqrtRatioBX96)) {\n    const liquidity0 = maxLiquidityForAmount0(sqrtRatioCurrentX96, sqrtRatioBX96, amount0)\n    const liquidity1 = maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioCurrentX96, amount1)\n    return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1\n  } else {\n    return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1)\n  }\n}\n", "import invariant from 'tiny-invariant'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns the closest tick that is nearest a given tick and usable for the given tick spacing\n * @param tick the target tick\n * @param tickSpacing the spacing of the pool\n */\nexport function nearestUsableTick(tick: number, tickSpacing: number) {\n  invariant(Number.isInteger(tick) && Number.isInteger(tickSpacing), 'INTEGERS')\n  invariant(tickSpacing > 0, 'TICK_SPACING')\n  invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK, 'TICK_BOUND')\n  const rounded = Math.round(tick / tickSpacing) * tickSpacing\n  if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing\n  else if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing\n  else return rounded\n}\n", "import JSBI from 'jsbi'\nimport { subIn256 } from '.'\n\nconst Q128 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128))\n\nexport abstract class PositionLibrary {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // replicates the portions of Position#update required to compute unaccounted fees\n  public static getTokensOwed(\n    feeGrowthInside0LastX128: JSBI,\n    feeGrowthInside1LastX128: JSBI,\n    liquidity: JSBI,\n    feeGrowthInside0X128: JSBI,\n    feeGrowthInside1X128: JSBI\n  ) {\n    const tokensOwed0 = JSBI.divide(\n      JSBI.multiply(subIn256(feeGrowthInside0X128, feeGrowthInside0LastX128), liquidity),\n      Q128\n    )\n\n    const tokensOwed1 = JSBI.divide(\n      JSBI.multiply(subIn256(feeGrowthInside1X128, feeGrowthInside1LastX128), liquidity),\n      Q128\n    )\n\n    return [tokensOwed0, tokensOwed1]\n  }\n}\n", "import { Price, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q192 } from '../internalConstants'\nimport { encodeSqrtRatioX96 } from './encodeSqrtRatioX96'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns a price object corresponding to the input tick and the base/quote token\n * Inputs must be tokens because the address order is used to interpret the price represented by the tick\n * @param baseToken the base token of the price\n * @param quoteToken the quote token of the price\n * @param tick the tick for which to return the price\n */\nexport function tickToPrice(baseToken: Token, quoteToken: Token, tick: number): Price<Token, Token> {\n  const sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick)\n\n  const ratioX192 = JSBI.multiply(sqrtRatioX96, sqrtRatioX96)\n\n  return baseToken.sortsBefore(quoteToken)\n    ? new Price(baseToken, quoteToken, Q192, ratioX192)\n    : new Price(baseToken, quoteToken, ratioX192, Q192)\n}\n\n/**\n * Returns the first tick for which the given price is greater than or equal to the tick price\n * @param price for which to return the closest tick that represents a price less than or equal to the input price,\n * i.e. the price of the returned tick is less than or equal to the input price\n */\nexport function priceToClosestTick(price: Price<Token, Token>): number {\n  const sorted = price.baseCurrency.sortsBefore(price.quoteCurrency)\n\n  const sqrtRatioX96 = sorted\n    ? encodeSqrtRatioX96(price.numerator, price.denominator)\n    : encodeSqrtRatioX96(price.denominator, price.numerator)\n\n  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96)\n  const nextTickPrice = tickToPrice(price.baseCurrency, price.quoteCurrency, tick + 1)\n  if (sorted) {\n    if (!price.lessThan(nextTickPrice)) {\n      tick++\n    }\n  } else {\n    if (!price.greaterThan(nextTickPrice)) {\n      tick++\n    }\n  }\n  return tick\n}\n", "import JSBI from 'jsbi'\nimport { ZERO } from '../internalConstants'\n\ninterface FeeGrowthOutside {\n  feeGrowthOutside0X128: JSBI\n  feeGrowthOutside1X128: JSBI\n}\n\nconst Q256 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(256))\n\nexport function subIn256(x: JSBI, y: JSBI): JSBI {\n  const difference = JSBI.subtract(x, y)\n\n  if (JSBI.lessThan(difference, ZERO)) {\n    return JSBI.add(Q256, difference)\n  } else {\n    return difference\n  }\n}\n\nexport abstract class TickLibrary {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getFeeGrowthInside(\n    feeGrowthOutsideLower: FeeGrowthOutside,\n    feeGrowthOutsideUpper: FeeGrowthOutside,\n    tickLower: number,\n    tickUpper: number,\n    tickCurrent: number,\n    feeGrowthGlobal0X128: JSBI,\n    feeGrowthGlobal1X128: JSBI\n  ) {\n    let feeGrowthBelow0X128: JSBI\n    let feeGrowthBelow1X128: JSBI\n    if (tickCurrent >= tickLower) {\n      feeGrowthBelow0X128 = feeGrowthOutsideLower.feeGrowthOutside0X128\n      feeGrowthBelow1X128 = feeGrowthOutsideLower.feeGrowthOutside1X128\n    } else {\n      feeGrowthBelow0X128 = subIn256(feeGrowthGlobal0X128, feeGrowthOutsideLower.feeGrowthOutside0X128)\n      feeGrowthBelow1X128 = subIn256(feeGrowthGlobal1X128, feeGrowthOutsideLower.feeGrowthOutside1X128)\n    }\n\n    let feeGrowthAbove0X128: JSBI\n    let feeGrowthAbove1X128: JSBI\n    if (tickCurrent < tickUpper) {\n      feeGrowthAbove0X128 = feeGrowthOutsideUpper.feeGrowthOutside0X128\n      feeGrowthAbove1X128 = feeGrowthOutsideUpper.feeGrowthOutside1X128\n    } else {\n      feeGrowthAbove0X128 = subIn256(feeGrowthGlobal0X128, feeGrowthOutsideUpper.feeGrowthOutside0X128)\n      feeGrowthAbove1X128 = subIn256(feeGrowthGlobal1X128, feeGrowthOutsideUpper.feeGrowthOutside1X128)\n    }\n\n    return [\n      subIn256(subIn256(feeGrowthGlobal0X128, feeGrowthBelow0X128), feeGrowthAbove0X128),\n      subIn256(subIn256(feeGrowthGlobal1X128, feeGrowthBelow1X128), feeGrowthAbove1X128),\n    ]\n  }\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { BigintIsh } from '@uniswap/sdk-core'\nimport { TickMath } from '../utils'\n\nexport interface TickConstructorArgs {\n  index: number\n  liquidityGross: BigintIsh\n  liquidityNet: BigintIsh\n}\n\nexport class Tick {\n  public readonly index: number\n  public readonly liquidityGross: JSBI\n  public readonly liquidityNet: JSBI\n\n  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {\n    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, 'TICK')\n    this.index = index\n    this.liquidityGross = JSBI.BigInt(liquidityGross)\n    this.liquidityNet = JSBI.BigInt(liquidityNet)\n  }\n}\n", "import { BigintIsh } from '@uniswap/sdk-core'\nimport { TickList } from '../utils/tickList'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { TickDataProvider } from './tickDataProvider'\n\n/**\n * A data provider for ticks that is backed by an in-memory array of ticks.\n */\nexport class TickListDataProvider implements TickDataProvider {\n  private ticks: readonly Tick[]\n\n  constructor(ticks: (Tick | TickConstructorArgs)[], tickSpacing: number) {\n    const ticksMapped: Tick[] = ticks.map((t) => (t instanceof Tick ? t : new Tick(t)))\n    TickList.validateList(ticksMapped, tickSpacing)\n    this.ticks = ticksMapped\n  }\n\n  async getTick(tick: number): Promise<{ liquidityNet: BigintIsh; liquidityGross: BigintIsh }> {\n    return TickList.getTick(this.ticks, tick)\n  }\n\n  async nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]> {\n    return TickList.nextInitializedTickWithinOneWord(this.ticks, tick, lte, tickSpacing)\n  }\n}\n", "import { BigintIsh, CurrencyAmount, Price, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { FACTORY_ADDRESS, FeeAmount, TICK_SPACINGS } from '../constants'\nimport { NEGATIVE_ONE, Q192 } from '../internalConstants'\nimport { computePoolAddress } from '../utils/computePoolAddress'\nimport { v3Swap } from '../utils/v3swap'\nimport { TickMath } from '../utils/tickMath'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { NoTickDataProvider, TickDataProvider } from './tickDataProvider'\nimport { TickListDataProvider } from './tickListDataProvider'\n\n/**\n * By default, pools will not allow operations that require ticks.\n */\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider()\n\n/**\n * Represents a V3 pool\n */\nexport class Pool {\n  public readonly token0: Token\n  public readonly token1: Token\n  public readonly fee: FeeAmount\n  public readonly sqrtRatioX96: JSBI\n  public readonly liquidity: JSBI\n  public readonly tickCurrent: number\n  public readonly tickDataProvider: TickDataProvider\n\n  private _token0Price?: Price<Token, Token>\n  private _token1Price?: Price<Token, Token>\n\n  public static getAddress(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    initCodeHashManualOverride?: string,\n    factoryAddressOverride?: string\n  ): string {\n    return computePoolAddress({\n      factoryAddress: factoryAddressOverride ?? FACTORY_ADDRESS,\n      fee,\n      tokenA,\n      tokenB,\n      initCodeHashManualOverride,\n    })\n  }\n\n  /**\n   * Construct a pool\n   * @param tokenA One of the tokens in the pool\n   * @param tokenB The other token in the pool\n   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool\n   * @param sqrtRatioX96 The sqrt of the current ratio of amounts of token1 to token0\n   * @param liquidity The current value of in range liquidity\n   * @param tickCurrent The current tick of the pool\n   * @param ticks The current state of the pool ticks or a data provider that can return tick data\n   */\n  public constructor(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtRatioX96: BigintIsh,\n    liquidity: BigintIsh,\n    tickCurrent: number,\n    ticks: TickDataProvider | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT\n  ) {\n    invariant(Number.isInteger(fee) && fee < 1_000_000, 'FEE')\n\n    const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent)\n    const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1)\n    invariant(\n      JSBI.greaterThanOrEqual(JSBI.BigInt(sqrtRatioX96), tickCurrentSqrtRatioX96) &&\n        JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),\n      'PRICE_BOUNDS'\n    )\n    // always create a copy of the list since we want the pool's tick list to be immutable\n    ;[this.token0, this.token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n    this.fee = fee\n    this.sqrtRatioX96 = JSBI.BigInt(sqrtRatioX96)\n    this.liquidity = JSBI.BigInt(liquidity)\n    this.tickCurrent = tickCurrent\n    this.tickDataProvider = Array.isArray(ticks) ? new TickListDataProvider(ticks, TICK_SPACINGS[fee]) : ticks\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token The token to check\n   * @returns True if token is either token0 or token\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token0, i.e. the ratio of token1 over token0\n   */\n  public get token0Price(): Price<Token, Token> {\n    return (\n      this._token0Price ??\n      (this._token0Price = new Price(\n        this.token0,\n        this.token1,\n        Q192,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96)\n      ))\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token1, i.e. the ratio of token0 over token1\n   */\n  public get token1Price(): Price<Token, Token> {\n    return (\n      this._token1Price ??\n      (this._token1Price = new Price(\n        this.token1,\n        this.token0,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\n        Q192\n      ))\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pool.\n   * @param token The token to return price of\n   * @returns The price of the given token, in terms of the other.\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pool.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  /**\n   * Given an input amount of a token, return the computed output amount, and a pool with state updated after the trade\n   * @param inputAmount The input amount for which to quote the output amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit\n   * @returns The output amount and the pool with updated state\n   */\n  public async getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n\n    const zeroForOne = inputAmount.currency.equals(this.token0)\n\n    const {\n      amountCalculated: outputAmount,\n      sqrtRatioX96,\n      liquidity,\n      tickCurrent,\n    } = await this.swap(zeroForOne, inputAmount.quotient, sqrtPriceLimitX96)\n    const outputToken = zeroForOne ? this.token1 : this.token0\n    return [\n      CurrencyAmount.fromRawAmount(outputToken, JSBI.multiply(outputAmount, NEGATIVE_ONE)),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider),\n    ]\n  }\n\n  /**\n   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade\n   * @param outputAmount the output amount for which to quote the input amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns The input amount and the pool with updated state\n   */\n  public async getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(outputAmount.currency.isToken && this.involvesToken(outputAmount.currency), 'TOKEN')\n\n    const zeroForOne = outputAmount.currency.equals(this.token1)\n\n    const {\n      amountCalculated: inputAmount,\n      sqrtRatioX96,\n      liquidity,\n      tickCurrent,\n    } = await this.swap(zeroForOne, JSBI.multiply(outputAmount.quotient, NEGATIVE_ONE), sqrtPriceLimitX96)\n    const inputToken = zeroForOne ? this.token0 : this.token1\n    return [\n      CurrencyAmount.fromRawAmount(inputToken, inputAmount),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider),\n    ]\n  }\n\n  /**\n   * Executes a swap\n   * @param zeroForOne Whether the amount in is token0 or token1\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns amountCalculated\n   * @returns sqrtRatioX96\n   * @returns liquidity\n   * @returns tickCurrent\n   */\n  private async swap(\n    zeroForOne: boolean,\n    amountSpecified: JSBI,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<{ amountCalculated: JSBI; sqrtRatioX96: JSBI; liquidity: JSBI; tickCurrent: number }> {\n    return v3Swap(\n      JSBI.BigInt(this.fee),\n      this.sqrtRatioX96,\n      this.tickCurrent,\n      this.liquidity,\n      this.tickSpacing,\n      this.tickDataProvider,\n      zeroForOne,\n      amountSpecified,\n      sqrtPriceLimitX96\n    )\n  }\n\n  public get tickSpacing(): number {\n    return TICK_SPACINGS[this.fee]\n  }\n}\n", "import { BigintIsh, MaxUint256, Percent, Price, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\nimport { maxLiquidityForAmounts } from '../utils/maxLiquidityForAmounts'\nimport { tickToPrice } from '../utils/priceTickConversions'\nimport { SqrtPriceMath } from '../utils/sqrtPriceMath'\nimport { TickMath } from '../utils/tickMath'\nimport { encodeSqrtRatioX96 } from '../utils/encodeSqrtRatioX96'\nimport { Pool } from './pool'\n\ninterface PositionConstructorArgs {\n  pool: Pool\n  tickLower: number\n  tickUpper: number\n  liquidity: BigintIsh\n}\n\n/**\n * Represents a position on a Uniswap V3 Pool\n */\nexport class Position {\n  public readonly pool: Pool\n  public readonly tickLower: number\n  public readonly tickUpper: number\n  public readonly liquidity: JSBI\n\n  // cached resuts for the getters\n  private _token0Amount: CurrencyAmount<Token> | null = null\n  private _token1Amount: CurrencyAmount<Token> | null = null\n  private _mintAmounts: Readonly<{ amount0: JSBI; amount1: JSBI }> | null = null\n\n  /**\n   * Constructs a position for a given pool with the given liquidity\n   * @param pool For which pool the liquidity is assigned\n   * @param liquidity The amount of liquidity that is in the position\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   */\n  public constructor({ pool, liquidity, tickLower, tickUpper }: PositionConstructorArgs) {\n    invariant(tickLower < tickUpper, 'TICK_ORDER')\n    invariant(tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0, 'TICK_LOWER')\n    invariant(tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0, 'TICK_UPPER')\n\n    this.pool = pool\n    this.tickLower = tickLower\n    this.tickUpper = tickUpper\n    this.liquidity = JSBI.BigInt(liquidity)\n  }\n\n  /**\n   * Returns the price of token0 at the lower tick\n   */\n  public get token0PriceLower(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickLower)\n  }\n\n  /**\n   * Returns the price of token0 at the upper tick\n   */\n  public get token0PriceUpper(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickUpper)\n  }\n\n  /**\n   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount0(): CurrencyAmount<Token> {\n    if (this._token0Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token0Amount = CurrencyAmount.fromRawAmount(this.pool.token0, ZERO)\n      }\n    }\n    return this._token0Amount\n  }\n\n  /**\n   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount1(): CurrencyAmount<Token> {\n    if (this._token1Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(this.pool.token1, ZERO)\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      }\n    }\n    return this._token1Amount\n  }\n\n  /**\n   * Returns the lower and upper sqrt ratios if the price 'slips' up to slippage tolerance percentage\n   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert\n   * @returns The sqrt ratios after slippage\n   */\n  private ratiosAfterSlippage(slippageTolerance: Percent): { sqrtRatioX96Lower: JSBI; sqrtRatioX96Upper: JSBI } {\n    const priceLower = this.pool.token0Price.asFraction.multiply(new Percent(1).subtract(slippageTolerance))\n    const priceUpper = this.pool.token0Price.asFraction.multiply(slippageTolerance.add(1))\n    let sqrtRatioX96Lower = encodeSqrtRatioX96(priceLower.numerator, priceLower.denominator)\n    if (JSBI.lessThanOrEqual(sqrtRatioX96Lower, TickMath.MIN_SQRT_RATIO)) {\n      sqrtRatioX96Lower = JSBI.add(TickMath.MIN_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    let sqrtRatioX96Upper = encodeSqrtRatioX96(priceUpper.numerator, priceUpper.denominator)\n    if (JSBI.greaterThanOrEqual(sqrtRatioX96Upper, TickMath.MAX_SQRT_RATIO)) {\n      sqrtRatioX96Upper = JSBI.subtract(TickMath.MAX_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    return {\n      sqrtRatioX96Lower,\n      sqrtRatioX96Upper,\n    }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to safely mint the amount of liquidity held by the position\n   * with the given slippage tolerance\n   * @param slippageTolerance Tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public mintAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // because the router is imprecise, we need to calculate the position that will be created (assuming no slippage)\n    const positionThatWillBeCreated = Position.fromAmounts({\n      pool: this.pool,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n      ...this.mintAmounts, // the mint amounts are what will be passed as calldata\n      useFullPrecision: false,\n    })\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const { amount0 } = new Position({\n      pool: poolUpper,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).mintAmounts\n    // ...and the lower for amount1\n    const { amount1 } = new Position({\n      pool: poolLower,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).mintAmounts\n\n    return { amount0, amount1 }\n  }\n\n  /**\n   * Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the\n   * position with the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public burnAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const amount0 = new Position({\n      pool: poolUpper,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).amount0\n    // ...and the lower for amount1\n    const amount1 = new Position({\n      pool: poolLower,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).amount1\n\n    return { amount0: amount0.quotient, amount1: amount1.quotient }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at\n   * the current price for the pool\n   */\n  public get mintAmounts(): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    if (this._mintAmounts === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: ZERO,\n        }\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            true\n          ),\n        }\n      } else {\n        return {\n          amount0: ZERO,\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n        }\n      }\n    }\n    return this._mintAmounts\n  }\n\n  /**\n   * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n   * and the prices at the tick boundaries.\n   * @param pool The pool for which the position should be created\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   * @param amount0 token0 amount\n   * @param amount1 token1 amount\n   * @param useFullPrecision If false, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The amount of liquidity for the position\n   */\n  public static fromAmounts({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    amount1,\n    useFullPrecision,\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    amount1: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower)\n    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper)\n    return new Position({\n      pool,\n      tickLower,\n      tickUpper,\n      liquidity: maxLiquidityForAmounts(\n        pool.sqrtRatioX96,\n        sqrtRatioAX96,\n        sqrtRatioBX96,\n        amount0,\n        amount1,\n        useFullPrecision\n      ),\n    })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount0 The desired amount of token0\n   * @param useFullPrecision If true, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The position\n   */\n  public static fromAmount0({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    useFullPrecision,\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0, amount1: MaxUint256, useFullPrecision })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount1 The desired amount of token1\n   * @returns The position\n   */\n  public static fromAmount1({\n    pool,\n    tickLower,\n    tickUpper,\n    amount1,\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount1: BigintIsh\n  }) {\n    // this function always uses full precision,\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0: MaxUint256, amount1, useFullPrecision: true })\n  }\n}\n", "import invariant from 'tiny-invariant'\n\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\nimport { Pool } from './pool'\n\n/**\n * Represents a list of pools through which a swap can occur\n * @template TInput The input token\n * @template TOutput The output token\n */\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pools: Pool[]\n  public readonly tokenPath: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  /**\n   * Creates an instance of route.\n   * @param pools An array of `Pool` objects, ordered by the route the swap will take\n   * @param input The input token\n   * @param output The output token\n   */\n  public constructor(pools: Pool[], input: TInput, output: TOutput) {\n    invariant(pools.length > 0, 'POOLS')\n\n    const chainId = pools[0].chainId\n    const allOnSameChain = pools.every((pool) => pool.chainId === chainId)\n    invariant(allOnSameChain, 'CHAIN_IDS')\n\n    const wrappedInput = input.wrapped\n    invariant(pools[0].involvesToken(wrappedInput), 'INPUT')\n\n    invariant(pools[pools.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    /**\n     * Normalizes token0-token1 order and selects the next token/fee step to add to the path\n     * */\n    const tokenPath: Token[] = [wrappedInput]\n    for (const [i, pool] of pools.entries()) {\n      const currentInputToken = tokenPath[i]\n      invariant(currentInputToken.equals(pool.token0) || currentInputToken.equals(pool.token1), 'PATH')\n      const nextToken = currentInputToken.equals(pool.token0) ? pool.token1 : pool.token0\n      tokenPath.push(nextToken)\n    }\n\n    this.pools = pools\n    this.tokenPath = tokenPath\n    this.input = input\n    this.output = output ?? tokenPath[tokenPath.length - 1]\n  }\n\n  public get chainId(): number {\n    return this.pools[0].chainId\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.token0)\n          ? {\n              nextInput: pool.token1,\n              price: price.multiply(pool.token0Price),\n            }\n          : {\n              nextInput: pool.token0,\n              price: price.multiply(pool.token1Price),\n            }\n      },\n      this.pools[0].token0.equals(this.input.wrapped)\n        ? {\n            nextInput: this.pools[0].token1,\n            price: this.pools[0].token0Price,\n          }\n        : {\n            nextInput: this.pools[0].token0,\n            price: this.pools[0].token1Price,\n          }\n    ).price\n\n    return (this._midPrice = new Price(this.input, this.output, price.denominator, price.numerator))\n  }\n}\n", "import { Currency, Fraction, Percent, Price, sortedInsert, CurrencyAmount, TradeType, Token } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { Pool } from './pool'\nimport { Route } from './route'\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      const bHops = b.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      return aHops - bHops\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): Route<TInput, TOutput> {\n    invariant(this.swaps.length === 1, 'MULTIPLE_ROUTES')\n    return this.swaps[0].route\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact in trade\n   * @param amountIn The amount being passed in\n   * @returns The exact in trade\n   */\n  public static async exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>> {\n    return Trade.fromRoute(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact out trade\n   * @param amountOut The amount returned by the trade\n   * @returns The exact out trade\n   */\n  public static async exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>> {\n    return Trade.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n    let inputAmount: CurrencyAmount<TInput>\n    let outputAmount: CurrencyAmount<TOutput>\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      amounts[0] = amount.wrapped\n      for (let i = 0; i < route.tokenPath.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount] = await pool.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amounts[amounts.length - 1].numerator,\n        amounts[amounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount.wrapped\n      for (let i = route.tokenPath.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        const [inputAmount] = await pool.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n\n    return new Trade({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType,\n    })\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n      route: Route<TInput, TOutput>\n    }[],\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const populatedRoutes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { route, amount } of routes) {\n      const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n      let inputAmount: CurrencyAmount<TInput>\n      let outputAmount: CurrencyAmount<TOutput>\n\n      if (tradeType === TradeType.EXACT_INPUT) {\n        invariant(amount.currency.equals(route.input), 'INPUT')\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n        amounts[0] = CurrencyAmount.fromFractionalAmount(route.input.wrapped, amount.numerator, amount.denominator)\n\n        for (let i = 0; i < route.tokenPath.length - 1; i++) {\n          const pool = route.pools[i]\n          const [outputAmount] = await pool.getOutputAmount(amounts[i])\n          amounts[i + 1] = outputAmount\n        }\n\n        outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          amounts[amounts.length - 1].numerator,\n          amounts[amounts.length - 1].denominator\n        )\n      } else {\n        invariant(amount.currency.equals(route.output), 'OUTPUT')\n        outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n        amounts[amounts.length - 1] = CurrencyAmount.fromFractionalAmount(\n          route.output.wrapped,\n          amount.numerator,\n          amount.denominator\n        )\n\n        for (let i = route.tokenPath.length - 1; i > 0; i--) {\n          const pool = route.pools[i - 1]\n          const [inputAmount] = await pool.getInputAmount(amounts[i])\n          amounts[i - 1] = inputAmount\n        }\n\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      }\n\n      populatedRoutes.push({ route, inputAmount, outputAmount })\n    }\n\n    return new Trade({\n      routes: populatedRoutes,\n      tradeType,\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route,\n        },\n      ],\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType,\n  }: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency\n    const outputCurrency = routes[0].outputAmount.currency\n    invariant(\n      routes.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      routes.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    const numPools = routes.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, pool.fee))\n      }\n    }\n\n    invariant(numPools === poolAddressSet.size, 'POOLS_DUPLICATED')\n\n    this.swaps = routes\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountIn.currency) && !pool.token1.equals(amountIn.currency)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.isToken && amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([...currentPools, pool], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the desired currency amount out\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact out trade\n   */\n  public static async bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountOut.currency) && !pool.token1.equals(amountOut.currency)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = await pool.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pool\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([pool, ...currentPools], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactOut(\n          poolsExcludingThisPool,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pool, ...currentPools],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n", "import { Interface } from '@ethersproject/abi'\nimport IMulticall from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IMulticall.sol/IMulticall.json'\n\nexport abstract class Multicall {\n  public static INTERFACE: Interface = new Interface(IMulticall.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[]): string {\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    return calldatas.length === 1 ? calldatas[0] : Multicall.INTERFACE.encodeFunctionData('multicall', [calldatas])\n  }\n\n  public static decodeMulticall(multicall: string): string[] {\n    return Multicall.INTERFACE.decodeFunctionData('multicall', multicall).data\n  }\n}\n", "import { BigintIsh, Token } from '@uniswap/sdk-core'\nimport { Interface } from '@ethersproject/abi'\nimport ISelfPermit from '@uniswap/v3-periphery/artifacts/contracts/interfaces/ISelfPermit.sol/ISelfPermit.json'\nimport { toHex } from './utils'\n\nexport interface StandardPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  amount: BigintIsh\n  deadline: BigintIsh\n}\n\nexport interface AllowedPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  nonce: BigintIsh\n  expiry: BigintIsh\n}\n\nexport type PermitOptions = StandardPermitArguments | AllowedPermitArguments\n\nfunction isAllowedPermit(permitOptions: PermitOptions): permitOptions is AllowedPermitArguments {\n  return 'nonce' in permitOptions\n}\n\nexport abstract class SelfPermit {\n  public static INTERFACE: Interface = new Interface(ISelfPermit.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodePermit(token: Token, options: PermitOptions) {\n    return isAllowedPermit(options)\n      ? SelfPermit.INTERFACE.encodeFunctionData('selfPermitAllowed', [\n          token.address,\n          toHex(options.nonce),\n          toHex(options.expiry),\n          options.v,\n          options.r,\n          options.s,\n        ])\n      : SelfPermit.INTERFACE.encodeFunctionData('selfPermit', [\n          token.address,\n          toHex(options.amount),\n          toHex(options.deadline),\n          options.v,\n          options.r,\n          options.s,\n        ])\n  }\n}\n", "import JSBI from 'jsbi'\nimport { Interface } from '@ethersproject/abi'\nimport IPeripheryPaymentsWithFee from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IPeripheryPaymentsWithFee.sol/IPeripheryPaymentsWithFee.json'\nimport { Percent, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { toHex } from './utils/calldata'\n\nexport interface FeeOptions {\n  /**\n   * The percent of the output that will be taken as a fee.\n   */\n  fee: Percent\n\n  /**\n   * The recipient of the fee.\n   */\n  recipient: string\n}\n\nexport abstract class Payments {\n  public static INTERFACE: Interface = new Interface(IPeripheryPaymentsWithFee.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeFeeBips(fee: Percent): string {\n    return toHex(fee.multiply(10_000).quotient)\n  }\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient: string, feeOptions?: FeeOptions): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('unwrapWETH9WithFee', [\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('unwrapWETH9', [toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient: string,\n    feeOptions?: FeeOptions\n  ): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('sweepTokenWithFee', [\n        token.address,\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('sweepToken', [token.address, toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeRefundETH(): string {\n    return Payments.INTERFACE.encodeFunctionData('refundETH')\n  }\n}\n", "import {\n  BigintIsh,\n  Percent,\n  Token,\n  CurrencyAmount,\n  validateAndParseAddress,\n  Currency,\n  NativeCurrency,\n} from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Position } from './entities/position'\nimport { ONE, ZERO } from './internalConstants'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { Interface } from '@ethersproject/abi'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport INonfungiblePositionManager from '@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { ADDRESS_ZERO } from './constants'\nimport { Pool } from './entities'\nimport { Multicall } from './multicall'\nimport { Payments } from './payments'\n\nconst MaxUint128 = toHex(JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)), JSBI.BigInt(1)))\n\nexport interface MintSpecificOptions {\n  /**\n   * The account that should receive the minted NFT.\n   */\n  recipient: string\n\n  /**\n   * Creates pool if not initialized before mint.\n   */\n  createPool?: boolean\n}\n\nexport interface IncreaseSpecificOptions {\n  /**\n   * Indicates the ID of the position to increase liquidity for.\n   */\n  tokenId: BigintIsh\n}\n\n/**\n * Options for producing the calldata to add liquidity.\n */\nexport interface CommonAddLiquidityOptions {\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\n   */\n  useNative?: NativeCurrency\n\n  /**\n   * The optional permit parameters for spending token0\n   */\n  token0Permit?: PermitOptions\n\n  /**\n   * The optional permit parameters for spending token1\n   */\n  token1Permit?: PermitOptions\n}\n\nexport type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions\nexport type IncreaseOptions = CommonAddLiquidityOptions & IncreaseSpecificOptions\n\nexport type AddLiquidityOptions = MintOptions | IncreaseOptions\n\nexport interface SafeTransferOptions {\n  /**\n   * The account sending the NFT.\n   */\n  sender: string\n\n  /**\n   * The account that should receive the NFT.\n   */\n  recipient: string\n\n  /**\n   * The id of the token being sent.\n   */\n  tokenId: BigintIsh\n  /**\n   * The optional parameter that passes data to the `onERC721Received` call for the staker\n   */\n  data?: string\n}\n\n// type guard\nfunction isMint(options: AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport interface CollectOptions {\n  /**\n   * Indicates the ID of the position to collect for.\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed0: CurrencyAmount<Currency>\n\n  /**\n   * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed1: CurrencyAmount<Currency>\n\n  /**\n   * The account that should receive the tokens.\n   */\n  recipient: string\n}\n\nconst NFT_PERMIT_TYPES = {\n  Permit: [\n    { name: 'spender', type: 'address' },\n    { name: 'tokenId', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n}\n\nexport interface NFTPermitValues {\n  spender: string\n  tokenId: BigintIsh\n  deadline: BigintIsh\n  nonce: BigintIsh\n}\n\nexport interface NFTPermitData {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: NFTPermitValues\n}\n\nexport interface NFTPermitOptions {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  deadline: BigintIsh\n  spender: string\n}\n\n/**\n * Options for producing the calldata to exit a position.\n */\nexport interface RemoveLiquidityOptions {\n  /**\n   * The ID of the token to exit\n   */\n  tokenId: BigintIsh\n\n  /**\n   * The percentage of position liquidity to exit.\n   */\n  liquidityPercentage: Percent\n\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether the NFT should be burned if the entire position is being exited, by default false.\n   */\n  burnToken?: boolean\n\n  /**\n   * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\n   */\n  permit?: NFTPermitOptions\n\n  /**\n   * Parameters to be passed on to collect\n   */\n  collectOptions: Omit<CollectOptions, 'tokenId'>\n}\n\nexport abstract class NonfungiblePositionManager {\n  public static INTERFACE: Interface = new Interface(INonfungiblePositionManager.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeCreate(pool: Pool): string {\n    return NonfungiblePositionManager.INTERFACE.encodeFunctionData('createAndInitializePoolIfNecessary', [\n      pool.token0.address,\n      pool.token1.address,\n      pool.fee,\n      toHex(pool.sqrtRatioX96),\n    ])\n  }\n\n  public static createCallParameters(pool: Pool): MethodParameters {\n    return {\n      calldata: this.encodeCreate(pool),\n      value: toHex(0),\n    }\n  }\n\n  public static addCallParameters(position: Position, options: AddLiquidityOptions): MethodParameters {\n    invariant(JSBI.greaterThan(position.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    const calldatas: string[] = []\n\n    // get amounts\n    const { amount0: amount0Desired, amount1: amount1Desired } = position.mintAmounts\n\n    // adjust for slippage\n    const minimumAmounts = position.mintAmountsWithSlippage(options.slippageTolerance)\n    const amount0Min = toHex(minimumAmounts.amount0)\n    const amount1Min = toHex(minimumAmounts.amount1)\n\n    const deadline = toHex(options.deadline)\n\n    // create pool if needed\n    if (isMint(options) && options.createPool) {\n      calldatas.push(this.encodeCreate(position.pool))\n    }\n\n    // permits if necessary\n    if (options.token0Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token0, options.token0Permit))\n    }\n    if (options.token1Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token1, options.token1Permit))\n    }\n\n    // mint\n    if (isMint(options)) {\n      const recipient: string = validateAndParseAddress(options.recipient)\n\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\n          {\n            token0: position.pool.token0.address,\n            token1: position.pool.token1.address,\n            fee: position.pool.fee,\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            recipient,\n            deadline,\n          },\n        ])\n      )\n    } else {\n      // increase\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('increaseLiquidity', [\n          {\n            tokenId: toHex(options.tokenId),\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            deadline,\n          },\n        ])\n      )\n    }\n\n    let value: string = toHex(0)\n\n    if (options.useNative) {\n      const wrapped = options.useNative.wrapped\n      invariant(position.pool.token0.equals(wrapped) || position.pool.token1.equals(wrapped), 'NO_WETH')\n\n      const wrappedValue = position.pool.token0.equals(wrapped) ? amount0Desired : amount1Desired\n\n      // we only need to refund if we're actually sending ETH\n      if (JSBI.greaterThan(wrappedValue, ZERO)) {\n        calldatas.push(Payments.encodeRefundETH())\n      }\n\n      value = toHex(wrappedValue)\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value,\n    }\n  }\n\n  private static encodeCollect(options: CollectOptions): string[] {\n    const calldatas: string[] = []\n\n    const tokenId = toHex(options.tokenId)\n\n    const involvesETH =\n      options.expectedCurrencyOwed0.currency.isNative || options.expectedCurrencyOwed1.currency.isNative\n\n    const recipient = validateAndParseAddress(options.recipient)\n\n    // collect\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\n        {\n          tokenId,\n          recipient: involvesETH ? ADDRESS_ZERO : recipient,\n          amount0Max: MaxUint128,\n          amount1Max: MaxUint128,\n        },\n      ])\n    )\n\n    if (involvesETH) {\n      const ethAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed0.quotient\n        : options.expectedCurrencyOwed1.quotient\n      const token = options.expectedCurrencyOwed0.currency.isNative\n        ? (options.expectedCurrencyOwed1.currency as Token)\n        : (options.expectedCurrencyOwed0.currency as Token)\n      const tokenAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed1.quotient\n        : options.expectedCurrencyOwed0.quotient\n\n      calldatas.push(Payments.encodeUnwrapWETH9(ethAmount, recipient))\n      calldatas.push(Payments.encodeSweepToken(token, tokenAmount, recipient))\n    }\n\n    return calldatas\n  }\n\n  public static collectCallParameters(options: CollectOptions): MethodParameters {\n    const calldatas: string[] = NonfungiblePositionManager.encodeCollect(options)\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0),\n    }\n  }\n\n  /**\n   * Produces the calldata for completely or partially exiting a position\n   * @param position The position to exit\n   * @param options Additional information necessary for generating the calldata\n   * @returns The call parameters\n   */\n  public static removeCallParameters(position: Position, options: RemoveLiquidityOptions): MethodParameters {\n    const calldatas: string[] = []\n\n    const deadline = toHex(options.deadline)\n    const tokenId = toHex(options.tokenId)\n\n    // construct a partial position with a percentage of liquidity\n    const partialPosition = new Position({\n      pool: position.pool,\n      liquidity: options.liquidityPercentage.multiply(position.liquidity).quotient,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper,\n    })\n    invariant(JSBI.greaterThan(partialPosition.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    // slippage-adjusted underlying amounts\n    const { amount0: amount0Min, amount1: amount1Min } = partialPosition.burnAmountsWithSlippage(\n      options.slippageTolerance\n    )\n\n    if (options.permit) {\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n          validateAndParseAddress(options.permit.spender),\n          tokenId,\n          toHex(options.permit.deadline),\n          options.permit.v,\n          options.permit.r,\n          options.permit.s,\n        ])\n      )\n    }\n\n    // remove liquidity\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('decreaseLiquidity', [\n        {\n          tokenId,\n          liquidity: toHex(partialPosition.liquidity),\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          deadline,\n        },\n      ])\n    )\n\n    const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } = options.collectOptions\n    calldatas.push(\n      ...NonfungiblePositionManager.encodeCollect({\n        tokenId: toHex(options.tokenId),\n        // add the underlying value to the expected currency already owed\n        expectedCurrencyOwed0: expectedCurrencyOwed0.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed0.currency, amount0Min)\n        ),\n        expectedCurrencyOwed1: expectedCurrencyOwed1.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed1.currency, amount1Min)\n        ),\n        ...rest,\n      })\n    )\n\n    if (options.liquidityPercentage.equalTo(ONE)) {\n      if (options.burnToken) {\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [tokenId]))\n      }\n    } else {\n      invariant(options.burnToken !== true, 'CANNOT_BURN')\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0),\n    }\n  }\n\n  public static safeTransferFromParameters(options: SafeTransferOptions): MethodParameters {\n    const recipient = validateAndParseAddress(options.recipient)\n    const sender = validateAndParseAddress(options.sender)\n\n    let calldata: string\n    if (options.data) {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n        'safeTransferFrom(address,address,uint256,bytes)',\n        [sender, recipient, toHex(options.tokenId), options.data]\n      )\n    } else {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('safeTransferFrom(address,address,uint256)', [\n        sender,\n        recipient,\n        toHex(options.tokenId),\n      ])\n    }\n    return {\n      calldata: calldata,\n      value: toHex(0),\n    }\n  }\n\n  // Prepare the params for an EIP712 signTypedData request\n  public static getPermitData(permit: NFTPermitValues, positionManagerAddress: string, chainId: number): NFTPermitData {\n    return {\n      domain: {\n        name: 'Uniswap V3 Positions NFT-V1',\n        chainId,\n        version: '1',\n        verifyingContract: positionManagerAddress,\n      },\n      types: NFT_PERMIT_TYPES,\n      values: permit,\n    }\n  }\n}\n", "import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { encodeRouteToPath, MethodParameters, toHex } from './utils'\nimport IQuoter from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json'\nimport IQuoterV2 from '@uniswap/swap-router-contracts/artifacts/contracts/lens/QuoterV2.sol/QuoterV2.json'\nimport { Route } from './entities'\nimport invariant from 'tiny-invariant'\nimport { FeeAmount } from './constants'\n\n/**\n * Optional arguments to send to the quoter.\n */\nexport interface QuoteOptions {\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * The optional quoter interface to use\n   */\n  useQuoterV2?: boolean\n}\n\ninterface BaseQuoteParams {\n  fee: FeeAmount\n  sqrtPriceLimitX96: string\n  tokenIn: string\n  tokenOut: string\n}\n\n/**\n * Represents the Uniswap V3 QuoterV1 contract with a method for returning the formatted\n * calldata needed to call the quoter contract.\n */\nexport abstract class SwapQuoter {\n  public static V1INTERFACE: Interface = new Interface(IQuoter.abi)\n  public static V2INTERFACE: Interface = new Interface(IQuoterV2.abi)\n\n  /**\n   * Produces the on-chain method name of the appropriate function within QuoterV2,\n   * and the relevant hex encoded parameters.\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The swap route, a list of pools through which a swap can occur\n   * @param amount The amount of the quote, either an amount in, or an amount out\n   * @param tradeType The trade type, either exact input or exact output\n   * @param options The optional params including price limit and Quoter contract switch\n   * @returns The formatted calldata\n   */\n  public static quoteCallParameters<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amount: CurrencyAmount<TInput | TOutput>,\n    tradeType: TradeType,\n    options: QuoteOptions = {}\n  ): MethodParameters {\n    const singleHop = route.pools.length === 1\n    const quoteAmount: string = toHex(amount.quotient)\n    let calldata: string\n    const swapInterface: Interface = options.useQuoterV2 ? this.V2INTERFACE : this.V1INTERFACE\n\n    if (singleHop) {\n      const baseQuoteParams: BaseQuoteParams = {\n        tokenIn: route.tokenPath[0].address,\n        tokenOut: route.tokenPath[1].address,\n        fee: route.pools[0].fee,\n        sqrtPriceLimitX96: toHex(options?.sqrtPriceLimitX96 ?? 0),\n      }\n\n      const v2QuoteParams = {\n        ...baseQuoteParams,\n        ...(tradeType === TradeType.EXACT_INPUT ? { amountIn: quoteAmount } : { amount: quoteAmount }),\n      }\n\n      const v1QuoteParams = [\n        baseQuoteParams.tokenIn,\n        baseQuoteParams.tokenOut,\n        baseQuoteParams.fee,\n        quoteAmount,\n        baseQuoteParams.sqrtPriceLimitX96,\n      ]\n\n      const tradeTypeFunctionName =\n        tradeType === TradeType.EXACT_INPUT ? 'quoteExactInputSingle' : 'quoteExactOutputSingle'\n      calldata = swapInterface.encodeFunctionData(\n        tradeTypeFunctionName,\n        options.useQuoterV2 ? [v2QuoteParams] : v1QuoteParams\n      )\n    } else {\n      invariant(options?.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n      const path: string = encodeRouteToPath(route, tradeType === TradeType.EXACT_OUTPUT)\n      const tradeTypeFunctionName = tradeType === TradeType.EXACT_INPUT ? 'quoteExactInput' : 'quoteExactOutput'\n      calldata = swapInterface.encodeFunctionData(tradeTypeFunctionName, [path, quoteAmount])\n    }\n    return {\n      calldata,\n      value: toHex(0),\n    }\n  }\n}\n", "import { BigintIsh, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { defaultAbiCoder, Interface } from '@ethersproject/abi'\nimport IUniswapV3Staker from '@uniswap/v3-staker/artifacts/contracts/UniswapV3Staker.sol/UniswapV3Staker.json'\nimport { Pool } from './entities'\nimport { Multicall } from './multicall'\n\nexport type FullWithdrawOptions = ClaimOptions & WithdrawOptions\n/**\n * Represents a unique staking program.\n */\nexport interface IncentiveKey {\n  /**\n   * The token rewarded for participating in the staking program.\n   */\n  rewardToken: Token\n  /**\n   * The pool that the staked positions must provide in.\n   */\n  pool: Pool\n  /**\n   * The time when the incentive program begins.\n   */\n  startTime: BigintIsh\n  /**\n   * The time that the incentive program ends.\n   */\n  endTime: BigintIsh\n  /**\n   * The address which receives any remaining reward tokens at `endTime`.\n   */\n  refundee: string\n}\n\n/**\n * Options to specify when claiming rewards.\n */\nexport interface ClaimOptions {\n  /**\n   * The id of the NFT\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Address to send rewards to.\n   */\n  recipient: string\n\n  /**\n   * The amount of `rewardToken` to claim. 0 claims all.\n   */\n  amount?: BigintIsh\n}\n/**\n * Options to specify when withdrawing a position.\n */\nexport interface WithdrawOptions {\n  /**\n   * Set when withdrawing. The position will be sent to `owner` on withdraw.\n   */\n  owner: string\n\n  /**\n   * Set when withdrawing. `data` is passed to `safeTransferFrom` when transferring the position from contract back to owner.\n   */\n  data?: string\n}\n\nexport abstract class Staker {\n  public static INTERFACE: Interface = new Interface(IUniswapV3Staker.abi)\n\n  protected constructor() {}\n  private static INCENTIVE_KEY_ABI =\n    'tuple(address rewardToken, address pool, uint256 startTime, uint256 endTime, address refundee)'\n\n  /**\n   *  To claim rewards, must unstake and then claim.\n   * @param incentiveKey The unique identifier of a staking program.\n   * @param options Options for producing the calldata to claim. Can't claim unless you unstake.\n   * @returns The calldatas for 'unstakeToken' and 'claimReward'.\n   */\n  private static encodeClaim(incentiveKey: IncentiveKey, options: ClaimOptions): string[] {\n    const calldatas: string[] = []\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('unstakeToken', [\n        this._encodeIncentiveKey(incentiveKey),\n        toHex(options.tokenId),\n      ])\n    )\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const amount = options.amount ?? 0\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('claimReward', [incentiveKey.rewardToken.address, recipient, toHex(amount)])\n    )\n    return calldatas\n  }\n\n  /**\n   *\n   * Note:  A `tokenId` can be staked in many programs but to claim rewards and continue the program you must unstake, claim, and then restake.\n   * @param incentiveKeys An IncentiveKey or array of IncentiveKeys that `tokenId` is staked in.\n   * Input an array of IncentiveKeys to claim rewards for each program.\n   * @param options ClaimOptions to specify tokenId, recipient, and amount wanting to collect.\n   * Note that you can only specify one amount and one recipient across the various programs if you are collecting from multiple programs at once.\n   * @returns\n   */\n  public static collectRewards(incentiveKeys: IncentiveKey | IncentiveKey[], options: ClaimOptions): MethodParameters {\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n    let calldatas: string[] = []\n\n    for (let i = 0; i < incentiveKeys.length; i++) {\n      // the unique program tokenId is staked in\n      const incentiveKey = incentiveKeys[i]\n      // unstakes and claims for the unique program\n      calldatas = calldatas.concat(this.encodeClaim(incentiveKey, options))\n      // re-stakes the position for the unique program\n      calldatas.push(\n        Staker.INTERFACE.encodeFunctionData('stakeToken', [\n          this._encodeIncentiveKey(incentiveKey),\n          toHex(options.tokenId),\n        ])\n      )\n    }\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0),\n    }\n  }\n\n  /**\n   *\n   * @param incentiveKeys A list of incentiveKeys to unstake from. Should include all incentiveKeys (unique staking programs) that `options.tokenId` is staked in.\n   * @param withdrawOptions Options for producing claim calldata and withdraw calldata. Can't withdraw without unstaking all programs for `tokenId`.\n   * @returns Calldata for unstaking, claiming, and withdrawing.\n   */\n  public static withdrawToken(\n    incentiveKeys: IncentiveKey | IncentiveKey[],\n    withdrawOptions: FullWithdrawOptions\n  ): MethodParameters {\n    let calldatas: string[] = []\n\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n\n    const claimOptions = {\n      tokenId: withdrawOptions.tokenId,\n      recipient: withdrawOptions.recipient,\n      amount: withdrawOptions.amount,\n    }\n\n    for (let i = 0; i < incentiveKeys.length; i++) {\n      const incentiveKey = incentiveKeys[i]\n      calldatas = calldatas.concat(this.encodeClaim(incentiveKey, claimOptions))\n    }\n    const owner = validateAndParseAddress(withdrawOptions.owner)\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('withdrawToken', [\n        toHex(withdrawOptions.tokenId),\n        owner,\n        withdrawOptions.data ? withdrawOptions.data : toHex(0),\n      ])\n    )\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0),\n    }\n  }\n\n  /**\n   *\n   * @param incentiveKeys A single IncentiveKey or array of IncentiveKeys to be encoded and used in the data parameter in `safeTransferFrom`\n   * @returns An IncentiveKey as a string\n   */\n  public static encodeDeposit(incentiveKeys: IncentiveKey | IncentiveKey[]): string {\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n    let data: string\n\n    if (incentiveKeys.length > 1) {\n      const keys = []\n      for (let i = 0; i < incentiveKeys.length; i++) {\n        const incentiveKey = incentiveKeys[i]\n        keys.push(this._encodeIncentiveKey(incentiveKey))\n      }\n      data = defaultAbiCoder.encode([`${Staker.INCENTIVE_KEY_ABI}[]`], [keys])\n    } else {\n      data = defaultAbiCoder.encode([Staker.INCENTIVE_KEY_ABI], [this._encodeIncentiveKey(incentiveKeys[0])])\n    }\n    return data\n  }\n  /**\n   *\n   * @param incentiveKey An `IncentiveKey` which represents a unique staking program.\n   * @returns An encoded IncentiveKey to be read by ethers\n   */\n  private static _encodeIncentiveKey(incentiveKey: IncentiveKey): {} {\n    const { token0, token1, fee } = incentiveKey.pool\n    const refundee = validateAndParseAddress(incentiveKey.refundee)\n    return {\n      rewardToken: incentiveKey.rewardToken.address,\n      pool: Pool.getAddress(token0, token1, fee),\n      startTime: toHex(incentiveKey.startTime),\n      endTime: toHex(incentiveKey.endTime),\n      refundee,\n    }\n  }\n}\n", "import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { Trade } from './entities/trade'\nimport { ADDRESS_ZERO } from './constants'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { encodeRouteToPath } from './utils'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport ISwapRouter from '@uniswap/v3-periphery/artifacts/contracts/SwapRouter.sol/SwapRouter.json'\nimport { Multicall } from './multicall'\nimport { FeeOptions, Payments } from './payments'\n\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * The account that should receive the output.\n   */\n  recipient: string\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions\n\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptions\n}\n\n/**\n * Represents the Uniswap V3 SwapRouter, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(ISwapRouter.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trades: Trade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>[],\n    options: SwapOptions\n  ): MethodParameters {\n    if (!Array.isArray(trades)) {\n      trades = [trades]\n    }\n\n    const sampleTrade = trades[0]\n    const tokenIn = sampleTrade.inputAmount.currency.wrapped\n    const tokenOut = sampleTrade.outputAmount.currency.wrapped\n\n    // All trades should have the same starting and ending token.\n    invariant(\n      trades.every((trade) => trade.inputAmount.currency.wrapped.equals(tokenIn)),\n      'TOKEN_IN_DIFF'\n    )\n    invariant(\n      trades.every((trade) => trade.outputAmount.currency.wrapped.equals(tokenOut)),\n      'TOKEN_OUT_DIFF'\n    )\n\n    const calldatas: string[] = []\n\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].inputAmount.currency, 0)\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].outputAmount.currency, 0)\n\n    const totalAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n      ZERO_OUT\n    )\n\n    // flag for whether a refund needs to happen\n    const mustRefund = sampleTrade.inputAmount.currency.isNative && sampleTrade.tradeType === TradeType.EXACT_OUTPUT\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative\n    // flags for whether funds should be send first to the router\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative\n    const routerMustCustody = outputIsNative || !!options.fee\n\n    const totalValue: CurrencyAmount<Currency> = inputIsNative\n      ? trades.reduce((sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)), ZERO_IN)\n      : ZERO_IN\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\n    }\n\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const deadline = toHex(options.deadline)\n\n    for (const trade of trades) {\n      for (const { route, inputAmount, outputAmount } of trade.swaps) {\n        const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n        const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n        // flag for whether the trade is single hop or not\n        const singleHop = route.pools.length === 1\n\n        if (singleHop) {\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0),\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n          } else {\n            const exactOutputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0),\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\n          }\n        } else {\n          invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n\n          const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut,\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n          } else {\n            const exactOutputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn,\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\n          }\n        }\n      }\n    }\n\n    // unwrap\n    if (routerMustCustody) {\n      if (!!options.fee) {\n        if (outputIsNative) {\n          calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient, options.fee))\n        } else {\n          calldatas.push(\n            Payments.encodeSweepToken(\n              sampleTrade.outputAmount.currency.wrapped,\n              totalAmountOut.quotient,\n              recipient,\n              options.fee\n            )\n          )\n        }\n      } else {\n        calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient))\n      }\n    }\n\n    // refund\n    if (mustRefund) {\n      calldatas.push(Payments.encodeRefundETH())\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(totalValue.quotient),\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["FACTORY_ADDRESS", "ADDRESS_ZERO", "POOL_INIT_CODE_HASH", "poolInitCodeHash", "chainId", "ChainId", "ZKSYNC", "FeeAmount", "TICK_SPACINGS", "_TICK_SPACINGS", "LOWEST", "LOW_200", "LOW_300", "LOW_400", "LOW", "MEDIUM", "HIGH", "NEGATIVE_ONE", "JSBI", "BigInt", "ZERO", "ONE", "Q96", "exponentiate", "Q192", "computePoolAddress", "_ref", "factoryAddress", "tokenA", "tokenB", "fee", "initCodeHashManualOverride", "_ref2", "sortsBefore", "token0", "token1", "salt", "keccak256", "defaultAbiCoder", "encode", "address", "initCodeHash", "computeZksyncCreate2Address", "getCreate2Address", "FullMath", "mulDivRoundingUp", "a", "b", "denominator", "product", "multiply", "result", "divide", "notEqual", "remainder", "add", "MaxUint160", "subtract", "multiplyIn256", "x", "y", "bitwiseAnd", "MaxUint256", "addIn256", "sum", "SqrtPriceMath", "getAmount0Delta", "sqrtRatioAX96", "sqrtRatioBX96", "liquidity", "roundUp", "greaterThan", "numerator1", "leftShift", "numerator2", "getAmount1Delta", "getNextSqrtPriceFromInput", "sqrtPX96", "amountIn", "zeroForOne", "process", "invariant", "getNextSqrtPriceFromAmount0RoundingUp", "getNextSqrtPriceFromAmount1RoundingDown", "getNextSqrtPriceFromOutput", "amountOut", "amount", "equal", "greaterThanOrEqual", "quotient", "lessThanOrEqual", "MAX_FEE", "SwapMath", "computeSwapStep", "sqrtRatioCurrentX96", "sqrtRatioTargetX96", "amountRemaining", "feePips", "returnValues", "exactIn", "amountRemainingLessFee", "sqrtRatioNextX96", "max", "feeAmount", "LiquidityMath", "addDelta", "lessThan", "TWO", "POWERS_OF_2", "map", "pow", "mostSignificantBit", "msb", "_iterator", "_createForOfIteratorHelperLoose", "_step", "done", "_step$value", "value", "power", "min", "signedRightShift", "mulShift", "val", "mulBy", "Q32", "TickMath", "getSqrtRatioAtTick", "tick", "MIN_TICK", "MAX_TICK", "Number", "isInteger", "absTick", "ratio", "getTickAtSqrtRatio", "sqrtRatioX96", "MIN_SQRT_RATIO", "MAX_SQRT_RATIO", "sqrtRatioX128", "r", "log_2", "i", "f", "bitwiseOr", "log_sqrt10001", "tickLow", "toNumber", "tickHigh", "v3Swap", "_x", "_x2", "_x3", "_x4", "_x5", "_x6", "_x7", "_x8", "_x9", "_v3Swap", "apply", "arguments", "_asyncToGenerator", "_regeneratorRuntime", "mark", "_callee", "tickCurrent", "tickSpacing", "tickDataProvider", "amountSpecified", "sqrtPriceLimitX96", "exactInput", "state", "step", "_yield$tickDataProvid", "_SwapMath$computeSwap", "liquidityNet", "wrap", "_callee$", "_context", "prev", "next", "amountSpecifiedRemaining", "amountCalculated", "sqrtPriceX96", "sqrtPriceStartX96", "nextInitializedTickWithinOneWord", "sent", "tickNext", "initialized", "sqrtPriceNextX96", "t0", "getTick", "t1", "call", "abrupt", "stop", "NoTickDataProvider", "_proto", "prototype", "_getTick", "_tick", "Error", "ERROR_MESSAGE", "_nextInitializedTickWithinOneWord", "_callee2", "_lte", "_tickSpacing", "_callee2$", "_context2", "isSorted", "list", "comparator", "length", "tickComparator", "index", "TickList", "validateList", "ticks", "every", "reduce", "accumulator", "isBelowSmallest", "isAtOrAboveLargest", "binarySearch", "l", "Math", "floor", "nextInitializedTick", "lte", "compressed", "wordPos", "minimum", "maximum", "toHex", "bigintIsh", "bigInt", "hex", "toString", "encodeRouteToPath", "route", "exactOutput", "firstInputToken", "input", "wrapped", "_route$pools$reduce", "pools", "pool", "inputToken", "path", "types", "outputToken", "equals", "concat", "pack", "reverse", "encodeSqrtRatioX96", "amount1", "amount0", "numerator", "ratioX192", "sqrt", "maxLiquidityForAmount0Imprecise", "intermediate", "maxLiquidityForAmount0Precise", "maxLiquidityForAmount1", "_ref3", "maxLiquidityForAmounts", "useFullPrecision", "_ref4", "maxLiquidityForAmount0", "liquidity0", "liquidity1", "nearestUsableTick", "rounded", "round", "Q128", "PositionLibrary", "getTokensOwed", "feeGrowthInside0LastX128", "feeGrowthInside1LastX128", "feeGrowthInside0X128", "feeGrowthInside1X128", "tokensOwed0", "subIn256", "tokensOwed1", "tickToPrice", "baseToken", "quoteToken", "Price", "priceToClosestTick", "price", "sorted", "baseCurrency", "quoteCurrency", "nextTickPrice", "Q256", "difference", "TickLibrary", "getFeeGrowthInside", "feeGrowthOutsideLower", "feeGrowthOutsideUpper", "tickLower", "tickUpper", "feeGrowthGlobal0X128", "feeGrowthGlobal1X128", "feeGrowthBelow0X128", "feeGrowthBelow1X128", "feeGrowthOutside0X128", "feeGrowthOutside1X128", "feeGrowthAbove0X128", "feeGrowthAbove1X128", "Tick", "liquidityGross", "TickListDataProvider", "ticksMapped", "t", "NO_TICK_DATA_PROVIDER_DEFAULT", "Pool", "tickCurrentSqrtRatioX96", "nextTickSqrtRatioX96", "Array", "isArray", "getAddress", "factoryAddressOverride", "involvesToken", "token", "priceOf", "token0Price", "token1Price", "getOutputAmount", "_getOutputAmount", "inputAmount", "_yield$this$swap", "outputAmount", "currency", "swap", "CurrencyAmount", "fromRawAmount", "getInputAmount", "_getInputAmount", "_yield$this$swap2", "isToken", "_swap", "_callee3", "_callee3$", "_context3", "_createClass", "key", "get", "_this$_token0Price", "_token0Price", "_this$_token1Price", "_token1Price", "Position", "ratiosAfterSlippage", "slippageTolerance", "priceLower", "asFraction", "Percent", "priceUpper", "sqrtRatioX96Lower", "sqrtRatioX96Upper", "mintAmountsWithSlippage", "_this$ratiosAfterSlip", "poolLower", "poolUpper", "positionThatWillBeCreated", "fromAmounts", "_extends", "mintAmounts", "burnAmountsWithSlippage", "_this$ratiosAfterSlip2", "fromAmount0", "fromAmount1", "_token0Amount", "_token1Amount", "_mintAmounts", "Route", "output", "allOnSameChain", "wrappedInput", "tokenPath", "entries", "currentInputToken", "nextToken", "push", "_midPrice", "slice", "nextInput", "tradeComparator", "equalTo", "aHops", "swaps", "total", "cur", "bHops", "Trade", "routes", "tradeType", "inputCurrency", "outputCurrency", "numPools", "poolAddressSet", "Set", "_iterator2", "_step2", "size", "_exactIn", "fromRoute", "TradeType", "EXACT_INPUT", "exactOut", "_exactOut", "EXACT_OUTPUT", "_fromRoute", "amounts", "_yield$pool$getOutput", "_outputAmount", "_i", "_pool", "_yield$_pool$getInput", "_inputAmount", "fromFractionalAmount", "fromRoutes", "_fromRoutes", "_callee4", "populatedRoutes", "_iterator3", "_step3", "_step3$value", "_yield$pool$getOutput2", "_outputAmount2", "_i2", "_pool2", "_yield$_pool2$getInpu", "_inputAmount2", "_callee4$", "_context4", "createUncheckedTrade", "constructorArguments", "createUncheckedTradeWithMultipleRoutes", "minimumAmountOut", "slippageAdjustedAmountOut", "Fraction", "invert", "maximumAmountIn", "slippageAdjustedAmountIn", "worstExecutionPrice", "bestTradeExactIn", "_bestTradeExactIn", "_callee5", "currencyAmountIn", "currencyOut", "_temp", "currentPools", "nextAmountIn", "bestTrades", "_ref5$maxNumResults", "_ref5", "maxNumResults", "_ref5$maxHops", "maxHops", "tokenOut", "_context5", "_yield$pool$getOutput3", "isInsufficientInputAmountError", "sortedInsert", "t2", "t3", "t4", "t5", "poolsExcludingThisPool", "_x10", "_x11", "_x12", "_x13", "_x14", "_x15", "_x16", "bestTradeExactOut", "_bestTradeExactOut", "_callee6", "currencyIn", "currencyAmountOut", "_temp2", "nextAmountOut", "_ref6$maxNumResults", "_ref6", "_ref6$maxHops", "tokenIn", "_context6", "_yield$pool$getInputA", "isInsufficientReservesError", "_x17", "_x18", "_x19", "_x20", "_x21", "_x22", "_x23", "totalInputFromRoutes", "_ref7", "totalOutputFromRoutes", "_ref8", "_this$_executionPrice", "_executionPrice", "_priceImpact", "spotOutputAmount", "_iterator4", "_step4", "_step4$value", "midPrice", "quote", "priceImpact", "Multicall", "encodeMulticall", "calldatas", "INTERFACE", "encodeFunctionData", "decodeMulticall", "multicall", "decodeFunctionData", "data", "Interface", "IMulticall", "abi", "isAllowedPermit", "permitOptions", "SelfPermit", "encodePermit", "options", "nonce", "expiry", "v", "s", "deadline", "ISelfPermit", "Payments", "encodeFeeBips", "encodeUnwrapWETH9", "amountMinimum", "recipient", "feeOptions", "validateAndParseAddress", "feeBips", "feeRecipient", "encodeSweepToken", "encodeRefundETH", "IPeripheryPaymentsWithFee", "MaxUint128", "isMint", "Object", "keys", "some", "k", "NFT_PERMIT_TYPES", "Permit", "name", "type", "NonfungiblePositionManager", "encodeCreate", "createCallParameters", "calldata", "addCallParameters", "position", "_position$mintAmounts", "amount0Desired", "amount1Desired", "minimumAmounts", "amount0Min", "amount1Min", "createPool", "token0Permit", "token1Permit", "tokenId", "useNative", "wrappedValue", "encodeCollect", "involvesETH", "expectedCurrencyOwed0", "isNative", "expectedCurrencyOwed1", "amount0Max", "amount1Max", "ethAmount", "tokenAmount", "collectCallParameters", "removeCallParameters", "partialPosition", "liquidityPercentage", "_partialPosition$burn", "permit", "spender", "_options$collectOptio", "collectOptions", "rest", "_objectWithoutPropertiesLoose", "_excluded", "burnToken", "safeTransferFromParameters", "sender", "getPermitData", "positionManagerAddress", "domain", "version", "verifyingContract", "values", "INonfungiblePositionManager", "SwapQuoter", "quoteCallParameters", "singleHop", "quoteAmount", "swapInterface", "useQuoterV2", "V2INTERFACE", "V1INTERFACE", "_options$sqrtPriceLim", "_options", "baseQuoteParams", "v2QuoteParams", "v1QuoteParams", "tradeTypeFunctionName", "_options2", "undefined", "IQuoter", "IQuoterV2", "Staker", "encodeClaim", "incentiveKey", "_encodeIncentiveKey", "_options$amount", "rewardToken", "collectRewards", "incentiveKeys", "withdrawToken", "withdrawOptions", "claimOptions", "owner", "encodeDeposit", "INCENTIVE_KEY_ABI", "_incentiveKey$pool", "refundee", "startTime", "endTime", "IUniswapV3Staker", "SwapRouter", "swapCallParameters", "trades", "sampleTrade", "trade", "ZERO_IN", "ZERO_OUT", "totalAmountOut", "mustRefund", "inputIsNative", "outputIsNative", "routerMustCustody", "totalValue", "inputTokenPermit", "_step2$value", "exactInputSingleParams", "amountOutMinimum", "_options$sqrtPriceLim2", "exactOutputSingleParams", "amountInMaximum", "exactInputParams", "exactOutputParams", "ISwapRouter"]
}
