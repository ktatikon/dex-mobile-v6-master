# EC2 Deployment Configuration for DEX Mobile v6
# Services: monitoring-service, Prometheus, Grafana

AWSTemplateFormatVersion: '2010-09-09'
Description: 'DEX Mobile v6 - EC2 Deployment for Monitoring Services'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
  
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for deployment
  
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs for EC2 instances
  
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t3.small, t3.medium, t3.large, t3.xlarge]
    Description: EC2 instance type

Resources:
  # Security Group for Monitoring Services
  MonitoringSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for monitoring services
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Monitoring service port
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Prometheus port
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Grafana port
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          Description: SSH access from bastion
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dex-monitoring-sg'
        - Key: Environment
          Value: !Ref Environment

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP traffic
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dex-alb-sg'

  # Bastion Security Group
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion host
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dex-bastion-sg'

  # IAM Role for EC2 instances
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: DEXMonitoringPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dex-mobile-*'
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dex-ec2-role'

  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # Launch Template
  MonitoringLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${Environment}-dex-monitoring-template'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref MonitoringSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker git curl wget
            
            # Install Docker Compose
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            
            # Start Docker service
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Install CloudWatch agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            rpm -U ./amazon-cloudwatch-agent.rpm
            
            # Create application directory
            mkdir -p /opt/dex-mobile
            cd /opt/dex-mobile
            
            # Clone repository (replace with your actual repo)
            git clone https://github.com/ktatikon/dex-mobile-v6-master.git .
            
            # Create environment file
            cat > .env << EOF
            ENVIRONMENT=${Environment}
            POSTGRES_PASSWORD=${PostgresPassword}
            REDIS_PASSWORD=${RedisPassword}
            LOG_LEVEL=info
            MONITORING_SERVICE_PORT=3001
            PROMETHEUS_PORT=9090
            GRAFANA_PORT=3000
            GRAFANA_ADMIN_USER=admin
            GRAFANA_ADMIN_PASSWORD=${GrafanaPassword}
            EOF
            
            # Start monitoring services
            docker-compose -f docker-compose.monitoring.yml up -d
            
            # Configure CloudWatch agent
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
            {
              "metrics": {
                "namespace": "DEX/Monitoring",
                "metrics_collected": {
                  "cpu": {
                    "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                    "metrics_collection_interval": 60
                  },
                  "disk": {
                    "measurement": ["used_percent"],
                    "metrics_collection_interval": 60,
                    "resources": ["*"]
                  },
                  "mem": {
                    "measurement": ["mem_used_percent"],
                    "metrics_collection_interval": 60
                  }
                }
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/opt/dex-mobile/logs/*.log",
                        "log_group_name": "/aws/ec2/dex-mobile/monitoring",
                        "log_stream_name": "{instance_id}/monitoring.log"
                      }
                    ]
                  }
                }
              }
            }
            EOF
            
            # Start CloudWatch agent
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${Environment}-dex-monitoring'
              - Key: Environment
                Value: !Ref Environment
              - Key: Service
                Value: monitoring

  # Auto Scaling Group
  MonitoringAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${Environment}-dex-monitoring-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref MonitoringLaunchTemplate
        Version: !GetAtt MonitoringLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      VPCZoneIdentifier: !Ref PrivateSubnetIds
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dex-monitoring-asg'
          PropagateAtLaunch: false
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  # Application Load Balancer
  MonitoringALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-dex-monitoring-alb'
      Type: application
      Scheme: internal
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Ref PrivateSubnetIds
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dex-monitoring-alb'
        - Key: Environment
          Value: !Ref Environment

  # Target Groups
  MonitoringTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-dex-monitoring-tg'
      Port: 3001
      Protocol: HTTP
      VpcId: !Ref VPCId
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dex-monitoring-tg'

  PrometheusTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-dex-prometheus-tg'
      Port: 9090
      Protocol: HTTP
      VpcId: !Ref VPCId
      HealthCheckPath: /-/healthy
      HealthCheckIntervalSeconds: 30
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dex-prometheus-tg'

  GrafanaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-dex-grafana-tg'
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPCId
      HealthCheckPath: /api/health
      HealthCheckIntervalSeconds: 30
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dex-grafana-tg'

  # ALB Listeners
  MonitoringListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MonitoringTargetGroup
      LoadBalancerArn: !Ref MonitoringALB
      Port: 80
      Protocol: HTTP

  PrometheusListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PrometheusTargetGroup
      LoadBalancerArn: !Ref MonitoringALB
      Port: 9090
      Protocol: HTTP

  GrafanaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GrafanaTargetGroup
      LoadBalancerArn: !Ref MonitoringALB
      Port: 3000
      Protocol: HTTP

Outputs:
  MonitoringALBDNS:
    Description: DNS name of the monitoring ALB
    Value: !GetAtt MonitoringALB.DNSName
    Export:
      Name: !Sub '${Environment}-dex-monitoring-alb-dns'
  
  MonitoringSecurityGroupId:
    Description: Security Group ID for monitoring services
    Value: !Ref MonitoringSecurityGroup
    Export:
      Name: !Sub '${Environment}-dex-monitoring-sg-id'
