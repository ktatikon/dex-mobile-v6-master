# Kubernetes manifests for blockchain-service deployment on EKS
apiVersion: v1
kind: Namespace
metadata:
  name: dex-blockchain
  labels:
    name: dex-blockchain
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blockchain-service-config
  namespace: dex-blockchain
data:
  NODE_ENV: "production"
  PORT: "5001"
  LOG_LEVEL: "info"
  REDIS_DB: "1"
  BLOCKCHAIN_NETWORKS: "ethereum,polygon,bsc,arbitrum"
  MAX_CONCURRENT_REQUESTS: "100"
  REQUEST_TIMEOUT_MS: "30000"
  CIRCUIT_BREAKER_THRESHOLD: "10"
  CIRCUIT_BREAKER_TIMEOUT_MS: "60000"
---
apiVersion: v1
kind: Secret
metadata:
  name: blockchain-service-secrets
  namespace: dex-blockchain
type: Opaque
stringData:
  POSTGRES_URL: "postgresql://postgres:password@postgres:5432/dex_mobile"
  REDIS_URL: "redis://redis:6379"
  REDIS_PASSWORD: "redis_password"
  ETHEREUM_RPC_URL: "https://mainnet.infura.io/v3/YOUR_PROJECT_ID"
  POLYGON_RPC_URL: "https://polygon-mainnet.infura.io/v3/YOUR_PROJECT_ID"
  BSC_RPC_URL: "https://bsc-dataseed.binance.org/"
  ARBITRUM_RPC_URL: "https://arb1.arbitrum.io/rpc"
  ENCRYPTION_KEY: "your-32-character-encryption-key"
  JWT_SECRET: "your-jwt-secret-key"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blockchain-service
  namespace: dex-blockchain
  labels:
    app: blockchain-service
    version: v1
    tier: core
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: blockchain-service
  template:
    metadata:
      labels:
        app: blockchain-service
        version: v1
        tier: core
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: blockchain-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: blockchain-service
        image: your-account.dkr.ecr.region.amazonaws.com/dex-blockchain-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5001
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: blockchain-service-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: blockchain-service-config
              key: PORT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: blockchain-service-config
              key: LOG_LEVEL
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: blockchain-service-secrets
              key: POSTGRES_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: blockchain-service-secrets
              key: REDIS_URL
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: blockchain-service-secrets
              key: REDIS_PASSWORD
        - name: ETHEREUM_RPC_URL
          valueFrom:
            secretKeyRef:
              name: blockchain-service-secrets
              key: ETHEREUM_RPC_URL
        - name: POLYGON_RPC_URL
          valueFrom:
            secretKeyRef:
              name: blockchain-service-secrets
              key: POLYGON_RPC_URL
        - name: BSC_RPC_URL
          valueFrom:
            secretKeyRef:
              name: blockchain-service-secrets
              key: BSC_RPC_URL
        - name: ARBITRUM_RPC_URL
          valueFrom:
            secretKeyRef:
              name: blockchain-service-secrets
              key: ARBITRUM_RPC_URL
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5001
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 5001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      nodeSelector:
        NodeType: blockchain-worker
      tolerations:
      - key: "blockchain-service"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - blockchain-service
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: blockchain-service
  namespace: dex-blockchain
  labels:
    app: blockchain-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "30"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 5001
    protocol: TCP
    name: http
  selector:
    app: blockchain-service
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: blockchain-service-sa
  namespace: dex-blockchain
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/blockchain-service-role
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: blockchain-service-hpa
  namespace: dex-blockchain
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: blockchain-service
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: blockchain-service-pdb
  namespace: dex-blockchain
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: blockchain-service
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: blockchain-service-netpol
  namespace: dex-blockchain
spec:
  podSelector:
    matchLabels:
      app: blockchain-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - namespaceSelector:
        matchLabels:
          name: dex-monitoring
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 5001
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 443   # HTTPS for RPC calls
    - protocol: TCP
      port: 80    # HTTP for RPC calls
    - protocol: UDP
      port: 53    # DNS
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: dex-blockchain
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

    [INPUT]
        Name              tail
        Path              /app/logs/*.log
        Parser            json
        Tag               blockchain-service.*
        Refresh_Interval  5

    [OUTPUT]
        Name  cloudwatch_logs
        Match blockchain-service.*
        region us-west-2
        log_group_name /aws/eks/dex-blockchain-service
        log_stream_prefix blockchain-
        auto_create_group true

  parsers.conf: |
    [PARSER]
        Name   json
        Format json
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On
