version: '3.8'

# =============================================================================
# DEX MOBILE V6 - CONSOLIDATED MICROSERVICES
# Production-ready Docker Compose for AWS deployment
# =============================================================================

networks:
  dex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.dex.network=main"
      - "com.dex.environment=${ENVIRONMENT:-production}"

volumes:
  postgres_data:
    driver: local
    labels:
      - "com.dex.volume=database"
  redis_data:
    driver: local
    labels:
      - "com.dex.volume=cache"
  prometheus_data:
    driver: local
    labels:
      - "com.dex.volume=monitoring"
  grafana_data:
    driver: local
    labels:
      - "com.dex.volume=monitoring"
  logs_data:
    driver: local
    labels:
      - "com.dex.volume=logs"

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================

  # PostgreSQL Database (Supabase compatible)
  postgres:
    image: postgres:15-alpine
    container_name: dex-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dex_mobile}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_MULTIPLE_EXTENSIONS: uuid-ossp,pgcrypto
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./microservices/database:/docker-entrypoint-initdb.d
      - logs_data:/var/log/postgresql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - dex-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.dex.service=database"
      - "com.dex.tier=infrastructure"

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: dex-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
      - ./microservices/chart-api-service/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - dex-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "com.dex.service=cache"
      - "com.dex.tier=infrastructure"

  # =============================================================================
  # CORE MICROSERVICES
  # =============================================================================

  # Blockchain Service - Multi-chain RPC management
  blockchain-service:
    build:
      context: ./microservices/blockchain-service
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
    container_name: dex-blockchain-service
    restart: unless-stopped
    ports:
      - "${BLOCKCHAIN_SERVICE_PORT:-5001}:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-dex_mobile}
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - BSC_RPC_URL=${BSC_RPC_URL}
      - ARBITRUM_RPC_URL=${ARBITRUM_RPC_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dex-network
    volumes:
      - logs_data:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.dex.service=blockchain"
      - "com.dex.tier=core"
      - "com.dex.scalable=true"

  # KYC Service - Know Your Customer verification
  kyc-service:
    build:
      context: ./microservices/kyc-service
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
    container_name: dex-kyc-service
    restart: unless-stopped
    ports:
      - "${KYC_SERVICE_PORT:-4001}:4001"
    environment:
      - NODE_ENV=production
      - PORT=4001
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-dex_mobile}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - IDFY_API_KEY=${IDFY_API_KEY}
      - IDFY_BASE_URL=${IDFY_BASE_URL:-https://eve.idfy.com/v3.0/api}
      - IDFY_ACCOUNT_ID=${IDFY_ACCOUNT_ID}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dex-network
    volumes:
      - logs_data:/app/logs
      - ./microservices/shared:/app/shared:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    labels:
      - "com.dex.service=kyc"
      - "com.dex.tier=compliance"
      - "com.dex.scalable=true"

  # AML Service - Anti-Money Laundering compliance
  aml-service:
    build:
      context: ./microservices/aml-service
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
    container_name: dex-aml-service
    restart: unless-stopped
    ports:
      - "${AML_SERVICE_PORT:-4002}:4002"
    environment:
      - NODE_ENV=production
      - PORT=4002
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-dex_mobile}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SIGNZY_API_KEY=${SIGNZY_API_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dex-network
    volumes:
      - logs_data:/app/logs
      - ./microservices/shared:/app/shared:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    labels:
      - "com.dex.service=aml"
      - "com.dex.tier=compliance"
      - "com.dex.scalable=true"

  # Chart API Service - Market data and charting
  chart-api-service:
    build:
      context: ./microservices/chart-api-service
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
    container_name: dex-chart-api-service
    restart: unless-stopped
    ports:
      - "${CHART_API_SERVICE_PORT:-4000}:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - API_VERSION=v1
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - REDIS_DB=0
      - REDIS_KEY_PREFIX=chart_api:
      - CACHE_TTL_SECONDS=300
      - CACHE_MAX_SIZE=1000
      - COINGECKO_BASE_URL=https://api.coingecko.com/api/v3
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - COINGECKO_RATE_LIMIT_PER_MINUTE=50
      - COINGECKO_TIMEOUT_MS=10000
      - CIRCUIT_BREAKER_THRESHOLD=5
      - CIRCUIT_BREAKER_TIMEOUT_MS=60000
      - QUEUE_CONCURRENCY=5
      - RATE_LIMIT_WINDOW_MS=60000
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000,http://localhost:3001}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - dex-network
    volumes:
      - logs_data:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.dex.service=chart-api"
      - "com.dex.tier=api"
      - "com.dex.scalable=true"

  # Monitoring Service - System health and performance monitoring
  monitoring-service:
    build:
      context: ./microservices/monitoring-service
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
    container_name: dex-monitoring-service
    restart: unless-stopped
    ports:
      - "${MONITORING_SERVICE_PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - HEALTH_CHECK_PORT=3001
      - SERVICES_TO_MONITOR=kyc-service:4001,aml-service:4002,chart-api-service:4000,blockchain-service:5001
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-dex_mobile}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
    depends_on:
      - kyc-service
      - aml-service
      - chart-api-service
      - blockchain-service
      - postgres
      - redis
    networks:
      - dex-network
    volumes:
      - logs_data:/app/logs
      - ./microservices/monitoring-service/dashboards:/app/dashboards:ro
      - ./microservices/monitoring-service/alerts:/app/alerts:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.dex.service=monitoring"
      - "com.dex.tier=observability"
      - "com.dex.scalable=false"

  # =============================================================================
  # OBSERVABILITY STACK
  # =============================================================================

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: dex-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./aws/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dex-network
    labels:
      - "com.dex.service=prometheus"
      - "com.dex.tier=observability"
    profiles:
      - monitoring

  # Grafana - Monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: dex-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./aws/monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - dex-network
    labels:
      - "com.dex.service=grafana"
      - "com.dex.tier=observability"
    profiles:
      - monitoring
